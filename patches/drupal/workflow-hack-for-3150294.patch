diff --git a/core/modules/content_moderation/content_moderation.module b/core/modules/content_moderation/content_moderation.module
index 5366264907..568b9088c9 100644
--- a/core/modules/content_moderation/content_moderation.module
+++ b/core/modules/content_moderation/content_moderation.module
@@ -382,3 +382,23 @@ function content_moderation_views_post_execute(ViewExecutable $view) {
     }
   }
 }
+
+/**
+ * Implements hook_entity_translation_create().
+ */
+function content_moderation_entity_translation_create(EntityInterface $translation) {
+  // We know that EntityStorageBase just copies all fields on a translations,
+  // including moderation_state. This is not correct for a new translation,
+  // which should start at the default state for the workflow.
+  $serviceName = 'content_moderation.moderation_information';
+  $moderationInformation = \Drupal::service($serviceName);
+  if ($moderationInformation->isModeratedEntity($translation)) {
+    $workflow = $moderationInformation->getWorkflowForEntity($translation);
+    $workflow_configuration = $workflow->getTypePlugin()->getConfiguration();
+    $state = 'draft';
+    if (!empty($workflow_configuration['default_moderation_state'])) {
+      $state = $workflow_configuration['default_moderation_state'];
+    }
+    $translation->moderation_state = $state;
+  }
+}
diff --git a/core/modules/content_moderation/src/ModerationInformation.php b/core/modules/content_moderation/src/ModerationInformation.php
index 78d0dc6014..91d8323d2b 100644
--- a/core/modules/content_moderation/src/ModerationInformation.php
+++ b/core/modules/content_moderation/src/ModerationInformation.php
@@ -214,7 +214,7 @@ public function getUnsupportedFeatures(EntityTypeInterface $entity_type) {
   public function getOriginalState(ContentEntityInterface $entity) {
     $state = NULL;
     $workflow_type = $this->getWorkflowForEntity($entity)->getTypePlugin();
-    if (!$entity->isNew() && !$this->isFirstTimeModeration($entity)) {
+    if (!$entity->isNew() && !$entity->isNewTranslation() && !$this->isFirstTimeModeration($entity)) {
       /** @var \Drupal\Core\Entity\RevisionableStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       /** @var \Drupal\Core\Entity\ContentEntityInterface $original_entity */
diff --git a/core/modules/content_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php b/core/modules/content_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
index e641dbb8d5..d2b5bb8438 100644
--- a/core/modules/content_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
+++ b/core/modules/content_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
@@ -124,7 +124,7 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
     // If the entity already exists, grab the most recent revision and load it.
     // The moderation state of the saved revision will be used to display the
     // current state as well determine the appropriate transitions.
-    if (!$entity->isNew()) {
+    if (!$entity->isNew() && !$entity->isNewTranslation()) {
       /** @var \Drupal\Core\Entity\RevisionableStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       /** @var \Drupal\Core\Entity\ContentEntityInterface $original_entity */

