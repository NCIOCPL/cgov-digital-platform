{"version":3,"sources":["components/atomic/Accordion/Accordion.jsx","components/atomic/Accordion/AccordionItem.jsx","components/atomic/Checkbox/Checkbox.jsx","components/atomic/Delighter/Delighter.jsx","components/atomic/InputLabel/InputLabel.jsx","components/atomic/Dropdown/Dropdown.jsx","components/atomic/Pager/Pager.jsx","components/atomic/Radio/Radio.jsx","components/atomic/RemovableTag/RemovableTag.jsx","components/atomic/ResultsListItem/ResultsListItem.jsx","components/atomic/ResultsList/ResultsList.jsx","components/atomic/Table/TableHeaderCell.jsx","components/atomic/Table/TableRow.jsx","components/atomic/Table/TableCell.jsx","components/atomic/Table/Table.jsx","components/atomic/TagContainer/TagContainer.jsx","components/atomic/TextInput/TextInput.jsx","components/atomic/Toggle/Toggle.jsx","components/atomic/index.js","utilities/utilities.js","components/atomic/Fieldset/Fieldset.jsx","components/atomic/Fieldset/index.jsx","components/atomic/Autocomplete/Autocomplete.jsx","polyfills/array_fill.js","services/history.service.js","components/search-modules/Age/Age.jsx","components/search-modules/CancerTypeCondition/CancerTypeCondition.jsx","components/search-modules/CancerTypeKeyword/CancerTypeKeyword.jsx","components/search-modules/DrugTreatment/DrugTreatment.jsx","mocks/mock-interventions.js","components/search-modules/KeywordsPhrases/KeywordsPhrases.jsx","components/search-modules/LeadOrganization/LeadOrganization.jsx","mocks/mock-lead-org.js","components/search-modules/Location/Location.jsx","components/search-modules/TrialId/TrialId.jsx","components/search-modules/TrialInvestigators/TrialInvestigators.jsx","mocks/mock-trial-investigator.js","components/search-modules/TrialPhase/TrialPhase.jsx","components/search-modules/TrialType/TrialType.jsx","components/search-modules/ZipCode/ZipCode.jsx","views/SearchPage/FormBasic/FormBasic.jsx","views/SearchPage/FormAdvanced/FormAdvanced.jsx","views/SearchPage/SearchPage.jsx","views/ResultsPage/ResultsPage.jsx","App.js","index.js"],"names":["Accordion","props","state","activeIndex","startCollapsed","_initialExpand","foundExpandedItem","children","React","Children","toArray","this","i","length","expanded","console","warn","setState","index","map","child","cloneElement","accordionIndex","action","setActiveItem","bind","className","bordered","Component","defaultProps","AccordionItem","makeActive","uuid","id","Utilities","uniqueIdForComponent","element","title","count","Error","aria-expanded","aria-controls","onClick","aria-hidden","Fragment","renderTitleElement","renderContentElement","Checkbox","label","value","name","classes","disabled","hideLabel","otherProps","type","htmlFor","Delighter","url","titleText","href","InputLabel","labelHint","required","hasError","Dropdown","errorMessage","errorMessageBody","utils","event","target","role","emptyPlaceholder","onChange","_handleChange","Pager","data","startFromPage","numberToShow","callback","useState","currentPage","setCurrentPage","useEffect","startFrom","endAt","results","slice","activePage","renderEllipsis","key","tabIndex","determineResults","pageNumber","steps","total","pages","divisions","Math","ceil","pagesFromEnd","Array","fill","el","idx","remainingPages","determineSteps","isFirstPage","isLastPage","onKeyPress","keyHandler","fn","currentStep","isCurrent","toString","Radio","aria-disabled","defaultChecked","RemovableTag","onRemove","aria-selected","aria-label","ResultsListItem","item","isChecked","onCheckChange","checked","status","age","gender","location","ResultsList","selectedResults","setSelectedResults","handleOnCheckChange","indexOf","filter","TableHeaderCell","scope","TableRow","TableCell","Table","columns","borderless","caption","column","colId","displayName","datum","rowKey","cells","renderRows","TagContainer","TextInput","pristine","isPristine","isValid","prevProps","error","helpText","ariaLabel","inputHelpText","labelHidden","maxLength","placeholder","placeHolder","aria-required","onBlur","_handleBlur","spellCheck","enableSpellCheck","validators","validator","pattern","message","_validate","allowedChars","input","Toggle","component","node","ReactDOM","findDOMNode","hasAttribute","getAttribute","matchItemToTerm","term","toLowerCase","sortItems","a","b","aLower","bLower","valueLower","queryPosA","queryPosB","options","e","keys","stopProp","prevDef","stopPropagation","preventDefault","Fieldset","helpUrl","legend","rel","IMPERATIVE_API","Autocomplete","isOpen","highlightedIndex","_debugStates","ensureHighlightedIndex","exposeAPI","handleInputFocus","handleInputBlur","handleChange","handleKeyDown","handleInputClick","maybeAutoCompleteText","refs","_ignoreBlur","_ignoreFocus","_scrollOffset","_scrollTimer","clearTimeout","nextProps","autoHighlight","setMenuPositions","prevState","open","maybeScrollItemIntoView","onMenuVisibilityChange","forEach","ev","itemNode","menuNode","menu","scrollIntoView","onlyScrollIfNeeded","keyDownHandlers","call","items","shouldItemRender","sort","getItemValue","getFilteredItems","isItemSelectable","matchedItem","rect","getBoundingClientRect","computedStyle","global","window","getComputedStyle","marginBottom","parseInt","marginLeft","marginRight","menuTop","bottom","menuLeft","left","menuWidth","width","setIgnoreBlur","onSelect","ignore","chipList","chip","onChipRemove","renderItem","cursor","onMouseEnter","highlightItemFromMouse","selectItemFromMouse","ref","style","top","minWidth","renderMenu","onTouchStart","onMouseLeave","setStateCallback","x","undefined","pageXOffset","document","documentElement","body","parentNode","scrollLeft","y","pageYOffset","scrollTop","focus","selectOnBlur","inputProps","scrollTo","setTimeout","onFocus","ownerDocument","activeElement","isInputFocused","internal","external","debug","push","wrapperClasses","wrapperProps","multiselect","renderChips","renderInput","autoComplete","inputClasses","onKeyDown","composeEventHandlers","JSON","stringify","max","wrapperStyle","menuClass","ArrowDown","p","ArrowUp","Enter","keyCode","select","setSelectionRange","Escape","Tab","prototype","log","Object","defineProperty","TypeError","O","len","start","arguments","relativeStart","k","min","end","relativeEnd","final","history","createBrowserHistory","Age","CancerTypeCondition","CancerTypeKeyword","DrugTreatment","drugVal","setDrugVal","drugChips","setDrugChips","position","display","codes","synonyms","category","lcSynonyms","s","includes","val","newChipList","arr","isHighlighted","join","KeywordsPhrases","LeadOrganization","orgName","setOrgName","term_key","term_type","current_trial_statuses","count_normalized","score","sampleProperty","Location","activeRadio","setActiveRadio","limitToVA","setLimitToVA","handleRadioChange","dist","city","TrialId","TrialInvestigators","tiName","setTiName","TrialPhase","selectedPhases","phaseFields","phases","setPhases","handleCheckPhase","filtered","field","TrialType","selectedTrialTypes","trialTypeFields","trialTypes","setTrialTypes","handleCheckType","trialType","ZipCode","FormBasic","submitFn","redirectToResults","setRedirectToResults","to","onSubmit","FormAdvanced","SearchPage","form","formVersion","setFormVersion","toggleForm","ResultsPage","selectAll","setSelectAll","paginatedResults","setPaginatedResults","pagerPage","setPagerPage","result","handlePagination","slicedResults","renderDelighters","renderControls","isBottom","cbxId","App","exact","from","path","render","mockResults","getElementById"],"mappings":"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","file":"static/js/main.0b1ba0e4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Accordion.scss';\n\nclass Accordion extends React.Component {\n  static propTypes = {\n    bordered: PropTypes.bool,\n    children: PropTypes.node,\n    startCollapsed: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    bordered: false,\n    startCollapsed: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeIndex: props.startCollapsed ? -1 : 0,\n    };\n    this._initialExpand();\n  }\n\n  //  Before the component mounts, loop through the children to see if any of\n  //  them have the `expanded` prop.  This allows consumers of this class to\n  //  specify which specific item they want expanded when the component is\n  //  rendered.\n  //\n  //  If no items have `expanded` passed as a prop, then the default behavior\n  //  will take effect.\n  //\n  //  If more than one item has `expanded`, the last one wins and a console\n  //  warning will be printed.\n  _initialExpand() {\n    let foundExpandedItem = false;\n    let children = React.Children.toArray(this.props.children);\n    for (let i = 0; i < children.length; i++) {\n      let child = children[i];\n      if (child.props.expanded) {\n        if (foundExpandedItem) {\n          console.warn(\n            'Only one AccordionItem can be expanded at a time. You have marked more than one for expansion by default.'\n          ); // eslint-disable-line no-console\n        }\n        this.setState({ activeIndex: i });\n        foundExpandedItem = true;\n      }\n    }\n  }\n  //  Sets the active accordion item.\n  //\n  //  This method is assigned as the `action` of child {@link AccordionItem}\n  //  components.  When the user clicks on a header of one of the accordion items,\n  //  it will invoke this method with its index.  We can simply update our state,\n  //  which will cause the children to be re-rendered so that the correct item\n  //  has its content displayed.\n  //\n  //  To collapse all the items, pass -1 as the value.\n  //\n  //  @param {Number} index The item index that should be the active item.\n  //\n  setActiveItem(index) {\n    this.setState({ activeIndex: index });\n  }\n\n\n  render() {\n    let index = 0;\n    let children = React.Children.map(this.props.children, child => {\n      let i = index++;\n      return React.cloneElement(child, {\n        accordionIndex: i,\n        action: this.setActiveItem.bind(this),\n        expanded: i === this.state.activeIndex,\n      });\n    });\n    return (\n      <div\n        className={`cts-accordion ${\n          this.props.bordered ? 'cts-accordion--bordered' : ''\n        }`}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n\nexport default Accordion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Utilities from '../../../utilities/utilities';\n\nclass AccordionItem extends React.Component {\n  static propTypes = {\n    accordionIndex: PropTypes.number,\n    action: PropTypes.func,\n    children: PropTypes.node,\n    expanded: PropTypes.bool,\n    title: PropTypes.string,\n  };\n\n  static defaultProps = {\n    action: function() {},\n    expanded: false,\n    title: '',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uuid: '',\n    };\n  }\n\n  //  Generates a unique ID for this element using the {@link Utilities}\n  //  function {@link uniqueIdForComponent}.\n  //\n  //  This must happen after the component has been mounted because the\n  //  {@link uniqueIdForComponent} method will check to see if the DOM element\n  //  has a `data-reactid` attribute and use that if present.  This helps keep\n  //  continuity between what was rendered on the server and what the client\n  //  sees.\n  //\n  //  After retrieving the appropriate unique ID, we set our state's `uuid`\n  //  variable to that ID which will cause the component to re-render.\n\n  componentDidMount() {\n    let id = Utilities.uniqueIdForComponent(this);\n    this.setState({ uuid: id });\n  };\n\n  //  Click handler for the title element.\n  //\n  //  This method calls the method defined in our `action` prop (usually set\n  //  by the parent {@link Accordion} class) with our index to make ourselves\n  //  the active element and show our content.\n  //\n  //  If this item is currently active, it will pass -1 as the value to the\n  //  parent {@link Accordion} so that it will collapse the item.\n  makeActive = () => {\n    if (this.props.expanded) {\n      this.props.action(-1);\n    } else {\n      this.props.action(this.props.accordionIndex);\n    }\n  };\n\n  //  Renders the title element of this accordion item.\n  //\n  //  This element will act as a button and invoke our {@link makeActive}\n  //  method whenever it is clicked.\n  //\n  //  See the class documentation for more information on how to supply the value\n  //  for this element.\n  //\n  //  @returns {Node} The rendered DOM node.\n  renderTitleElement() {\n    let element;\n    if (this.props.title.length > 0) {\n      element = <span>{this.props.title}</span>;\n    } else {\n      if (React.Children.count(this.props.children) !== 2) {\n        throw new Error('Either a title or 2 child elements must be supplied.');\n      }\n      let children = React.Children.toArray(this.props.children);\n      element = children[0];\n    }\n    return (\n      <h2 className=\"cts-accordion__heading\" aria-expanded={this.props.expanded}>\n        <button\n          className=\"cts-accordion__button\"\n          aria-expanded={this.props.expanded}\n          aria-controls={`${this.state.uuid}-content`}\n          onClick={this.makeActive}\n        >\n          {element}\n        </button>\n      </h2>\n    );\n  };\n\n  //  Renders our content element\n  //\n  //  @returns {Node} The rendered DOM node\n\n  renderContentElement() {\n    let children = React.Children.toArray(this.props.children);\n    let element = children.length === 2 ? children[1] : children[0];\n    return (\n      <div\n        id={`${this.state.uuid}-content`}\n        className=\"cts-accordion__content\"\n        aria-hidden={!this.props.expanded}\n      >\n        {element}\n      </div>\n    );\n  };\n\n  render() {\n    // Ensure there are only 2 children.\n    if (React.Children.count(this.props.children) > 2) {\n      throw new Error(\n        'AccordionItem elements must have no more than 2 children.'\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {this.renderTitleElement()}\n        {this.renderContentElement()}\n      </React.Fragment>\n    );\n  };\n}\n\nexport default AccordionItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Checkbox.scss';\n\nconst Checkbox = ({\n  id,\n  label,\n  value,\n  name,\n  classes,\n  disabled,\n  hideLabel,\n  ...otherProps\n}) => {\n  \n\n  return (\n  <div className={`cts-checkbox ${classes}`}>\n    <input\n      id={id}\n      className=\"cts-checkbox__input\"\n      type=\"checkbox\"\n      name={name}\n      value={value ? value : id}\n      disabled={disabled || false}\n      {...otherProps}\n    />\n    <label className=\"cts-checkbox__label\" htmlFor={id}>\n      {hideLabel? (<span className=\"show-for-sr\">{label}</span>) : label}\n    </label>\n  </div>\n  );\n};\n\nCheckbox.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  classes: PropTypes.string,\n  hideLabel: PropTypes.bool,\n};\n\nCheckbox.defaultProps = {\n  classes: '',\n  name: 'checkboxes',\n  hideLabel: false\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Delighter.scss';\n\nconst Delighter = ({\n  classes,\n  children,\n  url,\n  titleText\n}) => (\n  <div className={`delighter ${classes}`}>\n    <a href={url}>\n        <h4>{titleText}</h4>\n        {children}\n    </a>\n  </div>\n);\n\nDelighter.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  url: PropTypes.string,\n  titleText: PropTypes.node\n};\n\nDelighter.defaultProps = {\n  children: '',\n  classes: '',\n  url: '',\n  titleText: ''\n};\n\nexport default Delighter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './InputLabel.scss';\n\nconst InputLabel = ({\n  label,\n  labelHint,\n  htmlFor,\n  required,\n  hasError\n}) => {\n  let classes = 'cts-label';\n  classes += required ? ' cts-label--required' : '';\n  classes += hasError ? ' cts-label--error' : '';\n  return (\n    <label id={`${htmlFor}-label`} className={classes} htmlFor={htmlFor}>\n      {label}\n      {labelHint && <span className=\"cts-hint\"> {labelHint}</span>}\n    </label>\n  );\n};\n\nInputLabel.propTypes = {\n  hasError: PropTypes.bool,\n  htmlFor: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  labelHint: PropTypes.string,\n  required: PropTypes.bool,\n};\n\nexport default InputLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '../InputLabel';\nimport utils from '../../../utilities/utilities';\nimport './Dropdown.scss';\n\n//  Class representing a dropdown\n//\n//  This component expects that its children will be <options> elements\n//\n//  Required props:\n//  - label: string. Sets the text for the input's label\n//  - children: node. Series of <option> elements\n//\n//  Optional props:\n//  - id: string. Sets the select's id attribute nd the label's for attribute\n//  - value: string. Sets default select choice. Must match the value of one of the <option> elements. Or if an empty string, a blank placeholder is added.\n//  - required: bool. Adds required label, required attribute and aria-required='true'\n//  - errorMessage: string. If present triggers the error state and displays the error message\n\nexport default class Dropdown extends React.Component {\n  //  Constructor\n  //  @param {object} props The props. See proptypes below.\n  //\n  //  Set initial state\n  //  value: default selected option passed from a prop\n  //  hasError: tracks if the field has an error\n  //  errorMessage: displayed message when the field hasError\n\n  static propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n    classes: PropTypes.string,\n    required: PropTypes.bool,\n    hasError: PropTypes.bool,\n    errorMessage: PropTypes.string,\n    value: PropTypes.string,\n    action: PropTypes.func,\n  };\n\n  static defaultProps = {\n    required: false,\n    classes: '',\n    hasError: false,\n    action: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.props.value || '',\n      hasError: this.props.errorMessage ? true : false,\n      errorMessageBody: this.props.errorMessage\n        ? this.props.errorMessage\n        : null,\n    };\n  }\n\n  // check to see if an Id was passed in, if not generate one.\n  componentWillMount() {\n    this.id = this.props.id ? this.props.id : utils.uniqueIdForComponent(this);\n  }\n\n  // If a errorMessage is passed after initial render, adjust the state accordingly\n  componentWillReceiveProps({ errorMessage }) {\n    if (errorMessage) {\n      this.setState({\n        hasError: true,\n        errorMessageBody: errorMessage,\n      });\n    }\n  }\n\n  //  Update the state when user selects a new option\n  //  @param {event} event The async event\n\n  _handleChange(event) {\n    this.setState({\n      value: event.target.value,\n    });\n    this.props.action(event.target.value);\n  }\n\n  render() {\n    let errorMessage = null;\n    if (this.state.hasError) {\n      errorMessage = (\n        <span className=\"cts-error-message\" role=\"alert\">\n          {this.state.errorMessageBody}\n        </span>\n      );\n    }\n\n    let emptyPlaceholder = null;\n\n    if (this.state.value === '') {\n      emptyPlaceholder = (\n        <option disabled value=\"\">\n          Select ...\n        </option>\n      );\n    }\n\n    return (\n      <div className={this.props.classes}>\n        <InputLabel\n          htmlFor={this.id}\n          required={this.props.required}\n          label={this.props.label}\n        />\n\n        {errorMessage}\n\n        <select\n          className=\"cts-select\"\n          name={this.props.id}\n          id={this.id}\n          value={this.state.value}\n          required={this.props.required}\n          onChange={this._handleChange.bind(this)}\n        >\n          {emptyPlaceholder}\n          {this.props.children}\n        </select>\n      </div>\n    );\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Utilities from '../../../utilities/utilities';\nimport './Pager.scss';\n\nconst Pager = ({ data, startFromPage, numberToShow, callback }) => {\n  const [currentPage, setCurrentPage] = useState(startFromPage);\n\n  useEffect(() => {\n    if (callback) {\n      const startFrom = currentPage * numberToShow;\n      const endAt = startFrom + numberToShow;\n      const results = data.slice(startFrom, endAt);\n      callback(results, currentPage);\n    }\n  }, [currentPage]);\n\n  useEffect(() => {\n    setCurrentPage(startFromPage);\n  }, [startFromPage])\n\n  const renderEllipsis = key => {\n    return (\n      <div key={key} tabIndex=\"-1\" className=\"pager__num pager__ellipses\">\n        {'...'}\n      </div>\n    );\n  };\n\n  const determineSteps = (total, numberToShow, activePage) => {\n    const divisions = Math.ceil(total / numberToShow);\n    const pagesFromStart = activePage;\n    const pagesFromEnd = divisions - (activePage + 1);\n    let pages;\n    if (divisions > 1) {\n      if (pagesFromStart > 3) {\n        pages = [0, renderEllipsis, activePage - 1, activePage];\n      } else {\n        pages = Array(activePage + 1)\n          .fill()\n          .map((el, idx) => idx);\n      }\n      if (pagesFromEnd > 3) {\n        pages = [\n          ...pages,\n          activePage + 1,\n          renderEllipsis,\n          divisions - 1,\n        ];\n      } else {\n        const remainingPages = Array(pagesFromEnd)\n          .fill()\n          .map((el, idx) => activePage + 1 + idx);\n        pages = [...pages, ...remainingPages];\n      }\n    } else {\n      //One or fewer divisions exist. Do not render the Pager\n      pages = [];\n    }\n    return pages;\n  };\n\n  const determineResults = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  const renderSteps = (stepsArray, activePage) => {\n    return stepsArray.map((currentStep, idx) => {\n      if (typeof currentStep === 'function') {\n        return currentStep(idx);\n      } else {\n        const isCurrent = currentStep.toString() === activePage.toString();\n        return (\n          <div\n            key={idx}\n            tabIndex=\"0\"\n            className={`pager__num ${isCurrent ? 'pager__num--active' : ''}`}\n            onClick={!isCurrent ? () => determineResults(currentStep) : null}\n            onKeyPress={Utilities.keyHandler({\n              fn: !isCurrent ? () => determineResults(currentStep) : null,\n            })}\n          >\n            {currentStep + 1}\n          </div>\n        );\n      }\n    });\n  };\n\n  let steps = determineSteps(data.length, numberToShow, currentPage);\n  let isFirstPage = currentPage === 0;\n  let isLastPage = currentPage + 1 === Math.ceil(data.length / numberToShow);\n  return (\n    <nav className=\"pager__container\">\n      {steps.length > 0 ? (\n        <div className=\"pager__nav\">\n          {!isFirstPage && (\n            <div\n              className=\"pager__arrow\"\n              tabIndex=\"0\"\n              onClick={() => determineResults(currentPage - 1)}\n              onKeyPress={Utilities.keyHandler({\n                fn: () => determineResults(currentPage - 1),\n              })}\n            >\n              {'< Previous'}\n            </div>\n          )}\n          {renderSteps(steps, currentPage)}\n          {!isLastPage && (\n            <div\n              className=\"pager__arrow\"\n              tabIndex=\"0\"\n              onClick={() => determineResults(currentPage + 1)}\n              onKeyPress={Utilities.keyHandler({\n                fn: () => determineResults(currentPage + 1),\n              })}\n            >\n              {'Next >'}\n            </div>\n          )}\n        </div>\n      ) : null}\n    </nav>\n  );\n};\n\nPager.propTypes = {\n  data: PropTypes.array,\n  startFromPage: PropTypes.number,\n  numberToShow: PropTypes.number,\n  callback: PropTypes.func.isRequired,\n};\n\nPager.defaultProps = {\n  data: [],\n  startFromPage: 0,\n  numberToShow: 10,\n};\n\nexport default Pager;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Utilities from '../../../utilities/utilities';\n\nimport './Radio.scss';\n\nconst Radio = ({ id, label, className, disabled, value, ...otherProps }) => (\n  <div className={`cts-radio ${className}`}>\n    <input\n      className=\"cts-radio__input\"\n      type=\"radio\"\n      disabled={disabled}\n      aria-disabled={disabled}\n      id={id}\n      value={value ? value : id}\n      {...otherProps}\n    />\n    <label className=\"cts-radio__label\" htmlFor={id}>\n      {label}\n    </label>\n  </div>\n);\n\nRadio.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  className: PropTypes.string,\n};\n\nRadio.defaultProps = {\n  id: Utilities.uniqueIdForComponent(),\n  name: 'radios',\n  disabled: false,\n  defaultChecked: false,\n  className: '',\n};\n\nexport default Radio;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './RemovableTag.scss';\n\nconst RemovableTag = ({\n  label,\n  onRemove\n}) => {\n  const handleClick = () => {\n    onRemove({label});\n  }\n\n  return (\n    <div className=\"cts-removable-tag\" role=\"option\" aria-selected=\"true\">\n      <button className=\"cts-removable-tag__button\" type=\"button\" aria-label={`remove ${label}`} onClick={handleClick} value={label}><span aria-hidden=\"true\">X</span></button>\n      <span className=\"cts-removable-tag__label\">{label}</span>\n    </div>\n  );\n};\n\nRemovableTag.propTypes = {\n  label: PropTypes.string,\n  onRemove: PropTypes.func\n};\n\nRemovableTag.defaultProps = {\n  onRemove: () => {}\n};\n\nexport default RemovableTag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Checkbox from '../Checkbox';\nimport './ResultsListItem.scss';\n\nconst ResultsListItem = ({ id, item, isChecked, onCheckChange }) => {\n\n  return (\n    <div className=\"results-list-item results-list__item\">\n      <div className=\"results-list-item__checkbox\">\n        <Checkbox\n          id={id || item.title}\n          name={item.title}\n          checked={isChecked}\n          label=\"Select this article for print\"\n          hideLabel\n          onChange={() => onCheckChange(id)}\n        />\n      </div>\n      <div className=\"results-list-item__contents\">\n        <div className=\"results-list-item__title\">\n          <a href={item.url}>{item.title}</a>\n        </div>\n        <div className=\"results-list-item__category\"><span>Status:</span>{item.status ? 'Active' : 'Active'}</div>\n        <div className=\"results-list-item__category\"><span>Age:</span>{item.age} years and older</div>\n        <div className=\"results-list-item__category\"><span>Gender:</span>{item.gender}</div>\n        <div className=\"results-list-item__category\"><span>Location:</span>{item.location} locations</div>\n      </div>\n    </div>\n  );\n};\n\nResultsListItem.propTypes = {\n  id: PropTypes.string,\n  item: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    status: PropTypes.bool.isRequired,\n    age: PropTypes.number.isRequired,\n    gender: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n  }),\n  isChecked: PropTypes.bool,\n  onCheckChange: PropTypes.func.isRequired,\n};\n\nResultsListItem.defaultProps = {\n  results: [],\n  isChecked: false\n};\n\nexport default ResultsListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ResultsListItem from '../ResultsListItem';\nimport './ResultsList.scss';\n\nconst ResultsList = ({ results, selectedResults, setSelectedResults }) => {\n  const handleOnCheckChange = id => {\n    if (selectedResults.indexOf(id) === -1) {\n      setSelectedResults([...selectedResults, id]);\n    } else {\n      setSelectedResults(selectedResults.filter(item => item !== id));\n    }\n  };\n\n  return (\n    <div className=\"results-list\">\n      {results.map(item => {\n        return (\n          <ResultsListItem\n            key={item.title}\n            id={item.title}\n            item={item}\n            isChecked={selectedResults.indexOf(item.title) > -1}\n            onCheckChange={handleOnCheckChange}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nResultsList.propTypes = {\n  setSelectedResults: PropTypes.func,\n  selectedResults: PropTypes.array,\n  results: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      status: PropTypes.bool.isRequired,\n      age: PropTypes.number.isRequired,\n      gender: PropTypes.string.isRequired,\n      location: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nResultsList.defaultProps = {\n  results: [],\n  selectedResults: []\n};\n\nexport default ResultsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableHeaderCell = ({ children, ...otherProps }) => (\n  <th {...otherProps}>{children}</th>\n);\n\nTableHeaderCell.propTypes = {\n  scope: PropTypes.oneOf(['col', 'row']).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nTableHeaderCell.defaultProps = {\n  scope: 'row',\n};\n\nexport default TableHeaderCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Table.scss';\n\nconst TableRow = ({ children, ...otherProps }) => (\n  <tr {...otherProps}>{children}</tr>\n);\n\nTableRow.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableCell = ({ children, ...otherProps }) => (\n  <td {...otherProps}>{children}</td>\n);\n\nTableCell.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default TableCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\nimport TableCell from './TableCell';\n\nimport './Table.scss';\n\nconst Table = ({ columns, borderless, caption, data, children }) => {\n  //  Generates the table header cells\n  //  @returns {node} <th> elements\n\n  const renderHeaders = () => {\n    // Loop over the props.columns array\n    return columns.map((column, index) => {\n      // if each item in the array is a string, then use that inside the <th>\n      if (typeof column === 'string') {\n        return (\n          <TableHeaderCell scope=\"col\" key={index}>\n            {column}\n          </TableHeaderCell>\n        );\n        // else expect an object.\n        // Use object.displayName for the <th> text or colId is displayName is not provided\n      } else {\n        let { colId, displayName } = column;\n        return (\n          <TableHeaderCell scope=\"col\" key={index}>\n            {displayName || colId}\n          </TableHeaderCell>\n        );\n      }\n    });\n  };\n\n  //  Renders the table rows if data is passed in\n  //  @param {array} data from props.data\n  //  @returns {node} rendered DOM node (<tr><td>...</tr>)\n  const renderRows = data => {\n    // Loop over the data array\n    return data.map((datum, rowKey) => {\n      // Loop over columns array to get the colIds\n      const cells = columns.map(({ colId }, key) => {\n        // if it's the first cell in the row, make it a <th>\n        if (key === 0) {\n          return (\n            <TableHeaderCell scope=\"row\" key={key}>\n              {datum[colId]}\n            </TableHeaderCell>\n          );\n          // else make it a <td>\n        } else {\n          return <TableCell key={key}>{datum[colId]}</TableCell>;\n        }\n      });\n      // return a row with all the cells for each item in columns array\n      return <TableRow key={rowKey}>{cells}</TableRow>;\n    });\n  };\n\n  return (\n    <table className={`cts-table ${borderless ? 'cts-table--borderless' : ''}`}>\n      {caption ? <caption>{caption}</caption> : null}\n\n      <thead>\n        <tr>{renderHeaders()}</tr>\n      </thead>\n\n      <tbody>{data ? renderRows(data) : children}</tbody>\n    </table>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  borderless: PropTypes.bool,\n  caption: PropTypes.string,\n  data: PropTypes.array,\n  children: PropTypes.node,\n};\n\nTable.defaultProps = {\n  borderless: false,\n};\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TagContainer.scss';\n\nconst TagContainer = ({\n  children\n}) => {\n  return (\n    <div className=\"cts-tag-container\">\n      { children }\n    </div>\n  );\n};\n\nTagContainer.propTypes = {\n  children: PropTypes.node\n};\n\nTagContainer.defaultProps = {\n  children: <></>\n};\n\nexport default TagContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Utilities from '../../../utilities/utilities';\nimport InputLabel from '../InputLabel';\nimport './TextInput.scss';\n\nclass TextInput extends React.Component {\n  static propTypes = {\n    action: PropTypes.func,\n    allowedChars: PropTypes.object,\n    classes: PropTypes.string,\n    enableSpellCheck: PropTypes.bool,\n    errorMessage: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    inputHelpText: PropTypes.string,\n    isValid: PropTypes.bool,\n    label: PropTypes.string.isRequired,\n    labelHidden: PropTypes.bool,\n    labelHint: PropTypes.string,\n    maxLength: PropTypes.number,\n    placeHolder: PropTypes.string,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    type: PropTypes.oneOf([\n      'text',\n      'email',\n      'password',\n      'search',\n      'url',\n      'date',\n      'month',\n      'tel',\n      'week',\n      'number',\n    ]),\n    value: PropTypes.string,\n    validators: PropTypes.array,\n  };\n\n  static defaultProps = {\n    action: () => {},\n    classes: '',\n    type: 'text',\n    enableSpellCheck: false,\n    required: false,\n    disabled: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    let pristine = true;\n    if (this.props.value || this.props.errorMessage) {\n      pristine = false;\n    }\n\n    this.state = {\n      value: this.props.value || '',\n      isPristine: pristine,\n      isValid: this.props.isValid ? true : false,\n      hasError: this.props.errorMessage ? true : false,\n      errorMessage: this.props.errorMessage,\n    };\n\n    // Generate an HTML ID if one was not provided\n    this.id = this.props.id || Utilities.uniqueIdForComponent();\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a errorMessage is passed after initial render, adjust the state accordingly\n    if (prevProps.errorMessage !== this.props.errorMessage) {\n      this.setState({\n        isPristine: false,\n        isValid: false,\n        hasError: true,\n        errorMessageBody: this.props.errorMessage,\n      });\n    }\n  }\n\n  render() {\n    let error,\n      helpText,\n      ariaLabel = null;\n    if (this.state.hasError) {\n      error = (\n        <span className=\"cts-input__error\" role=\"alert\">\n          {this.state.errorMessage}\n        </span>\n      );\n    }\n    if (this.props.inputHelpText) {\n      helpText = (\n        <span className=\"cts-input__help-text\">{this.props.inputHelpText}</span>\n      );\n    }\n\n    ariaLabel = this.props.labelHidden\n      ? { 'aria-label': this.props.label }\n      : { 'aria-labelledby': this.props.id + '-label' };\n\n    return (\n      <div className={this.props.classes}>\n        {this.props.labelHidden ? null : (\n          <InputLabel\n            label={this.props.label}\n            labelHint={this.props.labelHint}\n            htmlFor={this.id}\n            hasError={this.state.hasError}\n            required={this.props.required}\n          />\n        )}\n        <input\n          id={this.id}\n          type={this.props.type}\n          value={this.state.value}\n          className={`cts-input ${this.props.classes} ${\n            this.state.isValid ? 'cts-input--success' : ''\n          }`}\n          required={this.props.required}\n          maxLength={this.props.maxLength}\n          placeholder={this.props.placeHolder}\n          aria-required={this.props.required}\n          disabled={this.props.disabled}\n          onBlur={this._handleBlur.bind(this)}\n          onChange={this._handleChange.bind(this)}\n          spellCheck={this.props.enableSpellCheck ? true : false}\n          {...ariaLabel}\n        />\n        {error}\n        {helpText}\n      </div>\n    );\n  }\n\n  _validate() {\n    let validators = this.props.validators;\n    // Check if field empty\n    if (!this.state.value) {\n      // If it's required, say so\n      if (this.props.required) {\n        this.setState({\n          hasError: true,\n          isValid: false,\n          errorMessage: 'This field is required',\n        });\n      } else {\n        // is empty so reset isValid and hasError\n        this.setState({\n          isValid: false,\n          hasError: false,\n          errorMessage: null,\n        });\n      }\n    }\n    // If validator(s) were sent as a prop, test them next\n    else if (validators) {\n      // eslint-disable-next-line\n      for (let validator of validators) {\n        // check is validator is forced 'no validation'\n        if (!validator.pattern && !validator.isValid(this.state.value)) {\n          this.setState({\n            hasError: true,\n            isValid: false,\n            errorMessage: validator.message,\n          });\n          break;\n        } else {\n          this.setState({\n            hasError: false,\n            isValid: true,\n          });\n        }\n      }\n    }\n    // must be required field with a value, so no error\n    else {\n      this.setState({\n        hasError: false,\n        errorMessage: null,\n      });\n    }\n  }\n\n  //  onBlur event on input\n  _handleBlur() {\n    if (\n      (this.props.required || this.props.validators) &&\n      !this.state.isPristine\n    ) {\n      this._validate();\n    }\n  }\n\n  //  his function runs every time the user changes the contents of the input.\n  //  @param {event} event The event\n  _handleChange(event) {\n    // Check if allowedChars validator exists. If it does, check the last char\n    // entered against the validator. If validation fails, return thereby preventing\n    // the value from being added to the state.\n    if (this.props.allowedChars) {\n      let input = event.target.value.slice(-1);\n      if (!this.props.allowedChars.isValid(input)) {\n        return;\n      }\n    }\n\n    // Call action handler prop\n    this.props.action(event.target.value);\n\n    // Commit the input's value to state.value.\n    this.setState({ value: event.target.value }, () => {\n      // React docs suggest this callback should generally go in ComponentDidUpdate,\n      // however since both this callback actions update the state, they must\n      // go here because changing state in ComponentDidUpdate would cause a\n      // recursive loop and blow up the call stack\n      if (this.state.value && this.state.isPristine) {\n        this.setState({ isPristine: false });\n      }\n      // if\n      if (this.state.hasError || this.state.isValid) {\n        this._validate();\n      }\n    });\n  }\n}\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Toggle.scss';\n\nconst Toggle = ({ id, classes, label, ...otherProps }) => {\n\n  return (\n    <div className={`cts-toggle ${classes}`}>\n      <input type=\"checkbox\" className=\"cts-toggle__input\" id={id} name={id} {...otherProps} />\n      <label className=\"cts-toggle__label\" htmlFor={id} aria-label={label}>\n        <span aria-hidden=\"true\" className=\"neg\">No</span>\n        <span aria-hidden=\"true\" className=\"pos\">Yes</span>\n      </label>\n    </div>\n  );\n};\n\nToggle.propTypes = {\n  id: PropTypes.string,\n  defaultChecked: PropTypes.bool,\n  classes: PropTypes.string,\n  label: PropTypes.string\n};\n\nToggle.defaultProps = {\n  classes: '',\n  defaultChecked: false,\n  label: ''\n};\n\nexport default Toggle;\n","export { default as Accordion } from './Accordion';\nexport { default as AccordionItem } from './Accordion/AccordionItem';\nexport { default as Autocomplete } from './Autocomplete';\nexport { default as Checkbox } from './Checkbox';\nexport { default as Delighter } from './Delighter';\nexport { default as Dropdown } from './Dropdown';\nexport { default as Fieldset } from './Fieldset';\nexport { default as InputLabel } from './InputLabel';\nexport { default as Pager } from './Pager';\nexport { default as Radio } from './Radio';\nexport { default as RemovableTag } from './RemovableTag';\nexport { default as ResultsList } from './ResultsList';\nexport { default as Table } from './Table';\nexport { default as TableCell } from './Table/TableCell';\nexport { default as TableRow } from './Table/TableRow';\nexport { default as TableHeaderCell } from './Table/TableHeaderCell';\nexport { default as TagContainer } from './TagContainer';\nexport { default as TextInput } from './TextInput';\nexport { default as Toggle } from './Toggle';\n","import ReactDOM from 'react-dom';\n\nlet index = 0;\n\n//  Provides utility functions for components in this library.\n//\n//  All the functions on this class should be defined as static functions so this\n//  class acts more like a namespace than a class that you create instances of.\n//\n//  See each method's documentation for more infomation about what this class\n//  provides.\nexport default class Utilities {\n  //  Returns a unique identifier for the supplied component instance.\n  //\n  //  This method should only be called from `componentDidMount`.\n  //\n  //  This method attempts to re-use an existing unique ID (e.g. `data-reactid`)\n  //  as much as possible.  If no such unique ID exists, it will generate a\n  //  UUID to use for the component instance.\n  //\n  //  @param {React.Component} component The React component to compute a unique\n  //                                     identifier for.\n  //  @returns {String} A unique identifier for the supplied component.\n\n  static uniqueIdForComponent(component) {\n    let node = ReactDOM.findDOMNode(component); // eslint-disable-line react/no-find-dom-node\n    if (node) {\n      if (node.hasAttribute('data-reactid')) {\n        return 'data-reactid-' + node.getAttribute('data-reactid');\n      }\n    }\n    return `component-unique-id-${index++}`;\n  }\n\n  /**\n   * A higher order function to handle key events. Especially useful in cases where you want multiple keys to\n   * trigger the same event. Pass in the callback you want the keypress to trigger and an array\n   * of keys (using either reserved keychar strings or the numeric keycode),\n   * and get back out a wrapped version of your function to use as an eventListener callback that is\n   * set to trigger only in cases where the keypress event is triggered by\n   * one of the specified keys.\n   *\n   * Additional paramaters allow you to control the stopPropagation and preventDefault handling of the browser.\n   * @param {Object} options\n   * @param {function} [options.fn = () => {}]\n   * @param {Array<Number|String>} [options.keys = []]\n   * @param {boolean} [options.stopProp = false]\n   * @param {boolean} [options.prevDef = false]\n   * @return {function} A wrapped version of your function to pass to use as an eventListener callback\n   */\n  static keyHandler = (options = {}) => e => {\n    if (typeof options !== 'object' || options === null) {\n      return;\n    }\n\n    const {\n      fn = () => {},\n      keys = ['Enter', ' '],\n      stopProp = true,\n      prevDef = true,\n    } = options;\n\n    if (keys.indexOf(e.key) !== -1) {\n      stopProp && e.stopPropagation();\n      prevDef && e.preventDefault();\n      return fn();\n    }\n  };\n}\n\nexport function matchItemToTerm(item, value) {\n  return item.term.toLowerCase().indexOf(value.toLowerCase()) !== -1;\n}\n\nexport function sortItems(a, b, value) {\n  const aLower = a.term.toLowerCase();\n  const bLower = b.term.toLowerCase();\n  const valueLower = value.toLowerCase();\n  const queryPosA = aLower.indexOf(valueLower);\n  const queryPosB = bLower.indexOf(valueLower);\n  if (queryPosA !== queryPosB) {\n    return queryPosA - queryPosB;\n  }\n  return aLower < bLower ? -1 : 1;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Fieldset.scss';\n\n//  As a convenience, passing a name property will give that name to each\n//  Checkbox or radio button child so they will all be the same.\n//  @returns {node} The rendered DOM node\n//  @param {object} props  The props\n\nconst Fieldset = ({\n  children,\n  classes,\n  helpUrl,\n  id,\n  legend,\n  name,\n  onChange,\n}) => {\n  if (name) {\n    children = React.Children.map(children, child =>\n      React.cloneElement(child, { name, onChange: onChange })\n    );\n  }\n\n  return (\n    <fieldset id={`fieldset--${id}`} className={`cts-fieldset ${classes}`}>\n      <legend className=\"cts-fieldset__legend\">\n        <span>{legend}</span>\n      </legend>\n      <a\n        href={helpUrl}\n        className=\"text-icon-help\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        aria-label=\"Help\"\n      >\n        ?\n      </a>\n      <div className=\"cts-fieldset__body\">{children}</div>\n    </fieldset>\n  );\n};\n\nFieldset.propTypes = {\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.string,\n  helpUrl: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  legend: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nFieldset.defaultProps = {\n  classes: ''\n};\n\nexport default Fieldset;\n","export { default } from './Fieldset';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport {InputLabel, RemovableTag} from '../../atomic';\nimport Utilities from '../../../utilities/utilities';\nimport './Autocomplete.scss';\n\nconst IMPERATIVE_API = [\n  'blur',\n  'checkValidity',\n  'click',\n  'focus',\n  'select',\n  'setCustomValidity',\n  'setSelectionRange',\n  'setRangeText',\n];\n\nfunction getScrollOffset() {\n  return {\n    x:\n      window.pageXOffset !== undefined\n        ? window.pageXOffset\n        : (\n            document.documentElement ||\n            document.body.parentNode ||\n            document.body\n          ).scrollLeft,\n    y:\n      window.pageYOffset !== undefined\n        ? window.pageYOffset\n        : (\n            document.documentElement ||\n            document.body.parentNode ||\n            document.body\n          ).scrollTop,\n  };\n}\n\nclass Autocomplete extends React.Component {\n  static propTypes = {\n    /**\n     * Input id\n     */\n    id: PropTypes.string,\n    /**\n     * The items to display in the dropdown menu\n     */\n    labelHint: PropTypes.string,\n    /**\n     * The items to display in the dropdown menu\n     */\n    inputClasses: PropTypes.string,\n    /**\n     * The items to display in the dropdown menu\n     */\n    items: PropTypes.array.isRequired,\n    /**\n     * The value to display in the input field\n     */\n    value: PropTypes.any,\n    /**\n     * Arguments: `event: Event, value: String`\n     *\n     * Invoked every time the user changes the input's value.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Arguments: `value: String, item: Any`\n     *\n     * Invoked when the user selects an item from the dropdown menu.\n     */\n    onSelect: PropTypes.func,\n    /**\n     * Arguments: `item: Any, value: String`\n     *\n     * Invoked for each entry in `items` and its return value is used to\n     * determine whether or not it should be displayed in the dropdown menu.\n     * By default all items are always rendered.\n     */\n    shouldItemRender: PropTypes.func,\n    /**\n     * Arguments: `item: Any`\n     *\n     * Invoked when attempting to select an item. The return value is used to\n     * determine whether the item should be selectable or not.\n     * By default all items are selectable.\n     */\n    isItemSelectable: PropTypes.func,\n    /**\n     * Arguments: `itemA: Any, itemB: Any, value: String`\n     *\n     * The function which is used to sort `items` before display.\n     */\n    sortItems: PropTypes.func,\n    /**\n     * Arguments: `item: Any`\n     *\n     * Used to read the display value from each entry in `items`.\n     */\n    getItemValue: PropTypes.func.isRequired,\n    /**\n     * Arguments: `item: Any, isHighlighted: Boolean, styles: Object`\n     *\n     * Invoked for each entry in `items` that also passes `shouldItemRender` to\n     * generate the render tree for each item in the dropdown menu. `styles` is\n     * an optional set of styles that can be applied to improve the look/feel\n     * of the items in the dropdown menu.\n     */\n    renderItem: PropTypes.func.isRequired,\n    /**\n     * Arguments: `items: Array<Any>, value: String, styles: Object`\n     *\n     * Invoked to generate the render tree for the dropdown menu. Ensure the\n     * returned tree includes every entry in `items` or else the highlight order\n     * and keyboard navigation logic will break. `styles` will contain\n     * { top, left, minWidth } which are the coordinates of the top-left corner\n     * and the width of the dropdown menu.\n     */\n    renderMenu: PropTypes.func,\n    /**\n     * Styles that are applied to the dropdown menu \n     * `menuClass` applies css landmark to add custom styles\n     * to the rendered menu\n     */\n    menuClass: PropTypes.object,\n    /**\n     * Arguments: `props: Object`\n     *\n     * Invoked to generate the input element. The `props` argument is the result\n     * of merging `props.inputProps` with a selection of props that are required\n     * both for functionality and accessibility. At the very least you need to\n     * apply `props.ref` and all `props.on<event>` event handlers. Failing to do\n     * this will cause `Autocomplete` to behave unexpectedly.\n     */\n    renderInput: PropTypes.func,\n    /**\n     * Props passed to `props.renderInput`. By default these props will be\n     * applied to the `<input />` element rendered by `Autocomplete`, unless you\n     * have specified a custom value for `props.renderInput`. Any properties\n     * supported by `HTMLInputElement` can be specified, apart from the\n     * following which are set by `Autocomplete`: value, autoComplete, role,\n     * aria-autocomplete. `inputProps` is commonly used for (but not limited to)\n     * placeholder, event handlers (onFocus, onBlur, etc.), autoFocus, etc..\n     */\n    inputProps: PropTypes.object,\n    /**\n     * Props that are applied to the element which wraps the `<input />` and\n     * dropdown menu elements rendered by `Autocomplete`.\n     */\n    wrapperProps: PropTypes.object,\n    /**\n     * This is a shorthand for `wrapperProps={{ style: <your styles> }}`.\n     * Note that `wrapperStyle` is applied before `wrapperProps`, so the latter\n     * will win if it contains a `style` entry.\n     */\n    wrapperClasses: PropTypes.string,\n    /**\n     * Whether or not to automatically highlight the top match in the dropdown\n     * menu.\n     */\n    autoHighlight: PropTypes.bool,\n    /**\n     * Whether or not to automatically select the highlighted item when the\n     * `<input>` loses focus.\n     */\n    selectOnBlur: PropTypes.bool,\n    /**\n     * Arguments: `isOpen: Boolean`\n     *\n     * Invoked every time the dropdown menu's visibility changes (i.e. every\n     * time it is displayed/hidden).\n     */\n    onMenuVisibilityChange: PropTypes.func,\n    /**\n     * Used to override the internal logic which displays/hides the dropdown\n     * menu. This is useful if you want to force a certain state based on your\n     * UX/business logic. Use it together with `onMenuVisibilityChange` for\n     * fine-grained control over the dropdown menu dynamics.\n     */\n    open: PropTypes.bool,\n    debug: PropTypes.bool,\n    multiselect: PropTypes.bool,\n    chipList: PropTypes.array,\n    onChipRemove: PropTypes.func\n  };\n\n  static defaultProps = {\n    inputClasses: '',\n    value: '',\n    wrapperProps: {},\n    wrapperStyle: {},\n    inputProps: {},\n    renderInput(props) {\n      return <input {...props} />;\n    },\n    onChange() {},\n    onSelect() {},\n    isItemSelectable() {\n      return true;\n    },\n    renderMenu(items, value, style) {\n      return <div className={`cts-autocomplete__menu ${this.props.menuClass}`} children={items} />;\n    },\n    autoHighlight: true,\n    selectOnBlur: false,\n    onMenuVisibilityChange() {},\n    labelHint: '',\n    wrapperClasses: '',\n    multiselect: false,\n    chipList: [],\n    onChipRemove() {}\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      highlightedIndex: null,\n    };\n    this._debugStates = [];\n    this.ensureHighlightedIndex = this.ensureHighlightedIndex.bind(this);\n    this.exposeAPI = this.exposeAPI.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleInputClick = this.handleInputClick.bind(this);\n    this.maybeAutoCompleteText = this.maybeAutoCompleteText.bind(this);\n\n    // Generate an HTML ID if one was not provided\n    this.id = this.props.id || Utilities.uniqueIdForComponent();\n  }\n\n  componentWillMount() {\n    this.refs = {};\n    this._ignoreBlur = false;\n    this._ignoreFocus = false;\n    this._scrollOffset = null;\n    this._scrollTimer = null;\n    // this.refs is frozen, so we need to assign a new object to it\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._scrollTimer);\n    this._scrollTimer = null;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.state.highlightedIndex !== null) {\n      this.setState(this.ensureHighlightedIndex);\n    }\n    if (\n      nextProps.autoHighlight &&\n      (this.props.value !== nextProps.value ||\n        this.state.highlightedIndex === null)\n    ) {\n      this.setState(this.maybeAutoCompleteText);\n    }\n  }\n\n  componentDidMount() {\n    if (this.isOpen()) {\n      this.setMenuPositions();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      (this.state.isOpen && !prevState.isOpen) ||\n      ('open' in this.props && this.props.open && !prevProps.open)\n    )\n      this.setMenuPositions();\n\n    this.maybeScrollItemIntoView();\n    if (prevState.isOpen !== this.state.isOpen) {\n      this.props.onMenuVisibilityChange(this.state.isOpen);\n    }\n  }\n\n  exposeAPI(el) {\n    this.refs.input = el;\n    IMPERATIVE_API.forEach(ev => (this[ev] = el && el[ev] && el[ev].bind(el)));\n  }\n\n  maybeScrollItemIntoView() {\n    if (this.isOpen() && this.state.highlightedIndex !== null) {\n      const itemNode = this.refs[`item-${this.state.highlightedIndex}`];\n      const menuNode = this.refs.menu;\n      scrollIntoView(findDOMNode(itemNode), findDOMNode(menuNode), {\n        onlyScrollIfNeeded: true,\n      });\n    }\n  }\n\n  handleKeyDown(event) {\n    if (Autocomplete.keyDownHandlers[event.key])\n      Autocomplete.keyDownHandlers[event.key].call(this, event);\n    else if (!this.isOpen()) {\n      this.setState({\n        isOpen: true,\n      });\n    }\n  }\n\n  handleChange(event) {\n    this.props.onChange(event, event.target.value);\n  }\n\n  static keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault();\n      const items = this.getFilteredItems(this.props);\n      if (!items.length) return;\n      const { highlightedIndex } = this.state;\n      let index = highlightedIndex === null ? -1 : highlightedIndex;\n      for (let i = 0; i < items.length; i++) {\n        const p = (index + i + 1) % items.length;\n        if (this.props.isItemSelectable(items[p])) {\n          index = p;\n          break;\n        }\n      }\n      if (index > -1 && index !== highlightedIndex) {\n        this.setState({\n          highlightedIndex: index,\n          isOpen: true,\n        });\n      }\n    },\n\n    ArrowUp(event) {\n      event.preventDefault();\n      const items = this.getFilteredItems(this.props);\n      if (!items.length) return;\n      const { highlightedIndex } = this.state;\n      let index = highlightedIndex === null ? items.length : highlightedIndex;\n      for (let i = 0; i < items.length; i++) {\n        const p = (index - (1 + i) + items.length) % items.length;\n        if (this.props.isItemSelectable(items[p])) {\n          index = p;\n          break;\n        }\n      }\n      if (index !== items.length) {\n        this.setState({\n          highlightedIndex: index,\n          isOpen: true,\n        });\n      }\n    },\n\n    Enter(event) {\n      // Key code 229 is used for selecting items from character selectors (Pinyin, Kana, etc)\n      if (event.keyCode !== 13) return;\n      // In case the user is currently hovering over the menu\n      this.setIgnoreBlur(false);\n      if (!this.isOpen()) {\n        // menu is closed so there is no selection to accept -> do nothing\n        return;\n      } else if (this.state.highlightedIndex == null) {\n        // input has focus but no menu item is selected + enter is hit -> close the menu, highlight whatever's in input\n        this.setState(\n          {\n            isOpen: false,\n          },\n          () => {\n            this.refs.input.select();\n          }\n        );\n      } else {\n        // text entered + menu item has been highlighted + enter is hit -> update value to that of selected menu item, close the menu\n        event.preventDefault();\n        const item = this.getFilteredItems(this.props)[\n          this.state.highlightedIndex\n        ];\n        const value = this.props.getItemValue(item);\n        this.setState(\n          {\n            isOpen: false,\n            highlightedIndex: null,\n          },\n          () => {\n            //this.refs.input.focus()\n            this.refs.input.setSelectionRange(value.length, value.length);\n            this.props.onSelect(value, item);\n          }\n        );\n      }\n    },\n\n    Escape() {\n      // In case the user is currently hovering over the menu\n      this.setIgnoreBlur(false);\n      this.setState({\n        highlightedIndex: null,\n        isOpen: false,\n      });\n    },\n\n    Tab() {\n      // In case the user is currently hovering over the menu\n      this.setIgnoreBlur(false);\n    },\n  };\n\n  getFilteredItems(props) {\n    let items = props.items;\n\n    if (props.shouldItemRender) {\n      items = items.filter(item => props.shouldItemRender(item, props.value));\n    }\n\n    if (props.sortItems) {\n      items.sort((a, b) => props.sortItems(a, b, props.value));\n    }\n\n    return items;\n  }\n\n  maybeAutoCompleteText(state, props) {\n    const { highlightedIndex } = state;\n    const { value, getItemValue } = props;\n    let index = highlightedIndex === null ? 0 : highlightedIndex;\n    let items = this.getFilteredItems(props);\n    for (let i = 0; i < items.length; i++) {\n      if (props.isItemSelectable(items[index])) break;\n      index = (index + 1) % items.length;\n    }\n    const matchedItem =\n      items[index] && props.isItemSelectable(items[index])\n        ? items[index]\n        : null;\n    if (value !== '' && matchedItem) {\n      const itemValue = getItemValue(matchedItem);\n      const itemValueDoesMatch =\n        itemValue.toLowerCase().indexOf(value.toLowerCase()) === 0;\n      if (itemValueDoesMatch) {\n        return { highlightedIndex: index };\n      }\n    }\n    return { highlightedIndex: null };\n  }\n\n  ensureHighlightedIndex(state, props) {\n    if (state.highlightedIndex >= this.getFilteredItems(props).length) {\n      return { highlightedIndex: null };\n    }\n  }\n\n  setMenuPositions() {\n    const node = this.refs.input;\n    const rect = node.getBoundingClientRect();\n    const computedStyle = global.window.getComputedStyle(node);\n    const marginBottom = parseInt(computedStyle.marginBottom, 10) || 0;\n    const marginLeft = parseInt(computedStyle.marginLeft, 10) || 0;\n    const marginRight = parseInt(computedStyle.marginRight, 10) || 0;\n    this.setState({\n      menuTop: rect.bottom + marginBottom,\n      menuLeft: rect.left + marginLeft,\n      menuWidth: rect.width + marginLeft + marginRight,\n    });\n  }\n\n  highlightItemFromMouse(index) {\n    this.setState({ highlightedIndex: index });\n  }\n\n  selectItemFromMouse(item) {\n    const value = this.props.getItemValue(item);\n    // The menu will de-render before a mouseLeave event\n    // happens. Clear the flag to release control over focus\n    this.setIgnoreBlur(false);\n    this.setState(\n      {\n        isOpen: false,\n        highlightedIndex: null,\n      },\n      () => {\n        this.props.onSelect(value, item);\n      }\n    );\n  }\n\n  setIgnoreBlur(ignore) {\n    this._ignoreBlur = ignore;\n  }\n\n  renderChips() {\n    return (\n      <>\n      {this.props.chipList.map((chip, idx) => (\n        <RemovableTag key={idx} label={chip.label} onRemove={this.props.onChipRemove} />\n      ))\n      }\n      </>\n    )\n  };\n\n  renderMenu() {\n    const items = this.getFilteredItems(this.props).map((item, index) => {\n      const element = this.props.renderItem(\n        item,\n        this.state.highlightedIndex === index,\n        { cursor: 'default' }\n      );\n      return React.cloneElement(element, {\n        onMouseEnter: this.props.isItemSelectable(item)\n          ? () => this.highlightItemFromMouse(index)\n          : null,\n        onClick: this.props.isItemSelectable(item)\n          ? () => this.selectItemFromMouse(item)\n          : null,\n        ref: e => (this.refs[`item-${index}`] = e),\n      });\n    });\n    const style = {\n      left: this.state.menuLeft,\n      top: this.state.menuTop,\n      minWidth: this.state.menuWidth,\n    };\n    const menu = this.props.renderMenu(items, this.props.value, style);\n    return React.cloneElement(menu, {\n      ref: e => (this.refs.menu = e),\n      // Ignore blur to prevent menu from de-rendering before we can process click\n      onTouchStart: () => this.setIgnoreBlur(true),\n      onMouseEnter: () => this.setIgnoreBlur(true),\n      onMouseLeave: () => this.setIgnoreBlur(false),\n    });\n  }\n\n  handleInputBlur(event) {\n    if (this._ignoreBlur) {\n      this._ignoreFocus = true;\n      this._scrollOffset = getScrollOffset();\n      this.refs.input.focus();\n      return;\n    }\n    let setStateCallback;\n    const { highlightedIndex } = this.state;\n    if (this.props.selectOnBlur && highlightedIndex !== null) {\n      const items = this.getFilteredItems(this.props);\n      const item = items[highlightedIndex];\n      const value = this.props.getItemValue(item);\n      setStateCallback = () => this.props.onSelect(value, item);\n    }\n    this.setState(\n      {\n        isOpen: false,\n        highlightedIndex: null,\n      },\n      setStateCallback\n    );\n    const { onBlur } = this.props.inputProps;\n    if (onBlur) {\n      onBlur(event);\n    }\n  }\n\n  handleInputFocus(event) {\n    if (this._ignoreFocus) {\n      this._ignoreFocus = false;\n      const { x, y } = this._scrollOffset;\n      this._scrollOffset = null;\n      // Focus will cause the browser to scroll the <input> into view.\n      // This can cause the mouse coords to change, which in turn\n      // could cause a new highlight to happen, cancelling the click\n      // event (when selecting with the mouse)\n      window.scrollTo(x, y);\n      // Some browsers wait until all focus event handlers have been\n      // processed before scrolling the <input> into view, so let's\n      // scroll again on the next tick to ensure we're back to where\n      // the user was before focus was lost. We could do the deferred\n      // scroll only, but that causes a jarring split second jump in\n      // some browsers that scroll before the focus event handlers\n      // are triggered.\n      clearTimeout(this._scrollTimer);\n      this._scrollTimer = setTimeout(() => {\n        this._scrollTimer = null;\n        window.scrollTo(x, y);\n      }, 0);\n      return;\n    }\n    this.setState({ isOpen: true });\n    const { onFocus } = this.props.inputProps;\n    if (onFocus) {\n      onFocus(event);\n    }\n  }\n\n  isInputFocused() {\n    const el = this.refs.input;\n    return el.ownerDocument && el === el.ownerDocument.activeElement;\n  }\n\n  handleInputClick() {\n    // Input will not be focused if it's disabled\n    if (this.isInputFocused() && !this.isOpen() && this.props.value.length > 2)\n      this.setState({ isOpen: true });\n  }\n\n  composeEventHandlers(internal, external) {\n    return external\n      ? e => {\n          internal(e);\n          external(e);\n        }\n      : internal;\n  }\n\n  isOpen() {\n    return 'open' in this.props ? this.props.open : this.state.isOpen;\n  }\n\n  render() {\n    if (this.props.debug) {\n      // you don't like it, you love it\n      this._debugStates.push({\n        id: this._debugStates.length,\n        state: this.state,\n      });\n    }\n\n    const { inputProps } = this.props;\n    const open = this.isOpen();\n    return (\n      <div id={this.id + '-autocomplete-wrapper'} className={`cts-autocomplete ${this.props.wrapperClasses}`} {...this.props.wrapperProps}>\n        <InputLabel\n            label={this.props.label}\n            labelHint={this.props.labelHint}\n            htmlFor={this.id}\n          />\n        <div className={this.props.multiselect ? 'cts-chip-list' : ''}>\n        {this.props.multiselect && this.renderChips()}\n        {this.props.renderInput({\n          ...inputProps,\n          id: this.id,\n          role: 'combobox',\n          'aria-autocomplete': 'list',\n          'aria-expanded': open,\n          autoComplete: 'off',\n          ref: this.exposeAPI,\n          className: 'cts-input cts-autocomplete__input' + this.props.inputClasses,\n          onFocus: this.handleInputFocus,\n          onBlur: this.handleInputBlur,\n          onChange: this.handleChange,\n          onKeyDown: this.composeEventHandlers(\n            this.handleKeyDown,\n            inputProps.onKeyDown\n          ),\n          onClick: this.composeEventHandlers(\n            this.handleInputClick,\n            inputProps.onClick\n          ),\n          type: 'text',\n          value: this.props.value,\n        })}\n        </div>\n        {open && this.renderMenu()}\n        {this.props.debug && (\n          <pre style={{ marginLeft: 300 }}>\n            {JSON.stringify(\n              this._debugStates.slice(\n                Math.max(0, this._debugStates.length - 5),\n                this._debugStates.length\n              ),\n              null,\n              2\n            )}\n          </pre>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Autocomplete;\n","export default (() => {\n  if (!Array.prototype.fill) {\n      console.log('Polyfilling Array.prototype.fill()')\n      // eslint-disable-next-line\n      Object.defineProperty(Array.prototype, 'fill', {\n        value: function(value) {\n    \n          // Steps 1-2.\n          if (this == null) {\n            throw new TypeError('this is null or not defined');\n          }\n    \n          var O = Object(this);\n    \n          // Steps 3-5.\n          var len = O.length >>> 0;\n    \n          // Steps 6-7.\n          var start = arguments[1];\n          var relativeStart = start >> 0;\n    \n          // Step 8.\n          var k = relativeStart < 0 ?\n            Math.max(len + relativeStart, 0) :\n            Math.min(relativeStart, len);\n    \n          // Steps 9-10.\n          var end = arguments[2];\n          var relativeEnd = end === undefined ?\n            len : end >> 0;\n    \n          // Step 11.\n          var final = relativeEnd < 0 ?\n            Math.max(len + relativeEnd, 0) :\n            Math.min(relativeEnd, len);\n    \n          // Step 12.\n          while (k < final) {\n            O[k] = value;\n            k++;\n          }\n    \n          // Step 13.\n          return O;\n        }\n      });\n    }\n})()","import {createBrowserHistory} from 'history';\nexport const history = createBrowserHistory();\n","import React from 'react';\nimport {Fieldset, TextInput} from '../../atomic';\n\nconst Age = () => {\n  return (\n    <Fieldset\n      id=\"age\"\n      legend=\"Age\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#basicsearch\">\n      <TextInput id=\"a\" label=\"Enter the age of the participant.\" maxLength={3} />\n    </Fieldset>\n  );\n};\n\nexport default Age;\n","import React from 'react';\nimport { Fieldset, TextInput } from '../../atomic';\nimport './CancerTypeCondition.scss';\n\nconst CancerTypeCondition = () => {\n  return (\n    <Fieldset\n      id=\"type\"\n      legend=\"Cancer Type/Condition\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#cancertype\"\n    >\n      <p>\n        Select a cancer type or condition. Select additional options, if\n        applicable.\n      </p>\n      <TextInput id=\"q\" label=\"Primary Cancer Type/Condition\" />\n      <TextInput id=\"st\" label=\"Subtype\" />\n      <TextInput id=\"stage\" label=\"Stage\" />\n      <TextInput id=\"fin\" label=\"Side Effects/Biomarkers/Participant Attributes\" />\n    </Fieldset>\n  );\n};\n\nexport default CancerTypeCondition;\n","import React from 'react';\nimport {Fieldset, TextInput} from '../../atomic';\nimport './CancerTypeKeyword.scss';\n\nconst CancerTypeKeyword = () => {\n  return (\n    <Fieldset\n      id=\"type\"\n      legend=\"Cancer Type/Keyword\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#basicsearch\">\n      <TextInput id=\"q\" label=\"Cancer Type/Keyword\" placeHolder=\"Start typing to select a cancer type\" labelHidden />\n    </Fieldset>\n  );\n};\n\nexport default CancerTypeKeyword;\n","import React, { useState } from 'react';\nimport { Fieldset, Autocomplete, TextInput } from '../../atomic';\nimport { getTreatments, getDrugs } from '../../../mocks/mock-interventions';\nimport './DrugTreatment.scss';\n\nconst DrugTreatment = () => {\n  const [drugVal, setDrugVal] = useState({ value: '' });\n  const [drugChips, setDrugChips] = useState([]);\n  const [trtmtVal, setTrtmtVal] = useState({ value: '' });\n\n  const placeholder = 'Please enter 3 or more characters';\n\n  const matchItemToTerm = (item, value) => {\n    //convert synonyms array to lowercase for comparison\n    let lcSynonyms = item.synonyms.map(s => {\n      return s.toLowerCase();\n    });\n    return (\n      item.name.toLowerCase().indexOf(value.toLowerCase()) !== -1 ||\n      lcSynonyms.includes(value.toLowerCase())\n    );\n  };\n\n  // remove chip\n\n  const handleRemoveChip = e => {\n    let newChipList = drugChips.filter((value, index, arr) => {\n      return value.label !== e.label;\n    });\n    console.log(newChipList);\n    setDrugChips([...newChipList]);\n  };\n\n  // Add a chip once selected\n  const addChip = val => {\n    setDrugChips([...drugChips, { label: val.value }]);\n    //reset input\n    setDrugVal({ value: '' });\n  };\n\n  return (\n    <Fieldset\n      id=\"type\"\n      legend=\"Drug/Treatment\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#drugtreatment\"\n    >\n      <p>\n        Search for a specific drug or intervention. You can use the drug's\n        generic or brand name.\n      </p>\n\n      <Autocomplete\n        id=\"dt\"\n        label=\"Drug/DrugFamily\"\n        value={drugVal.value}\n        inputProps={{ id: 'dt' }}\n        wrapperStyle={{ position: 'relative', display: 'inline-block' }}\n        items={getDrugs().terms}\n        getItemValue={item => item.name}\n        shouldItemRender={matchItemToTerm}\n        onChange={(event, value) => setDrugVal({ value })}\n        onSelect={value => addChip({ value })}\n        multiselect={true}\n        chipList={drugChips}\n        onChipRemove={handleRemoveChip}\n        renderMenu={children => (\n          <div className=\"cts-autocomplete__menu --drugs\">{children}</div>\n        )}\n        renderItem={(item, isHighlighted) => (\n          <div\n            className={`cts-autocomplete__menu-item ${\n              isHighlighted ? 'highlighted' : ''\n            }`}\n            key={item.codes[0]}\n          >\n            <div className=\"preferredName\">\n              {item.name}\n              {item.category.indexOf('category') !== -1 ? ' (DRUG FAMILY)' : ''}\n            </div>\n            {item.synonyms.length > 0 && (\n              <span className=\"synonyms\">\n                Other Names: {item.synonyms.join(', ')}\n              </span>\n            )}\n          </div>\n        )}\n      />\n      <TextInput id=\"ot\" label=\"Other Treatments\" />\n    </Fieldset>\n  );\n};\n\nexport default DrugTreatment;\n","export function getDrugs() {\n  return {\n    terms: [\n      {\n        name: 'Fludarabine Phosphate',\n        codes: ['C1102'],\n        synonyms: ['Beneflur'],\n        category: 'agent',\n        count: 133,\n      },\n      {\n        name: 'Quinone Compound',\n        codes: ['C796'],\n        synonyms: ['Benzoquinone Compound'],\n        category: 'agent category',\n        count: 23,\n      },\n      {\n        name: 'Bendamustine',\n        codes: ['C73261'],\n        synonyms: [],\n        category: 'agent',\n        count: 21,\n      },\n      {\n        name: 'Bendamustine Hydrochloride',\n        codes: ['C61565'],\n        synonyms: ['Bendeka', 'Levact', 'Ribomustin', 'Treanda'],\n        category: 'agent',\n        count: 13,\n      },\n      {\n        name: '6,8-Bis(benzylthio)octanoic Acid',\n        codes: ['C80039'],\n        synonyms: ['Devimistat'],\n        category: 'agent',\n        count: 7,\n      },\n      {\n        name: 'Benzodiazepine',\n        codes: ['C1012'],\n        synonyms: [],\n        category: 'agent category',\n        count: 3,\n      },\n      {\n        name: 'PV-10',\n        codes: ['C53412'],\n        synonyms: ['Provecta', 'Rose Bengal Solution PV-10'],\n        category: 'agent',\n        count: 2,\n      },\n      {\n        name: 'Belimumab',\n        codes: ['C91385'],\n        synonyms: ['Benlysta', 'LymphoStat-B'],\n        category: 'agent',\n        count: 1,\n      },\n      {\n        name: 'Cianidanol',\n        codes: ['C63654'],\n        synonyms: [\n          '(+)-Catechin',\n          '(2R,3S)-2-(3,4-dihydroxyphenyl)chroman-3,5,7-triol',\n          '(2R-trans)-2-(3,4-dihydroxyphenyl)-3,4-dihydro-2H-1-benzopyran-3,5,7-triol',\n          'Catechin',\n        ],\n        category: 'agent category',\n        count: 1,\n      },\n      {\n        name: 'Diphenhydramine Hydrochloride',\n        codes: ['C300'],\n        synonyms: ['Benadryl', 'Bendylate', 'Eldadryl', 'SK-Diphenhydramine'],\n        category: 'agent',\n        count: 1,\n      },\n    ],\n  };\n}\n\nexport function getTreatments() {\n  return {\n    terms: [\n      {\n        name: 'Fluorine F-18 6-Fluorodopamine',\n        codes: ['C91706'],\n        synonyms: [\n          '1,2-Benzenediol, 4-(2-Aminoethyl)-5-(fluoro-18F)-',\n          '18F-DA',\n          '18F-fluorodopamine',\n          '3,4-Dihydroxy-6-fluorophenethylamine F-18',\n          '6-(18F)-Fluorodopamine',\n          '6-Fluorodopamine F-18',\n          '[18F]-6F-DA',\n          '[18F]-6F-dopamine',\n        ],\n        category: 'other',\n        count: 1,\n      },\n      {\n        name: 'meta-Fluorine F 18 Fluorobenzylguanidine',\n        codes: ['C120311'],\n        synonyms: [\n          '18F meta-Fluoro Benzylguanidine',\n          '18F-MFBG',\n          '[(18)F]-MFBG',\n          'meta-[(18)F]-Fluorobenzylguanidine',\n        ],\n        category: 'other',\n        count: 1,\n      },\n    ],\n  };\n}\n","import React from 'react';\nimport {Fieldset, TextInput} from '../../atomic';\nimport './KeywordsPhrases.scss';\n\nconst KeywordsPhrases = () => {\n  return (\n    <Fieldset\n      id=\"keyword\"\n      legend=\"Keywords/Phrases\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#keywords\">\n      <TextInput id=\"q\" label=\"Search by word or phrase (use quotation marks with phrases).\" placeHolder=\"Examples: PSA, 'Paget disease'\" />\n    </Fieldset>\n  );\n};\n\nexport default KeywordsPhrases;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Fieldset from '../../atomic/Fieldset';\nimport { Autocomplete } from '../../atomic';\nimport { getLeadOrgs } from '../../../mocks/mock-lead-org';\nimport {matchItemToTerm, sortItems} from '../../../utilities/utilities';\nimport './LeadOrganization.scss';\n\nconst LeadOrganization = () => {\n  const [orgName, setOrgName] = useState({ value: '' });\n\n  return (\n    <Fieldset\n      id=\"lead_organization\"\n      legend=\"Lead Organization\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#leadorganization\"\n    >\n      <Autocomplete\n        label=\"Search by Lead Organization\"\n        value={orgName.value}\n        inputProps={{ id: 'lo' }}\n        wrapperStyle={{ position: 'relative', display: 'inline-block' }}\n        items={getLeadOrgs().terms}\n        getItemValue={item => item.term}\n        shouldItemRender={matchItemToTerm}\n        sortItems={sortItems}\n        onChange={(event, value) => setOrgName({ value })}\n        onSelect={value => setOrgName({ value })}\n        renderMenu={children => (\n          <div className=\"cts-autocomplete__menu --leadOrg\">{children}</div>\n        )}\n        renderItem={(item, isHighlighted) => (\n          <div\n            className={`cts-autocomplete__menu-item ${\n              isHighlighted ? 'highlighted' : ''\n            }`}\n            key={item.term_key}\n          >\n            {item.term}\n          </div>\n        )}\n      />\n    </Fieldset>\n  );\n};\n\nLeadOrganization.propTypes = {\n  sampleProperty: PropTypes.string,\n};\n\nLeadOrganization.defaultProps = {\n  sampleProperty: 'LeadOrganization',\n};\n\nexport default LeadOrganization;\n","export function getLeadOrgs() {\n  return {\n    total: 99,\n    terms: [\n      {\n        term_key: 'actuate_therapeutics_inc_',\n        term: 'Actuate Therapeutics Inc.',\n        term_type: 'lead_org',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.0016863766278868554,\n        score: null,\n      },\n      {\n        term_key: 'adc_therapeutics_s_a_',\n        term: 'ADC Therapeutics S.A.',\n        term_type: 'lead_org',\n        current_trial_statuses: [\n          'ACTIVE',\n          'COMPLETE',\n          'CLOSED TO ACCRUAL',\n          'ADMINISTRATIVELY COMPLETE',\n        ],\n        count: 10,\n        count_normalized: 0.016775712750826618,\n        score: null,\n      },\n      {\n        term_key: 'advanced_cancer_therapeutics',\n        term: 'Advanced Cancer Therapeutics',\n        term_type: 'lead_org',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.0016863766278868554,\n        score: null,\n      },\n      {\n        term_key: 'ai_therapeutics_inc_formerly_known_as_lam_therapeutics_inc_',\n        term: 'AI Therapeutics, Inc (formerly known as LAM Therapeutics, Inc.)',\n        term_type: 'lead_org',\n        current_trial_statuses: ['CLOSED TO ACCRUAL', 'ACTIVE'],\n        count: 2,\n        count_normalized: 0.0033707843392395405,\n        score: null,\n      },\n      {\n        term_key: 'aileron_therapeutics',\n        term: 'Aileron Therapeutics',\n        term_type: 'lead_org',\n        current_trial_statuses: ['ACTIVE', 'CLOSED TO ACCRUAL'],\n        count: 2,\n        count_normalized: 0.0033707843392395405,\n        score: null,\n      },\n      {\n        term_key: 'allogene_therapeutics',\n        term: 'Allogene Therapeutics',\n        term_type: 'lead_org',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.0016863766278868554,\n        score: null,\n      },\n      {\n        term_key: 'aminex_therapeutics_inc_',\n        term: 'Aminex Therapeutics, Inc.',\n        term_type: 'lead_org',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.0016863766278868554,\n        score: null,\n      },\n      {\n        term_key: 'amphivena_therapeutics_inc_',\n        term: 'Amphivena Therapeutics, Inc.',\n        term_type: 'lead_org',\n        current_trial_statuses: ['ACTIVE'],\n        count: 2,\n        count_normalized: 0.0033707843392395405,\n        score: null,\n      },\n      {\n        term_key: 'anchiano_therapeutics_israel_ltd_',\n        term: 'Anchiano Therapeutics Israel Ltd.',\n        term_type: 'lead_org',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.0016863766278868554,\n        score: null,\n      },\n      {\n        term_key: 'aprea_therapeutics_ab',\n        term: 'Aprea Therapeutics AB',\n        term_type: 'lead_org',\n        current_trial_statuses: ['COMPLETE', 'ACTIVE'],\n        count: 3,\n        count_normalized: 0.00505322772628541,\n        score: null,\n      },\n    ],\n  };\n}\n","import React, { useState } from 'react';\nimport { Fieldset, TextInput, Radio, Toggle, Dropdown } from '../../atomic';\nimport './Location.scss';\n\nconst Location = () => {\n  const [activeRadio, setActiveRadio] = useState('search-location-all');\n  const [limitToVA, setLimitToVA] = useState(false);\n\n  const handleToggleChange = e => {\n    setLimitToVA(e.target.checked);\n  };\n\n  const handleRadioChange = e => {\n    setActiveRadio(e.target.value);\n  };\n\n  return (\n    <Fieldset\n      id=\"location\"\n      legend=\"Location\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#location\"\n      classes=\"search-location\"\n    >\n      <p>\n        Search for trials near a specific zip code; or in a country, state and\n        city; or at a particular institution. The default selection will search\n        for trials in all available locations.\n      </p>\n      <div className=\"data-toggle-block\">\n        <Toggle\n          id=\"search-location-toggle\"\n          label=\"Limit results to Veterans Affairs facilities\"\n          onChange={handleToggleChange}\n        />\n        Limit results to Veterans Affairs facilities\n      </div>\n      <div className=\"group-locations\">\n        <Radio\n          onChange={handleRadioChange}\n          id=\"search-location-all\"\n          label=\"Search All Locations\"\n        />\n        <Radio\n          onChange={handleRadioChange}\n          id=\"search-location-zip\"\n          label=\"ZIP Code\"\n        />\n        {activeRadio === 'search-location-zip' && (\n          <div className=\"search-location__zip\">\n            <TextInput\n              id=\"search-location-zip-input\"\n              classes=\"search-location__zip --zip\"\n              label=\"U.S. ZIP Code\"\n            />\n            <Dropdown\n              id=\"search-location-radius\"\n              classes=\"search-location__zip --radius\"\n              label=\"Radius\"\n            >\n              {[20, 50, 100, 200, 500].map(dist => {\n                return (\n                  <option key={dist} value={dist}>{`${dist} miles`}</option>\n                );\n              })}\n            </Dropdown>\n          </div>\n        )}\n        <Radio\n          onChange={handleRadioChange}\n          id=\"search-location-country\"\n          label=\"Country, State, City\"\n        />\n        {activeRadio === 'search-location-country' && (\n          <div className=\"search-location__country\">\n            <Dropdown\n              classes=\"search-location__country --country\"\n              label=\"Country\"\n            >\n              {[\n                'United States',\n                'United Kingdom',\n                'Zambia',\n                'Japan',\n                'Uruguay',\n              ].map(city => {\n                return <option key={city} value={city}>{`${city}`}</option>;\n              })}\n            </Dropdown>\n            <div className=\"search-location__country --city-and-state\">\n              <TextInput\n                id=\"search-location-state\"\n                classes=\"search-location__country --state\"\n                label=\"State\"\n              />\n              <TextInput\n                id=\"search-location-city\"\n                classes=\"search-location__country --city\"\n                label=\"City\"\n              />\n            </div>\n          </div>\n        )}\n        {!limitToVA && (\n          <>\n            <Radio\n              onChange={handleRadioChange}\n              id=\"search-location-hospital\"\n              label=\"Hospitals/Institutions\"\n            />\n            {activeRadio === 'search-location-hospital' && (\n              <div>\n                <TextInput label=\"\" />\n              </div>\n            )}\n            <Radio\n              onChange={handleRadioChange}\n              id=\"search-location-nih\"\n              label=\"At NIH (only show trials at the NIH clinical center in Bethesda, MD)\"\n            />\n          </>\n        )}\n      </div>\n    </Fieldset>\n  );\n};\n\nexport default Location;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Fieldset, TextInput } from '../../atomic';\nimport './TrialId.scss';\n\nconst TrialId = () => {\n  return (\n    <Fieldset\n      id=\"trialid\"\n      legend=\"Trial ID\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#trialid\"\n    >\n      <TextInput\n        id=\"tid\"\n        type=\"text\"\n        label=\"Separate multiple IDs with commas or semicolons.\"\n      />\n    </Fieldset>\n  );\n};\n\nTrialId.propTypes = {\n  sampleProperty: PropTypes.string,\n};\n\nTrialId.defaultProps = {\n  sampleProperty: 'TrialId',\n};\n\nexport default TrialId;\n","import React, {useState} from 'react';\nimport { Fieldset, Autocomplete } from '../../atomic';\nimport { getTrialInvestigators } from '../../../mocks/mock-trial-investigator';\nimport { matchItemToTerm, sortItems } from '../../../utilities/utilities';\nimport './TrialInvestigators.scss';\n\nconst TrialInvestigators = () => {\n  const [tiName, setTiName] = useState({ value: '' });\n\n  return (\n    <Fieldset\n      id=\"trialinvestigator\"\n      legend=\"Trial Investigators\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#trialinvestigators\"\n    >\n      <Autocomplete\n        label=\"Search by Trial Investigators\"\n        value={tiName.value}\n        inputProps={{ id: 'ti' }}\n        wrapperStyle={{ position: 'relative', display: 'inline-block' }}\n        items={getTrialInvestigators().terms}\n        getItemValue={item => item.term}\n        shouldItemRender={matchItemToTerm}\n        sortItems={sortItems}\n        onChange={(event, value) => setTiName({ value })}\n        onSelect={value => setTiName({ value })}\n        renderMenu={children => (\n          <div className=\"cts-autocomplete__menu --trialInvestigators\">{children}</div>\n        )}\n        renderItem={(item, isHighlighted) => (\n          <div\n            className={`cts-autocomplete__menu-item ${\n              isHighlighted ? 'highlighted' : ''\n            }`}\n            key={item.term_key}\n          >\n            {item.term}\n          </div>\n        )}\n      />\n    </Fieldset>\n  );\n};\n\nexport default TrialInvestigators;\n","export function getTrialInvestigators() {\n  return {\n    total: 7,\n    terms: [\n      {\n        term_key: 'arta_monir_monjazeb',\n        term: 'Arta Monir Monjazeb',\n        term_type: 'principal_investigator',\n        current_trial_statuses: ['ACTIVE', 'CLOSED TO ACCRUAL'],\n        count: 3,\n        count_normalized: 0.16992500144231237,\n        score: null,\n      },\n      {\n        term_key: 'arthur_james_moser',\n        term: 'Arthur James Moser',\n        term_type: 'principal_investigator',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.05889368905356862,\n        score: null,\n      },\n      {\n        term_key: 'arthur_y_hung',\n        term: 'Arthur Y. Hung',\n        term_type: 'principal_investigator',\n        current_trial_statuses: ['APPROVED'],\n        count: 1,\n        count_normalized: 0.05889368905356862,\n        score: null,\n      },\n      {\n        term_key: 'douglas_william_arthur',\n        term: 'Douglas William Arthur',\n        term_type: 'principal_investigator',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.05889368905356862,\n        score: null,\n      },\n      {\n        term_key: 'erik_arthur_ranheim',\n        term: 'Erik Arthur Ranheim',\n        term_type: 'principal_investigator',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.05889368905356862,\n        score: null,\n      },\n      {\n        term_key: 'joseph_a_arthur',\n        term: 'Joseph A Arthur',\n        term_type: 'principal_investigator',\n        current_trial_statuses: ['ACTIVE'],\n        count: 1,\n        count_normalized: 0.05889368905356862,\n        score: null,\n      },\n      {\n        term_key: 'scott_arthur_waldman',\n        term: 'Scott Arthur Waldman',\n        term_type: 'principal_investigator',\n        current_trial_statuses: ['APPROVED'],\n        count: 1,\n        count_normalized: 0.05889368905356862,\n        score: null,\n      },\n    ],\n  };\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Fieldset, Checkbox } from '../../atomic';\nimport './TrialPhase.scss';\n\nconst TrialPhase = ({ selectedPhases, phaseFields }) => {\n  const [phases, setPhases] = useState([]);\n\n  useEffect(() => {\n    //initialize trials state after mount\n    setPhases([...selectedPhases]);\n  }, [selectedPhases]);\n\n  const handleSelectAll = e => {\n    setPhases([]);\n  };\n\n  const handleCheckPhase = e => {\n    let filtered = [];\n    if (e.target.checked) {\n      setPhases([...phases, e.target.value]);\n    } else {\n      filtered = phases.filter((value, index, arr) => {\n        return value !== e.target.value;\n      });\n      setPhases([...filtered]);\n    }\n  };\n\n  return (\n    <Fieldset\n      id=\"trialphase\"\n      classes=\"trial-phase\"\n      legend=\"Trial Phase\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#trialphase\"\n    >\n      <p>Search by one or more trial phases.</p>\n      <div className=\"select-all\">\n        <Checkbox\n          value=\"\"\n          name=\"tp\"\n          id=\"tp_all\"\n          label=\"All\"\n          classes=\"tp-all\"\n          checked={phases.length === 0}\n          onChange={handleSelectAll}\n        />\n      </div>\n      <div className=\"group-phases\">\n        {phaseFields.map((field, idx) => (\n          <Checkbox\n            id={'tp_' + field.value}\n            key={'tp_' + field.value}\n            name=\"tp\"\n            value={field.value}\n            label={field.label}\n            onChange={handleCheckPhase}\n            checked={phases.includes(field.value)}\n          />\n        ))}\n      </div>\n    </Fieldset>\n  );\n};\n\nTrialPhase.propTypes = {\n  phaseFields: PropTypes.array,\n  selectedPhases: PropTypes.array,\n};\n\nTrialPhase.defaultProps = {\n  selectedPhases: [],\n  phaseFields: [\n    { label: 'Phase I', value: 'I' },\n    { label: 'Phase I', value: 'II' },\n    { label: 'Phase III', value: 'III' },\n    { label: 'Phase IV', value: 'IV' },\n  ],\n};\n\nexport default TrialPhase;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, Fieldset, Toggle } from '../../atomic';\nimport './TrialType.scss';\n\nconst TrialType = ({ selectedTrialTypes, trialTypeFields }) => {\n  const [trialTypes, setTrialTypes] = useState([]);\n\n  useEffect(() => {\n    //initialize trials state after mount\n    setTrialTypes([...selectedTrialTypes]);\n  }, [selectedTrialTypes]);\n\n  const handleSelectAll = e => {\n    setTrialTypes([]);\n  };\n\n  const handleCheckType = e => {\n    let filtered = [];\n    if (e.target.checked) {\n      setTrialTypes([...trialTypes, e.target.value]);\n    } else {\n      filtered = trialTypes.filter((value, index, arr) => {\n        return value !== e.target.value;\n      });\n      setTrialTypes([...filtered]);\n    }\n  };\n\n  return (\n    <Fieldset\n      id=\"trialtype\"\n      legend=\"Trial Type\"\n      classes=\"trial-type\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#trialtype\"\n    >\n      <p>\n        Select the type of trial for your search. You may check more than one\n        box or select \"All.\"\n      </p>\n\n      <div className=\"data-toggle-block\">\n        <Toggle id=\"hv\" label=\"Limit results to Veterans Affairs facilities\" />\n        Limit results to trials accepting healthy volunteers\n      </div>\n      <div className=\"select-all\">\n        <Checkbox\n          value=\"\"\n          name=\"tt\"\n          id=\"tt_all\"\n          label=\"All\"\n          classes=\"tt-all\"\n          checked={trialTypes.length === 0}\n          onChange={handleSelectAll}\n        />\n      </div>\n      <div className=\"group-trial-types\">\n        {trialTypeFields.map((trialType, idx) => (\n          <Checkbox\n            key={idx}\n            name=\"tt\"\n            id={`tp_${trialType.value}`}\n            value={trialType.value}\n            label={trialType.label}\n            onChange={handleCheckType}\n            checked={trialTypes.includes(trialType.value)}\n          />\n        ))}\n      </div>\n    </Fieldset>\n  );\n};\n\nTrialType.propTypes = {\n  selectedTrialTypes: PropTypes.array,\n  trialTypeFields: PropTypes.array,\n};\n\nTrialType.defaultProps = {\n  selectedTrialTypes: [],\n  trialTypeFields: [\n    { label: 'Treatment', value: 'treatment' },\n    { label: 'Prevention', value: 'prevention' },\n    { label: 'Supportive Care', value: 'supportive_care' },\n    { label: 'Health Services Research', value: 'health_services_research' },\n    { label: 'Diagnostic', value: 'diagnostic' },\n    { label: 'Screening', value: 'screening' },\n    { label: 'Basic Science', value: 'basic_science' },\n    { label: 'Other', value: 'other' },\n  ],\n};\n\nexport default TrialType;\n","import React from 'react';\nimport {Fieldset, TextInput} from '../../atomic';\n\nconst ZipCode = () => {\n  return (\n    <Fieldset\n      id=\"zip\"\n      legend=\"U.S. Zip Code\"\n      helpUrl=\"https://www.cancer.gov/about-cancer/treatment/clinical-trials/search/help#basicsearch\">\n      <TextInput id=\"z\" label=\"\" inputHelpText=\"Show trials near this U.S. ZIP code.\" maxLength={5} />\n    </Fieldset>\n  );\n};\n\n\nexport default ZipCode;\n","import React, {useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n//modules\nimport {\n  Age,\n  CancerTypeKeyword,\n  ZipCode,\n} from '../../../components/search-modules/';\n\n\nconst FormBasic = submitFn => {\n  const [redirectToResults, setRedirectToResults] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setRedirectToResults(true);\n  }\n\n  if (redirectToResults) {\n    return <Redirect push to=\"/r\" />;\n  }\n\n\n  return (\n    <form onSubmit={handleSubmit} className=\"search-page__form advanced\">\n      <CancerTypeKeyword />\n      <div className=\"side-by-side\">\n        <Age />\n        <ZipCode />\n      </div>\n      <div className=\"submit-block\">\n        <button type=\"submit\" className=\"btn-submit\">\n          Find Trials\n        </button>\n      </div>\n    </form>\n  );\n};\n\nFormBasic.propTypes = {\n  submitFn: PropTypes.func,\n};\n\nFormBasic.defaultProps = {\n  submitFn: () => {},\n};\n\nexport default FormBasic;\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  CancerTypeCondition,\n  Age,\n  KeywordsPhrases,\n  Location,\n  TrialType,\n  DrugTreatment,\n  TrialPhase,\n  TrialId,\n  TrialInvestigators,\n  LeadOrganization,\n} from '../../../components/search-modules';\n\nconst FormAdvanced = submitFn => {\n  const [redirectToResults, setRedirectToResults] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setRedirectToResults(true);\n  };\n\n  if (redirectToResults) {\n    return <Redirect push to=\"/r\" />;\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"search-page__form advanced\">\n      <CancerTypeCondition />\n      <div className=\"side-by-side\">\n        <Age />\n        <KeywordsPhrases />\n      </div>\n      <Location />\n      <TrialType />\n      <DrugTreatment />\n      <TrialPhase />\n      <TrialId />\n      <TrialInvestigators />\n      <LeadOrganization />\n      <div className=\"submit-block\">\n        <button type=\"submit\" className=\"btn-submit\">\n          Find Trials\n        </button>\n      </div>\n    </form>\n  );\n};\n\nFormAdvanced.propTypes = {\n  submitFn: PropTypes.func,\n};\n\nFormAdvanced.defaultProps = {\n  submitFn: () => {},\n};\n\nexport default FormAdvanced;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FormBasic from './FormBasic';\nimport FormAdvanced from './FormAdvanced';\nimport { Delighter } from '../../components/atomic';\n\nconst SearchPage = ({ form }) => {\n  const [formVersion, setFormVersion] = useState(form);\n\n  const renderDelighters = () => (\n    <div className=\"cts-delighter-container\">\n      <Delighter\n        classes=\"cts-livehelp\"\n        url=\"/contact\"\n        titleText={\n          <>\n            Have a question?\n            <br />\n            We're here to help\n          </>\n        }\n      >\n        <p>\n          <strong>Chat with us:</strong> LiveHelp\n          <br />\n          <strong>Call us:</strong> 1-800-4-CANCER\n          <br />\n          (1-800-422-6237)\n        </p>\n      </Delighter>\n\n      <Delighter\n        classes=\"cts-what\"\n        url=\"/about-cancer/treatment/clinical-trials/what-are-trials\"\n        titleText={<>What Are Cancer Clinical Trials?</>}\n      >\n        <p>Learn what they are and what you should know about them.</p>\n      </Delighter>\n\n      <Delighter\n        classes=\"cts-which\"\n        url=\"/about-cancer/treatment/clinical-trials/search/trial-guide\"\n        titleText={<>Which trials are right for you?</>}\n      >\n        <p>\n          Use the checklist in our guide to gather the information you’ll need.\n        </p>\n      </Delighter>\n    </div>\n  );\n\n  const toggleForm = () => {\n    setFormVersion(formVersion === 'basic' ? 'advanced' : 'basic');\n  };\n\n  const renderSearchTip = () => (\n    <div className=\"cts-search-tip\">\n      <div className=\"cts-search-tip__icon\">\n        <i className=\"lightbulb-circle-yellow\"></i>\n      </div>\n      <div className=\"cts-search-tip__body\">\n        <strong>Search Tip:</strong>\n        {formVersion === 'basic' ? (\n          <>{` For more search options, use our `}</>\n        ) : (\n          <>{` All fields are optional. Skip any items that are unknown or not applicable or try our `}</>\n        )}\n        <button type=\"button\" onClick={toggleForm}>\n          {formVersion === 'basic' ? 'advanced search' : 'basic search'}\n        </button>\n        .\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"general-page-body-container\">\n      <div className=\"contentzone\">\n        {/* */}\n        <article className=\"search-page\">\n          <div className=\"search-page__header\">\n            <p>\n              NCI-supported clinical trials are those sponsored or otherwise\n              financially supported by NCI. See our guide, Steps to Find a\n              Clinical Trial, to learn about options for finding trials not\n              included in NCI's collection.\n            </p>\n            {renderSearchTip()}\n          </div>\n\n          <div className=\"search-page__content\">\n            {formVersion === 'advanced' ? <FormAdvanced /> : <FormBasic />}\n            <aside className=\"search-page__aside\">{renderDelighters()}</aside>\n          </div>\n\n          <div className=\"search-page__footer\">\n            <div className=\"api-reference-section\">\n              <h3 id=\"ui-id-4\">\n                The Clinical Trials API: Use our data to power your own clinical\n                trial search\n              </h3>\n              <p className=\"api-reference-content\">\n                An application programming interface (API) helps translate large\n                amounts of data in meaningful ways. NCI’s clinical trials search\n                data is now powered by an API, allowing programmers to build\n                applications{' '}\n                <a href=\"/syndication/api\">using this open data.</a>\n              </p>\n            </div>\n          </div>\n        </article>\n        {/* */}\n      </div>\n    </div>\n  );\n};\n\nSearchPage.propTypes = {\n  form: PropTypes.string,\n};\n\nSearchPage.defaultProps = {\n  form: 'advanced',\n};\n\nexport default SearchPage;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  Checkbox,\n  ResultsList,\n  Delighter,\n  Pager,\n  Accordion,\n  AccordionItem,\n} from '../../components/atomic';\nimport './ResultsPage.scss';\n\nconst ResultsPage = ({ results }) => {\n  const [selectAll, setSelectAll] = useState(false);\n  const [paginatedResults, setPaginatedResults] = useState([]);\n  const [pagerPage, setPagerPage] = useState(0);\n  const [selectedResults, setSelectedResults] = useState([]);\n\n  useEffect(() => {\n    if (selectAll) {\n      setSelectedResults([...paginatedResults.map(result => result.title)]);\n    } else {\n      setSelectedResults([]);\n    }\n  }, [selectAll]);\n\n  useEffect(() => {\n    setSelectedResults([]);\n  }, [paginatedResults]);\n\n  useEffect(() => {\n    if (selectedResults.length === 0) {\n      setSelectAll(false);\n    } else if (paginatedResults.length === selectedResults.length) {\n      setSelectAll(true);\n    }\n  }, [paginatedResults, selectedResults]);\n\n  const handlePagination = (slicedResults, currentPage) => {\n    setPaginatedResults([...slicedResults]);\n    setPagerPage(currentPage);\n  };\n\n  const renderDelighters = () => (\n    <div className=\"cts-delighter-container\">\n      <Delighter\n        classes=\"cts-livehelp\"\n        url=\"/contact\"\n        titleText={\n          <>\n            Have a question?\n            <br />\n            We're here to help\n          </>\n        }\n      >\n        <p>\n          <strong>Chat with us:</strong> LiveHelp\n          <br />\n          <strong>Call us:</strong> 1-800-4-CANCER\n          <br />\n          (1-800-422-6237)\n        </p>\n      </Delighter>\n\n      <Delighter\n        classes=\"cts-which\"\n        url=\"/about-cancer/treatment/clinical-trials/search/trial-guide\"\n        titleText={<>Which trials are right for you?</>}\n      >\n        <p>\n          Use the checklist in our guide to gather the information you’ll need.\n        </p>\n      </Delighter>\n    </div>\n  );\n\n  const renderResultsHeader = () => {\n    return (\n      <div className=\"cts-results-header\">\n        <p>\n          <strong>\n            Results 1-10 of {paginatedResults.length} for your search\n          </strong>\n        </p>\n        <Accordion bordered>\n          <AccordionItem title=\"Show Search Criteria\">\n            <div>\n              <h3>Your Search Criteria</h3>\n              ...Table here...\n            </div>\n          </AccordionItem>\n        </Accordion>\n        <p className=\"reset-form\">\n          <Link to=\"/search\">Start Over</Link>\n        </p>\n      </div>\n    );\n  };\n\n  const renderControls = (isBottom = false) => {\n    const cbxId = isBottom ? 'select-all-cbx-bottom' : 'select-all-cbx-top';\n    return (\n      <div\n        className={`results-page__control ${isBottom ? '--bottom' : '--top'}`}\n      >\n        <div className=\"results-page__select-all\">\n          <Checkbox\n            id={cbxId}\n            name=\"select-all\"\n            label=\"Select All on Page\"\n            checked={selectAll}\n            hideLabel\n            onChange={() => setSelectAll(!selectAll)}\n          />\n          <button className=\"results-page__print-button\">Print Selected</button>\n        </div>\n        <div className=\"results-page__pager\">\n          <Pager data={results} callback={handlePagination} startFromPage={pagerPage} />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"general-page-body-container\">\n      <div className=\"contentzone\">\n        {/* */}\n        <article className=\"results-page\">\n          {renderResultsHeader()}\n          <div className=\"results-page__content\">\n            {renderControls()}\n            <div className=\"results-page__list\">\n              <ResultsList\n                results={paginatedResults}\n                selectedResults={selectedResults}\n                setSelectedResults={setSelectedResults}\n              />\n              <aside className=\"results-page__aside --side\">\n                {renderDelighters()}\n              </aside>\n            </div>\n            {renderControls(true)}\n          </div>\n          <aside className=\"results-page__aside --bottom\">\n            {renderDelighters()}\n          </aside>\n        </article>\n        {/* */}\n      </div>\n    </div>\n  );\n};\n\nResultsPage.propTypes = {\n  results: PropTypes.array,\n};\n\nResultsPage.defaultProps = {\n  results: [],\n};\n\nexport default ResultsPage;\n","import React, { Fragment } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './styles/main.scss';\n\nimport SearchPage from './views/SearchPage';\nimport ResultsPage from './views/ResultsPage';\n\nimport mockResults from './mocks/mock-results.json';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/search\" />\n        <Route path=\"/search\" component={SearchPage} />\n        <Route\n          path=\"/r\"\n          render={() => <ResultsPage results={mockResults} />}\n        />\n      </Switch>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import './polyfills/array_fill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { history } from './services/history.service';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n\n// The following lets us run the app in dev not in situ as would normally be the case.\nif (process.env.NODE_ENV !== 'production') {\n  try{\n    import('./__nci-dev__common.css');\n  }\n  catch(err){\n    console.log(\"Can't find common.css file\")\n  }\n}"],"sourceRoot":""}