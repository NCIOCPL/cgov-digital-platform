<?php

/**
 * @file
 * Contains cgov_js_app_module.module.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;

/*
 * Adding CSS to ['#attached']['html_head_link'] will always be added before
 * the CSS in libraries (e.g. Common.css). The issue is that most app modules
 * override syles included in the Common and therefore need to come after.
 *
 * So cool. We will use hook_library_info_build to add the libraries to this
 * module.
 * Wrong. Adding the library to the request works, but unfortunately, the
 * libraries of a module are always added before a theme.
 * ---> NOTE: This gets cached and for now, saving an application page will
 * need to clear the library discovery cache.
 *
 * We use css_alter to change the group/weight of the CSS. This seems to get
 * around extension ordering issues.
 */

/**
 * Implements hook_library_info_build().
 *
 * This loads up all app module css files as libraries under
 * `cgov_js_app_module`. This allows us to attach the libraries to pages using
 * the app modules.
 *
 * This function should only be called once per cache load. New app modules and
 * updates will need to clear out the library cache tag. (There is a library
 * cache tag right?)
 */
function cgov_js_app_module_library_info_build() {
  $libraries = [];

  // Get all the application paths (with configs) registered in the system.
  $app_path_manager = \Drupal::service('app_module.app_path_manager');
  $app_paths = $app_path_manager->getAllPaths('cgov_js_only_app');

  foreach ($app_paths as $app_path) {
    $options = $app_path['app_module_data'];

    // Define a custom library to include the CSS file.
    $css_uri = $options['drupalConfig']['appCssUri'];

    // Add the custom library to the page.
    if (!isset($libraries[$css_uri])) {
      $libraries[$css_uri] = [
        'version' => -1,
        'license' => [
          'name' => 'NA',
        ],
        'css' => [
          'theme' => [
            $css_uri => [
              'preprocess' => FALSE,
              'weight' => 1000,
              'group' => 1000,
              'type' => 'file',
              'data' => $options['drupalConfig']['appCssUri'],
              'version' => -1,
              'media' => 'all',
              'browsers' => [
                'IE' => TRUE,
                '!IE' => TRUE,
              ],
            ],
          ],
        ],
      ];
    }
  }

  return $libraries;
}

/**
 * Implements hook_css_alter().
 *
 * This hack works around https://www.drupal.org/project/drupal/issues/3046636.
 * Basically, all module libraries will come before any theme libraries.
 * However, we want to add these stylesheets after our theme's since the app
 * theme is usually overriding the styles we define in our global css. This
 * hook is going to reset the module weight once everything is loaded.
 * See https://www.drupal.org/project/drupal/issues/3046636#comment-15396857.
 */
function cgov_js_app_module_css_alter(array &$css, AttachedAssetsInterface $assets) {
  $app_module_id = \Drupal::request()->attributes->get('cgov_app_module_id');

  // We are not rendering an app module, so exit.
  if (!$app_module_id || $app_module_id !== 'cgov_js_only_app') {
    return;
  }

  $options = \Drupal::request()->attributes->all('cgov_app_module_data');

  $css[$options['drupalConfig']['appCssUri']] = [
    'preprocess' => FALSE,
    'weight' => 1000,
    'group' => 1000,
    'type' => 'file',
    'data' => $options['drupalConfig']['appCssUri'],
    'version' => -1,
    'media' => 'all',
    'browsers' => [
      'IE' => TRUE,
      '!IE' => TRUE,
    ],
  ];

}

/**
 * Implements hook_preprocess_page().
 */
function cgov_js_app_module_preprocess_page(array &$variables) {
  $app_module_id = \Drupal::request()->attributes->get('cgov_app_module_id');

  // We are not rendering an app module, so exit.
  if (!$app_module_id || $app_module_id !== 'cgov_js_only_app') {
    return;
  }

  $options = \Drupal::request()->attributes->all('cgov_app_module_data');

  // Define a custom library to include the CSS file.
  $css_uri = $options['drupalConfig']['appCssUri'];

  // Add the custom library to the page.
  $variables['#attached']['library'][] = 'cgov_js_app_module/' . $css_uri;
}
