 /**
 * The following variable and function originate from the sass-mq library.
 * If you have already included it, you can eliminate the below
 * https://github.com/sass-mq/sass-mq/blob/master/_mq.scss
 */

/// Base font size on the `<body>` element
/// @type Number (unit)
$mq-base-font-size: 16px !default;

/// Convert pixels to ems
///
/// @param {Number} $px - value to convert
/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size
///
/// @example scss
///  $font-size-in-ems: mq-px2em(16px);
///  p { font-size: mq-px2em(16px); }
///
/// @requires $mq-base-font-size
/// @returns {Number}
@function mq-px2em($px, $base-font-size: $mq-base-font-size) {
  @if unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return mq-px2em($px + 0px); // That may fail.
  } @else if unit($px) == em {
    @return $px;
  }
  @return ($px / $base-font-size) * 1em;
}


/// Set the `$sprite` map
/// @group sprite
$svg-sprite: map-get($svg-icons, sprite) !default;

/// Retrive an attributes value for a specific icon in the sprite map
/// @param {string} $icon - The name of the icon
/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
  $newIcon: map-get($svg-icons, $icon);
  @if $newIcon == null {
    @warn "Can't find an icon with the name #{$icon}";
  }
  @return map-get($newIcon, $attr);
}

/// Create a map with the specified icon of attributes
/// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
  $attr: (
    width: sprite-attr($icon, width),
    height: sprite-attr($icon, height),
    x: sprite-attr($icon, positionX),
    y: sprite-attr($icon, positionY)
  );

  @return $attr;
}

/// Get the width of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_width($icon) {
  @return mq-px2em(sprite-attr($icon, width));
}

/// Get the height of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_height($icon) {
  @return mq-px2em(sprite-attr($icon, height));
}

/// Assign the correct SVG background image and dimensions to the element
@mixin spriteBG {
  display: inline-block;
  background-image: url(map-get($svg-sprite, svgPath));
  background-size: mq-px2em(map-get($svg-sprite, width)) mq-px2em(map-get($svg-sprite, height));
}

%sprite {
  @include spriteBG;
}

// generic transform
@mixin transform($transforms) {
  transform: $transforms;
}

@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}


/// Add an SVG sprite icon using em positioning
/// @param {string} $icon - The name of the icon
/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
/// - `all` ensures the icon has the background, position and size.
/// - `size` is just for dimensions
/// - `bg` just  applies the backgrounds to an element
/// @example scss - Usage
/// .class {
/// 	@include sprite(arrow);
/// 	&:hover {
/// 		@include sprite(arrowDown, bg)
/// 	}
/// }
///
/// @example css - Output
/// .class {
/// 	display: inline-block;
/// 	background-image: url("../img/sprite.svg");
/// 	background-size: 34.25em 32.1875em;
/// }
///
///
/// .class {
/// 	width: 1.3125em;
/// 	height: 1.3125em;
/// 	background-position: -0.3125em -0.3125em;
/// }
/// .class:hover {
/// 	background-position: -2.25em -2.25em;
/// }
@mixin svg-sprite($icon, $type: all, $rotate: null) {

  $rotation: null;

  @if $type == all {
    // Shares the backgrounds
    @extend %sprite;
  } @else {
    @include spriteBG;
  }

  $iconMap: icon-attr($icon);

  // Outputs dimensions in em
  @if $type == all or $type == size {
    width: mq-px2em(map-get($iconMap, width));
    height: mq-px2em(map-get($iconMap, height));
  }

  // Outputs background position in em
  @if $type == all or $type == bg or $type == mq {
    //background-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);
    //background-position: map-get($iconMap, x) map-get($iconMap, y);
    //-100 * (position + padding) / (sprite height - icon height - 1)  * -1 is for 1px padding within the original svg assest

    $bgX: -100 * (map-get($iconMap, x) - map-get($svg-sprite, padding)) / (map-get($svg-sprite, width) - map-get($iconMap, width) - 1);
    $bgY: -100 * (map-get($iconMap, y) - map-get($svg-sprite, padding)) / (map-get($svg-sprite, height) - map-get($iconMap, height) - 1);
    $bgPos: unquote('#{$bgX}% #{$bgY}%');
    background-position: $bgPos;

  }

  @if type_of($rotate) == string {
    $rotation: map-get((
            none: 0,
            right: 90,
            flip: 180,
            left: -90
    ), $rotate);
  }
  @if type_of($rotate) == number {
    $rotation: $rotate;
  }

  @if $rotation != null {
    @include rotate($rotation);
  }
}