<?php

/**
 * @file
 * Functions to support theming in the ncids_trans theme.
 *
 * This is copied over from cgov_common.
 */

use Drupal\Core\Language\LanguageInterface;
use Drupal\node\Entity\Node;

/**
 * Allows us to have node based page templates.
 *
 * @param array $suggestions
 *   The list of theme suggestions to augment.
 * @param array $variables
 *   Collection of variables.
 */
function ncids_trans_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    // If $node is the NID instead of Node object, get Node object.
    // This happens on route 'entity.node.revision' due to the issue:
    // See https://www.drupal.org/project/drupal/issues/2730631 .
    if (!$node instanceof Node) {
      $node = Node::load($node);
    }

    // Add theme suggestion of 'page__article', 'page__biography', etc.
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;

    // Add theme suggestion for special report template if appropriate.
    if ($content_type == "cgov_home_landing" || $content_type == "cgov_mini_landing") {
      $page_template = $content_type == "cgov_home_landing" ? $node->field_page_style->value : $node->field_mlp_page_style->value;
      if ($page_template !== NULL) {
        $suggestions[] = 'page__' . $content_type . '__' . $page_template;
      }
    }
  }

  // ADD SUGGESTIONS FOR CUSTOM 401/403/404 PAGE TEMPLATES.
  // 1) Get Request Object.
  $request = \Drupal::request();

  // 2) If there is HTTP Exception..
  if ($exception = $request->attributes->get('exception')) {
    // 3) Get the status code.
    $status_code = $exception->getStatusCode();
    // 4) Get the current langauge.
    $language = \Drupal::languageManager()
      ->getCurrentLanguage(LanguageInterface::TYPE_INTERFACE)
      ->getId();
    if (in_array($status_code, [401, 403, 404])) {
      $suggestions[] = 'page__' . $status_code;
      $suggestions[] = 'page__' . $status_code . '_' . $language;
    }
  }
}

/**
 * Allows us to have node based pager templates.
 *
 * @param array $suggestions
 *   The list of theme suggestions to augment.
 * @param array $variables
 *   Collection of variables.
 */
function ncids_trans_theme_suggestions_pager_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    // If $node is the NID instead of Node object, get Node object.
    // This happens on route 'entity.node.revision' due to the issue:
    // See https://www.drupal.org/project/drupal/issues/2730631 .
    if (!$node instanceof Node) {
      $node = Node::load($node);
    }
    $content_type = $node->bundle();
    // Add theme suggestion for special report template if appropriate.
    $page_template = $content_type == "cgov_home_landing" ? $node->field_page_style->value : $node->field_mlp_page_style->value;
    if (($page_template !== NULL) && str_starts_with($page_template, 'ncids_')) {
      $suggestions[] = 'pager__ncids';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * This is to add the home/landing page style to the node templates.
 */
function ncids_trans_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $node = $variables['elements']['#node'];

  if ($node->bundle() !== "cgov_home_landing" && $node->bundle() !== "cgov_mini_landing") {
    return $suggestions;
  }

  $style = $node->bundle() === "cgov_home_landing" ? $node->field_page_style->value : $node->field_mlp_page_style->value;
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  // We only want to add a suggestion if it is the full display mode for now.
  // Otherwise we will get multiple template choices for views and other
  // things we don't need.
  if ($sanitized_view_mode === 'full') {
    $suggestions[] = 'node__' . $node->bundle() . '__' . $style . '__' . $sanitized_view_mode;
  }
  return $suggestions;
}

/**
 * Allows us to add the container's view mode to field suggestions.
 *
 * @param array $suggestions
 *   The list of theme suggestions to augment.
 * @param array $variables
 *   Collection of variables.
 */
function ncids_trans_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'field__' . $element['#field_name'] . '__' . $element['#view_mode'];
}

/**
 * Implements hook_preprocess_html().
 *
 * Add theme variant class name to page body for CSS and JS entrypoint.
 */
function ncids_trans_preprocess_html(&$variables) {
  // Removes the empty Drupal region div that gets rendered out on templates.
  // Removes it from all content types that have content in the region block.
  // @todo Remove when #4560 is completed.
  $variables["page"]["content"]["messages"]["#include_fallback"] = FALSE;
  $hasTranslations = theme_get_setting('has_translations');
  if ($hasTranslations) {
    $variables['attributes']['class'][] = 'has-translated-content';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function ncids_trans_preprocess_node(&$variables) {
  // URL query parameters.
  $params = [
    'month',
    'topic',
    'year',
  ];

  // Actual query parameters.
  $queryParameters = \Drupal::request()->query;

  // Add any parameter values to the $variables get property.
  foreach ($params as $param) {
    $variables['get'][$param] = $queryParameters->get($param, '');
  }

  // is_front is normally only available in page templates.
  // This is to subvert that expectation.
  // (NOTE: An exception might be thrown.)
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set the default value.
    $variables['is_front'] = FALSE;
  }
}

/**
 * Preprocess function for field templates.
 */
function ncids_trans_preprocess_field(&$variables) {
  // Check for selected research field.
  if ($variables['element']['#field_name'] == 'field_selected_research') {
    // Get the node ID for use in field templates.
    $nid = $variables['element']['#object']->id();
    $variables['node_id'] = $nid;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function ncids_trans_page_attachments_alter(&$attachments) {
  foreach ($attachments['#attached']['html_head'] as $key => $item) {
    if (isset($item[0]["#attributes"]["name"]) && $item[0]["#attributes"]["name"] == 'viewport') {
      $attachments['#attached']['html_head'][$key][0]["#attributes"]["content"] = "width=device-width, user-scalable=yes, initial-scale=1, minimum-scale=1";
    }
  }

  $attachments['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#value' => _ncids_trans_get_initial_nav_info(),
      '#attributes' => [
        'id' => 'ncids-nav-info',
      ],
      // Ensure this block is before the script file.
      '#weight' => -10,
    ],
    'ncids-nav-info',
  ];
}

/**
 * Helper function to get the initial navigation info for NCIDS.
 *
 * @return string
 *   A string containing the JSON representation of the navigation info.
 */
function _ncids_trans_get_initial_nav_info() {

  /** @var \Drupal\cgov_core\Services\CgovNavigationManager $nav_manager */
  $nav_manager = \Drupal::service('cgov_core.cgov_navigation_manager');

  $nav_info = $nav_manager->getClosestNavForMobile();

  if ($nav_info) {
    $nav_js = '{ id: "' . $nav_info['initial_nav']['id'] . '", menu_type: "' . $nav_info['initial_nav']['menu_type'] . '"}';
    return 'window.ncidsNavInfo = { nav: ' . $nav_js . ', item_id: ' . $nav_info['initial_item'] . '};';
  }
  else {
    return '[]';
  }
}
