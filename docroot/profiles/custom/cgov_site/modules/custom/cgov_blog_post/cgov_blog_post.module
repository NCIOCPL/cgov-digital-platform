<?php

/**
 * @file
 * Contains cgov_blog_post.module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function cgov_blog_post_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add custom validation for Cgov Blog Posts only.
  if ($form_id == 'node_cgov_blog_post_form' || $form_id == 'node_cgov_blog_post_edit_form') {

    // Add the admin JS library so we can run the InvokeCommand. See
    // https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Ajax%21InvokeCommand.php/class/InvokeCommand/8.2.x
    $form['#attached']['library'][] = 'cgov_blog_post/cgov_blog_post_admin';

    // If this is a draft or administrator role, fire off ajax function.
    if (is_draft($form)) {
      $form['field_blog_topics']['#states']['invisible']['select[name="field_blog_series"]']['value'] = '_none';
      $form['field_blog_series']['widget']['#ajax'] = [
        'callback' => 'display_cats',
        'event' => 'change',
        'progress' => [
          'message' => NULL,
          'type' => 'throbber',
        ],
      ];
    }
    else {
      $form['field_blog_series']['#disabled'] = TRUE;
    }

    // Get filtered categories (debugging).
    filter_cats($form);
  }
}

/**
 * Implements hook_entity_presave().
 */
function cgov_blog_post_entity_presave(EntityInterface $entity) {
  // Do things to make the Blog Categories save upon changing.
}

/**
 * Ajax callback.
 */
function display_cats(array $form, FormStateInterface $form_state) {
  // Create our AJAX object.
  $ajax_response = new AjaxResponse();

  // Do AJAX behavior based on workflow.
  if (is_draft($form)) {
    $ajax_response->addCommand(new InvokeCommand(NULL, 'drawBlogTopics', ['hello']));
  }

  return $ajax_response;
}

/**
 * Filter taxonomy categories.
 */
function filter_cats(array $form) {

  // BEGIN DEBUGGING SECTION:
  $vocabulary_id = 'cgov_blog_topics';
  $blog_topics = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadTree($vocabulary_id);

  // Get Blog Topics and IDs.
  $blog_topic_names = [];
  $blog_topic_owner_series_ids = [];
  foreach ($blog_topics as $blog_topic) {
    $blog_topic_names[] = $blog_topic->name;
    $blog_topic_owner_series_ids[] = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($blog_topic->tid)->get('field_owner_blog')->target_id;
  }

  // Debug item 1: get list of all available topics.
  ksm(implode('|', $blog_topic_names));

  // Debug item 2: get the Owner Series node (content) ID for each topic.
  ksm(implode('|', $blog_topic_owner_series_ids));

  // Debug item 3: get Blog Series.
  ksm($form['field_blog_series']['widget']['#options']);
  /*
  foreach($target_ids as $target_id) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $node = $node_storage->load(10);
  ksm($node);
  }
   */
  ksm('END debugging!!!');
}

/**
 * Clear all taxonomy checks.
 */
function clear_cats(array $form) {
  return '== debug cleared category checkboxes ==';
}

/**
 * Util function to return the moderation state of a given form.
 */
function get_moderation_state(array $form) {
  $moderation_state = $form['moderation_state']['widget'][0]['state']['#default_value'];
  // TODO: null check.
  return $moderation_state;
}

/**
 * Util function to return the moderation state of a given form.
 */
function is_draft(array $form) {
  $moderation_state = get_moderation_state($form);
  $is_draft = ($moderation_state == 'draft') ? TRUE : FALSE;
  return $is_draft;
}
