<?php

/**
 * @file
 * The Cgov Site Section module file.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\cgov_site_section\FieldStorageDefinition;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_entity_field_storage_info().
 */
function cgov_site_section_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'taxonomy_term') {
    $definitions['computed_path'] = FieldStorageDefinition::create('string')
      ->setName('computed_path')
      ->setLabel(t('A custom computed site section field'))
      ->setTargetEntityTypeId($entity_type->id());
    return $definitions;
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function cgov_site_section_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  if ($entity_type->id() === 'taxonomy_term' && $bundle === 'cgov_site_sections') {
    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $custom_bundle_field_storage */
    $custom_bundle_field_storage = cgov_site_section_entity_field_storage_info($entity_type)['computed_path'];
    $definitions[$custom_bundle_field_storage->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_bundle_field_storage);
    return $definitions;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Prior to saving a taxonomy term, this sets the value for the psuedo computed
 * field 'computed_path'. 'computed_path' consists of the parents terms path
 *  and this terms Pretty URL Field.
 */
function cgov_site_section_taxonomy_term_presave(EntityInterface $entity) {
  // Format the Pretty URL.
  if ($entity->hasField('field_pretty_url') && !empty($entity->get('field_pretty_url'))) {
    $field_pretty_url = $entity->get('field_pretty_url')->value;
    $entity->set('field_pretty_url', strtolower($field_pretty_url));
  }

  // Only do the following for site sections.
  if ($entity->bundle() !== 'cgov_site_sections') {
    return;
  }

  // Calculate and set the compute_path field.
  // TODO: Only recalculate path if parent or pretty url changed.
  // Assume one parent. Sections cannot be multiple places.
  $parent_tid = $entity->get('parent')->target_id;

  $parent_path = '/';
  // Unless it is TID 0 (the root), let's get the parents computed path.
  if ($parent_tid != 0) {
    try {
      $parent_entity = Term::load($parent_tid);
      $parent_path = $parent_entity->get('computed_path')->value;
    }
    catch (Exception $e) {
      $parent_path = NULL;
      \Drupal::logger('cgov_site_section')
        ->notice('Could not retrieve computed path for tid: ' . $parent_tid);
    }
  }

  // This is section's "folder name".
  $field_pretty_url = $entity->get('field_pretty_url')->value;

  // Assumption: Only root terms can have empty pretty url.
  $entity->set(
    'computed_path',
    $parent_path === '/' ?
      $parent_path . $field_pretty_url :
      $parent_path . '/' . $field_pretty_url
  );
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * If a term has either changed its parent or pretty url name,
 * then we need to cascade those changes to any subsections and
 * pages within those subsections.
 */
function cgov_site_section_taxonomy_term_update(EntityInterface $entity) {

  // Only do this for site sections. In the future if there is
  // a vocabulary in which we attach site_section for managing its node's
  // pretty urls, then that vocabulary needs to do something very similar.
  // BUT not in here!
  if ($entity->bundle() !== 'cgov_site_sections') {
    return;
  }

  // TODO: This comparison should be done somewhere else and less messy.
  // Do not do unnessesary updates, so only cascade if a change was
  // made to a significant field.
  if (
    $entity->original->get('computed_path')->value ===
    $entity->get('computed_path')->value &&
    $entity->original->get('parent')->target_id ===
    $entity->get('parent')->target_id &&
    $entity->original->get('field_pretty_url')->value ===
    $entity->get('field_pretty_url')->value
  ) {
    return;
  }

  $term_storage = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term");

  // Update immediate child sections.
  $subsections = $term_storage->loadChildren($entity->id(), 'cgov_site_sections');

  // Resave the sections. This should trigger the presave above with will set
  // the computed_path to the new path.
  foreach ($subsections as $section) {
    $section->save();
  }

  // TODO: Figure out how to get pathauto to update all the aliases using
  // pathauto. To do it here is A) too slow, and B) fraught with
  // issue regarding workflow and the various entity types we would have to hit.
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Prior to saving a node, formats the field..
 */
function cgov_site_section_node_presave($entity) {
  if ($entity->hasField('field_pretty_url') && !empty($entity->get('field_pretty_url'))) {
    $field_pretty_url = $entity->get('field_pretty_url')->value;
    $entity->set('field_pretty_url', strtolower($field_pretty_url));
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Validates that on a node a Site Section and Pretty URL
 * combination will be unique.
 */
function cgov_site_section_entity_type_build(array &$entity_types) {
  // Add our custom validation to the node entity.
  $entity_types['node']->addConstraint('UniqueCgovUrl');
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Validates that the Pretty URL Field on Nodes and Site Sections
 * matches the required pattern.
 */
function cgov_site_section_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($entity_type->id() == 'taxonomy_term' || $entity_type->id() == 'node') && !empty($fields['field_pretty_url'])) {
    $fields['field_pretty_url']->setPropertyConstraints('value', [
      'Regex' => [
        'pattern' => '/^[a-zA-Z0-9-]*$/',
        'message' => 'The Pretty URL field only accepts letters, numbers, and dashes.',
      ],
    ]
    );
  }
}
