<?php

/**
 * @file
 * The Cgov Site Section module file.
 */

use Drupal\block_content\Entity\BlockContent;
use Drupal\cgov_site_section\FieldStorageDefinition;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_entity_field_storage_info().
 */
function cgov_site_section_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'taxonomy_term') {
    $definitions['computed_path'] = FieldStorageDefinition::create('string')
      ->setName('computed_path')
      ->setLabel(t('A custom computed site section field'))
      ->setTargetEntityTypeId($entity_type->id());
    return $definitions;
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function cgov_site_section_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  if ($entity_type->id() === 'taxonomy_term' && $bundle === 'cgov_site_sections') {
    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $custom_bundle_field_storage */
    $custom_bundle_field_storage = cgov_site_section_entity_field_storage_info($entity_type)['computed_path'];
    $definitions[$custom_bundle_field_storage->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_bundle_field_storage);
    return $definitions;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Prior to saving a taxonomy term, this sets the value for the psuedo computed
 * field 'computed_path'. 'computed_path' consists of the parents terms path
 *  and this terms Pretty URL Field.
 */
function cgov_site_section_taxonomy_term_presave(Term $entity) {
  // Only do the following for site sections.
  if ($entity->bundle() !== 'cgov_site_sections') {
    return;
  }

  // Convert the URL to lowercase as we only want lowercased items and
  // the server is case-sensitive.
  if ($entity->hasField('field_pretty_url') && !empty($entity->get('field_pretty_url'))) {
    $field_pretty_url = $entity->get('field_pretty_url')->value;
    // Must still test if $field_pretty_url is not NULL for deprecations
    // in tests.
    if ($field_pretty_url !== NULL) {
      $entity->set('field_pretty_url', strtolower($field_pretty_url));
    }
  }

  // Calculate and set the compute_path field.
  // @todo Only recalculate path if parent or pretty url changed.
  // Assume one parent. Sections cannot be multiple places.
  $parent_tid = $entity->get('parent')->target_id;

  $parent_path = '/';
  // Unless it is TID 0 (the root), let's get the parents computed path.
  if ($parent_tid != 0) {
    try {
      $parent_entity = Term::load($parent_tid);
      $parent_path = $parent_entity->get('computed_path')->value;
      $parent_langcode = $parent_entity->get('langcode')->value;

      // Set the current entities language field based on it's parent term.
      // Ultimately will override the value set by the user in the form
      // with that of the root taxonomy term.
      $entity->set('langcode', $parent_langcode);
    }
    catch (Exception $e) {
      $parent_path = NULL;
      \Drupal::logger('cgov_site_section')
        ->notice('Could not retrieve computed path for tid: ' . $parent_tid);
    }
  }

  // This is section's "folder name".
  $field_pretty_url = $entity->get('field_pretty_url')->value;

  // Assumption: Only root terms can have empty pretty url.
  $entity->set(
    'computed_path',
    $parent_path === '/' ?
      $parent_path . $field_pretty_url :
      $parent_path . '/' . $field_pretty_url
  );
}

/**
 * Implements hook_entity_update().
 */
function cgov_site_section_entity_update(EntityInterface $entity) {
  /*
   * If this is a node and has changed its section parent or
   * alias, if it displays in navigation, cascade those changes
   *  to any subsections and pages within those subsections.
   *
   */
  if ($entity instanceof Node && $entity->hasField('field_site_section')) {
    // Check for moderation state AFTER determining its a node instead
    // of before due to https://www.drupal.org/project/wbm2cm/issues/3042445.
    $current_entity_lang = $entity->get('langcode')->value;
    $translated_entity = $entity->getTranslation($current_entity_lang);
    $current_state = $translated_entity->get('moderation_state')->value;

    // Stupid hack because phpstan doesn't know the translation is a node.
    /** @var \Drupal\node\Entity\Node */
    $originalTranslation = $translated_entity->original;
    $justArchived = ($current_state === "archived" && ($current_state != $originalTranslation->moderation_state->value));
    if (($justArchived) || ($current_state === 'published' && _cgov_site_section_will_trigger_cache_tag_invalidation($entity))) {
      // Find the Sections where this node is a landing page.
      // Invalidate their cache to account for the nodes new alias.
      $section_entities = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'field_landing_page.target_id' => $entity->id(),
        ]);

      if (count($section_entities) > 0) {
        // This item is set as the landing page for at least one Site Section.
        // Invalidate the Nav Root cache tag set on the Site Section(s).
        $section_nav_ids = [];
        $mobile_nav_ids = [];
        foreach ($section_entities as $section) {
          // Get taxonomy term storage.
          $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
          if ($section) {
            // Load the parents of a term.
            $parents = $termStorage->loadParents($section->id());
            if (!empty($parents)) {
              foreach ($parents as $parent_term) {
                // Get section nav items to clear.
                $section_nav_to_clear = _cgov_site_section_get_sections_to_clear($parent_term);
                $section_nav_ids = array_merge($section_nav_ids, $section_nav_to_clear);

                // Get mobile nav items to clear.
                $mobile_nav_to_clear = _cgov_site_section_get_rendering_sections_for_mobile($parent_term);
                $mobile_nav_ids = array_merge($mobile_nav_ids, $mobile_nav_to_clear);
              }
            }
          }
        }

        // Invalidate the section cache tag.
        if (!empty($section_nav_ids)) {
          foreach ($section_nav_ids as $section_nav_id) {
            _cgov_site_section_invalidate_section_cache_tag($section_nav_id);
          }
        }
        // Invalidate the mobile cache tag.
        if (!empty($mobile_nav_ids)) {
          foreach ($mobile_nav_ids as $mobile_nav_id) {
            _cgov_site_section_invalidate_mobile_nav_cache_tag($mobile_nav_id);
          }
        }
      }

      // Clear out the main nav cache tag. This is pretty brute force here and
      // could be more nuanced like the invalidate section cache tag. e.g. this
      // term may be too deep in the tree, or may be hidden, so no need to
      // clear the menu. However, we are blocking clearing the nav from Akamai
      // this is really for *-cms users to see their changed before pushing
      // live.
      Cache::invalidateTags(['mainnav:' . $current_entity_lang]);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * If a mega menu block is updated then clean out the
 * mega-menu-block cache tag.
 */
function cgov_site_section_block_content_update(BlockContent $entity) {

  if ($entity->bundle() !== 'ncids_mega_menu_content') {
    return;
  }

  // Stupid hack because phpstan doesn't know the original's type.
  /** @var \Drupal\block_content\Entity\BlockContent */
  $original = $entity->original;
  // Make sure to clear out the mega-menu-block cache tag
  // if the block status is updated OR
  // if the field_yaml_content data is updated.
  if (($original->status->value !== $entity->status->value) ||
    ($entity->original->get('field_yaml_content')->value !== $entity->get('field_yaml_content')->value)) {
    // Clear out the mega-menu-block cache tag.
    Cache::invalidateTags(['mega-menu-block:' . $entity->id()]);
  }

}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * If a term has either changed its parent or pretty url name,
 * then we need to cascade those changes to any subsections and
 * pages within those subsections.
 */
function cgov_site_section_taxonomy_term_update(Term $entity) {

  // Only do this for site sections. In the future if there is
  // a vocabulary in which we attach site_section for managing its node's
  // pretty urls, then that vocabulary needs to do something very similar.
  // BUT not in this module!
  if ($entity->bundle() !== 'cgov_site_sections') {
    return;
  }

  // We only set the front page for English nodes without a parent.
  // NOTE: this does not account for the case when the root becomes a
  // child of another node. It is possible, but the amount of complexity
  // that check would add is not worth it.
  // NOTE2: target_id can be an int and it can be a string.
  if ($entity->parent->target_id == 0 && $entity->langcode->value === 'en') {
    _cgov_site_section_attempt_set_front_page($entity);
  }

  // Save the term children if this term update meets the criteria.
  if (_cgov_site_section_will_trigger_save_children($entity)) {
    _cgov_site_section_save_term_children($entity);
  }
  // Determine if this term update meets the criteria for tag invalidation,
  // and invalidate.
  if (_cgov_site_section_will_trigger_cache_tag_invalidation($entity)) {

    // Get the complete set of sections IDs to clear.
    $sectionsToClear = _cgov_site_section_get_sections_to_clear($entity);

    // Clear the cache tags.
    foreach ($sectionsToClear as $sectionID) {
      _cgov_site_section_invalidate_section_cache_tag($sectionID);
    }

    // Clear out the main nav cache tag. This is pretty brute force here and
    // could be more nuanced like the invalidate section cache tag. e.g. this
    // term may be too deep in the tree, or may be hidden, so no need to
    // clear the menu. However, we are blocking clearing the nav from Akamai
    // this is really for *-cms users to see their changed before pushing
    // live.
    $current_entity_lang = $entity->get('langcode')->value;
    Cache::invalidateTags(['mainnav:' . $current_entity_lang]);
  }

  // Determine if this term update meets the criteria for tag invalidation,
  // and invalidate.
  if (_cgov_site_section_should_invalidate_mobile_nav($entity)) {

    // Get the complete set of sections IDs to clear.
    $sectionsToClear = _cgov_site_section_get_rendering_sections_for_mobile($entity);

    // Clear the cache tags.
    foreach ($sectionsToClear as $sectionID) {
      _cgov_site_section_invalidate_mobile_nav_cache_tag($sectionID);
    }

    // Clear out the main nav cache tag. This is pretty brute force here and
    // could be more nuanced like the invalidate section cache tag. e.g. this
    // term may be too deep in the tree, or may be hidden, so no need to
    // clear the menu. However, we are blocking clearing the nav from Akamai
    // this is really for *-cms users to see their changed before pushing
    // live.
    $current_entity_lang = $entity->get('langcode')->value;
    Cache::invalidateTags(['mainnav:' . $current_entity_lang]);
  }

  // Make sure to clear out the mega-menu-section cache tag
  // if the field_ncids_mega_menu_contents data is updated.
  if ($entity->original->get('field_ncids_mega_menu_contents')->target_id !== $entity->get('field_ncids_mega_menu_contents')->target_id) {
    Cache::invalidateTags(['mega-menu-section:' . $entity->id()]);
  }

  // @todo Figure out how to get pathauto to update all the aliases using
  // pathauto. To do it here is A) too slow, and B) fraught with
  // issue regarding workflow and the various entity types we would have to hit.
}

/**
 * Returns the set of sections IDs to clear for a given site section update.
 *
 * @param \Drupal\Core\Entity\EntityInterface $section_entity
 *   The section being updated.
 *
 * @return array
 *   The sections IDs to cache tag clear.
 */
function _cgov_site_section_get_sections_to_clear(EntityInterface $section_entity) {

  // Exit early if called for anything other than a node or taxonomy term.
  if (!$section_entity instanceof Node && !$section_entity instanceof Term) {
    return [];
  }

  // Get the current set of section IDs that display this item.
  // Includes this term itself if it's a nav root.
  $sectionsToClear = _cgov_site_section_get_rendering_sections($section_entity);

  // If this section changed parents, or visibility, invalidate
  // the cache tags for the original rendering sections as well.
  if (_cgov_site_section_entity_fields_modified([
    'parent',
    'field_navigation_display_options',
  ], $section_entity)) {
    if (isset($section_entity->original)) {
      $originalRenderingSections = _cgov_site_section_get_rendering_sections($section_entity->original);
      $sectionsToClear = array_merge($sectionsToClear, $originalRenderingSections);
    }
  }

  // If this section changed from being a section nav root to not,
  // we need to invalidate pages having its old section nav root ID.
  if (isset($section_entity->original)) {
    if ($section_entity->get('field_section_nav_root')->value == 0 &&
      $section_entity->original->get('field_section_nav_root')->value == 1) {
      $sectionsToClear[] = $section_entity->id();
    }
  }

  // De-dupe the IDs.
  $sectionsToClear = array_unique($sectionsToClear);

  return $sectionsToClear;
}

/**
 * Invalidate the section nav cache tag with the given Site Section ID.
 *
 * Int $section_id
 *   The Site Section ID to invalidate.
 */
function _cgov_site_section_invalidate_section_cache_tag($section_id) {
  // Get the sections ID and invalidate the cache tag.
  if ($section_id !== NULL) {
    $section_cache_ids = [
      'site_section:' . $section_id,
      'nav_api_section_nav:' . $section_id,
    ];
    Cache::invalidateTags($section_cache_ids);
  }
}

/**
 * Invalidate the mobile nav cache tag with the given Site Section ID.
 *
 * Int $section_id
 *   The Site Section ID to invalidate.
 */
function _cgov_site_section_invalidate_mobile_nav_cache_tag($section_id) {
  // Get the sections ID and invalidate the mobile nav cache tag.
  if ($section_id !== NULL) {
    $section_cache_ids = [
      'nav_api_mobile_nav:' . $section_id,
    ];
    Cache::invalidateTags($section_cache_ids);
  }
}

/**
 * Saves the children of the given Site Section taxonomy term.
 *
 * @param \Drupal\Core\Entity\EntityInterface $updated_section_entity
 *   The site section entity with its pending value updates.
 */
function _cgov_site_section_save_term_children(EntityInterface $updated_section_entity) {
  $term_storage = \Drupal::service('entity_type.manager')
    ->getStorage("taxonomy_term");
  // Update immediate child sections.
  $subsections = $term_storage->loadChildren($updated_section_entity->id(), 'cgov_site_sections');

  // Re-save the sections. This should trigger the presave above which will set
  // the computed_path to the new path.
  foreach ($subsections as $section) {
    $section->save();
  }
}

/**
 * Determines if a section should trigger a re-save of its children terms.
 *
 * @param \Drupal\Core\Entity\EntityInterface $updated_section_entity
 *   The site section entity with its pending value updates.
 *
 * @return bool
 *   A TRUE or FALSE as to whether to trigger a re-save.
 */
function _cgov_site_section_will_trigger_save_children(EntityInterface $updated_section_entity) {

  $fields = [
    'computed_path',
    'parent',
    'field_pretty_url',
    'langcode',
  ];
  return _cgov_site_section_entity_fields_modified($fields, $updated_section_entity);
}

/**
 * Determine if an entity should trigger a cache tag invalidation.
 *
 * Fields which trigger a cache tag invalidation for a section when modified:
 *  name
 *  field_landing_page
 *  field_pretty_url
 *  field_section_nav_root
 *  field_navigation_label
 *  field_navigation_display_options
 *  weight.
 *
 * For a node or media item:
 * field_site_section
 * field_pretty_url
 *
 * @param \Drupal\Core\Entity\EntityInterface $updated_entity
 *   The entity just updated.
 *
 * @return bool
 *   A TRUE or FALSE as to whether to trigger a cache clear.
 */
function _cgov_site_section_will_trigger_cache_tag_invalidation(EntityInterface $updated_entity) {

  $values = [];
  // Invalidation check for Nodes.
  if ($updated_entity instanceof Node) {
    // Exit early if this entity doesn't have site sections.
    if (!$updated_entity->hasField('field_site_section')|| empty($updated_entity->get('field_site_section')->first())) {
      return FALSE;
    }

    // Get the language alias prefix.
    $default_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
    $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $prefix = '';

    if ($current_langcode != $default_langcode) {
      $all_prefixes = \Drupal::config('language.negotiation')->get('url.prefixes');
      $prefix = '/' . $all_prefixes[$current_langcode];
    }

    // Construct the new alias.
    $section_tid = (int) $updated_entity->get('field_site_section')->target_id;
    $term = Term::load($section_tid);
    $computed_path = $term->get('computed_path')->value;
    $pretty_url = $updated_entity->get('field_pretty_url')->value;

    $new_alias = empty($pretty_url) ? $prefix . $computed_path : $prefix .
      $computed_path . '/' . $pretty_url;

    $original_alias = $updated_entity->toUrl()->toString();

    // Exit early and trigger a cache clear if the alias for this node
    // has changed.
    if ($new_alias !== $original_alias) {
      return TRUE;
    }

    // Set entity Fields which trigger invalidation when modified.
    $values =
      [
        'field_site_section',
        'field_pretty_url',
      ];
  }

  // Invalidation Check for Site Sections.
  if ($updated_entity instanceof Term && $updated_entity->bundle() === 'cgov_site_sections') {

    // Stupid hack because phpstan doesn't know the original's type.
    /** @var Drupal\taxonomy\Entity\Term */
    $originalTerm = $updated_entity->original;
    // Early exit. Yes,trigger a cache invalidation if weight modified.
    $weightModified = $originalTerm->getWeight() !== $updated_entity->getWeight();
    if ($weightModified) {
      return TRUE;
    }

    // Get the field section nav root value.
    $section_nav_root = TRUE;
    if ($updated_entity->field_section_nav_root->value) {
      $section_nav_root = FALSE;
    }

    // Exit early if this section was previously and is currently hidden.
    // Get the display options for this entity.
    $displayOptions = $updated_entity->get('field_navigation_display_options')->getValue();
    $displayOptions = array_column($displayOptions, 'value');
    $isHidden = !empty($displayOptions) ?
      in_array('hide_in_section_nav', $displayOptions) : FALSE;

    // Get the display options for the original entity.
    $originalOptions = $updated_entity->original->get('field_navigation_display_options')->getValue();
    $originalOptions = array_column($originalOptions, 'value');
    $originalIsHidden = !empty($originalOptions)
      ? in_array('hide_in_section_nav', $originalOptions) : FALSE;

    if ($isHidden && $originalIsHidden && $section_nav_root) {
      // Will not trigger invalidation.
      return FALSE;
    }

    // Set Site Section Fields which trigger invalidation.
    $values =
      [
        'name',
        'field_landing_page',
        'field_pretty_url',
        'field_section_nav_root',
        'field_navigation_label',
        'field_navigation_display_options',
        'field_levels_to_display',
      ];
  }
  // Compare the values and check if any have been modified.
  return _cgov_site_section_entity_fields_modified($values, $updated_entity);
}

/**
 * Determine if an entity should trigger a cache tag invalidation.
 *
 * Fields which trigger a cache tag invalidation for a mobile nav when modified:
 *  name
 *  field_landing_page
 *  field_pretty_url
 *  field_main_nav_root
 *  field_navigation_label
 *  field_navigation_display_options
 *  weight.
 *
 * @param \Drupal\Core\Entity\EntityInterface $updated_entity
 *   The entity just updated.
 *
 * @return bool
 *   A TRUE or FALSE as to whether to trigger a cache clear.
 */
function _cgov_site_section_should_invalidate_mobile_nav(EntityInterface $updated_entity) {

  if (!$updated_entity instanceof Term) {
    return FALSE;
  }

  $entityType = $updated_entity->getEntityTypeId();

  // Invalidation Check for Site Sections.
  $values = [];
  if ($entityType === 'taxonomy_term' &&
    $updated_entity->bundle() === 'cgov_site_sections') {

    // Stupid hack because phpstan doesn't know the original's type.
    /** @var Drupal\taxonomy\Entity\Term */
    $originalTerm = $updated_entity->original;
    // Early exit. Yes,trigger a cache invalidation if weight modified.
    $weightModified = $originalTerm->getWeight() !== $updated_entity->getWeight();
    if ($weightModified) {
      return TRUE;
    }

    // Get the field main nav root value.
    $main_nav_root = TRUE;
    if ($updated_entity->get('field_main_nav_root')->value) {
      $main_nav_root = FALSE;
    }

    // Exit early if this section was previously and is currently hidden.
    // Get the display options for this entity.
    $displayOptions = $updated_entity->get('field_navigation_display_options')->getValue();
    $displayOptions = array_column($displayOptions, 'value');
    $isHidden = !empty($displayOptions) ?
      in_array('hide_in_mobile_nav', $displayOptions) : FALSE;

    // Get the display options for the original entity.
    $originalOptions = $updated_entity->original->get('field_navigation_display_options')->getValue();
    $originalOptions = array_column($originalOptions, 'value');
    $originalIsHidden = !empty($originalOptions)
      ? in_array('hide_in_mobile_nav', $originalOptions) : FALSE;

    if ($isHidden && $originalIsHidden && $main_nav_root) {
      // Will not trigger invalidation.
      return FALSE;
    }

    // Set Site Section Fields which trigger invalidation.
    $values =
      [
        'name',
        'field_landing_page',
        'field_pretty_url',
        'field_main_nav_root',
        'field_navigation_label',
        'field_navigation_display_options',
      ];
  }
  // Compare the values and check if any have been modified.
  return _cgov_site_section_entity_fields_modified($values, $updated_entity);
}

/**
 * Checks to see if an entities values have changed compared to it's original.
 *
 * @param array $fields
 *   The fields which trigger a cache invalidation.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The updated entity.
 *
 * @return bool
 *   A TRUE or FALSE as to whether the fields were modified.
 */
function _cgov_site_section_entity_fields_modified(array $fields, EntityInterface $entity) {
  if (!$entity instanceof Term && !$entity instanceof Node) {
    // If the entity is not a Term or Node, we cannot check for fields.
    return FALSE;
  }

  // Exit early if no fields were passed.
  if (empty($fields)) {
    return FALSE;
  }
  // Store the original entity for comparison.
  $original = $entity->original;
  // If entity status has been modified exit and return true.
  if ($original !== NULL && ($entity->get('status')->getString() !== $original->get('status')->getString())) {
    return TRUE;
  }
  if ($original === NULL && $entity->get('status')->getString() == "1") {
    return TRUE;
  }
  // Setup closures for comparison functions.
  $get_er_value = function ($field_name) use ($entity, $original) {
    // Type-casting since target ID sometimes returns as a string,
    // and PHP conversion isn't reliable here.
    return (int) $original->get($field_name)->target_id !== (int) $entity->get($field_name)->target_id;
  };
  $get_value = function ($field_name) use ($entity, $original) {
    return $original->get($field_name)->getValue() != $entity->get($field_name)->getValue();
  };

  // Loop though the given fields to check for modification.
  foreach ($fields as $field_name) {
    $field_type = $entity->get($field_name)->getFieldDefinition()->getType();

    // Select the function depending on the field type.
    switch ($field_type) {
      case 'entity_reference':
        $wasModified = $get_er_value;
        break;

      default:
        $wasModified = $get_value;
    }

    // If a field has been modified exit and return true.
    if ($wasModified($field_name)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Set the front page if conditions are right.
 *
 * @param \Drupal\taxonomy\Entity\Term $site_section
 *   The site section.
 */
function _cgov_site_section_attempt_set_front_page(Term $site_section) {

  /*
   * If it has no landing page, then we need to exit.
   *
   * NOTE: We do not care about its published state as taxonomy does not have
   * workflow yet. So when the landing page is set, then it updates the live
   * site immediately. The assumption is that the home page will be published
   * either before, or right after. If we checked the published state, and
   * skipped updating it if the target was unpublished, then we would have to
   * have an update hook for node checking if it is a landing then updating
   * the section. That is too convoluted.
   */
  $home_page_id = $site_section->get('field_landing_page')->target_id;
  if ($home_page_id === NULL) {
    return;
  }

  // Set the front page.
  $config = \Drupal::configFactory()->getEditable('system.site');
  $front_page = "/node/$home_page_id";
  // Only save if we need to change it.
  if ($front_page !== $config->get('page.front')) {
    $config->set('page.front', $front_page)->save();
  }
}

/**
 * Implements hook_entity_presave().
 */
function cgov_site_section_entity_presave($entity) {
  // Prior to saving a node, formats the field.
  $entityType = $entity->getEntityType()->id();
  if ($entityType === 'node' || $entityType === 'media') {

    if ($entity->hasField('field_pretty_url') && !empty($entity->get('field_pretty_url'))) {
      $field_pretty_url = $entity->get('field_pretty_url')->value;
      // Must still test if $field_pretty_url is not NULL for deprecations
      // in tests.
      if ($field_pretty_url !== NULL) {
        $entity->set('field_pretty_url', strtolower($field_pretty_url));
      }
    }
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Validates that on a node a Site Section and Pretty URL
 * combination will be unique.
 */
function cgov_site_section_entity_type_build(array &$entity_types) {
  // Add our custom validation to the node entity.
  $entity_types['node']->addConstraint('UniqueCgovUrl');
  $entity_types['media']->addConstraint('UniqueCgovUrl');
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Validates that the Pretty URL Field on Nodes and Site Sections
 * matches the required pattern.
 */
function cgov_site_section_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($entity_type->id() == 'taxonomy_term' || $entity_type->id() == 'node' || $entity_type->id() == 'media') && !empty($fields['field_pretty_url'])) {
    $fields['field_pretty_url']->setPropertyConstraints('value', [
      'Regex' => [
        'pattern' => '/^[\.a-zA-Z0-9-]*$/',
        'message' => 'The Pretty URL field only accepts letters, numbers, and dashes.',
      ],
    ]
    );
  }
  if ($entity_type->id() == 'taxonomy_term'  && $bundle === 'cgov_site_sections') {
    if (isset($fields['parent'])) {
      // Add custom constraint to validate parent term combinations.
      $fields['parent']->addConstraint('CgovValidateParentConstraint', []);
    }
    if (isset($fields['field_pretty_url'])) {
      // Add custom constraint for pretty url to check the uniqueness of url
      // based on computed path.
      $fields['field_pretty_url']->addConstraint('UniqueCgovUrl');
    }
  }
}

/**
 * Implements hook_views_data().
 *
 * This allows us to use the computed_path field in views.
 */
function cgov_site_section_views_data() {
  $data = [];

  // The outermost keys of $data are Views table names, which should usually
  // be the same as the hook_schema() table names.
  $data['taxonomy_term__computed_path'] = [];
  $data['taxonomy_term__computed_path']['table']['group'] = t('Cgov Site Section');
  $data['taxonomy_term__computed_path']['table']['join'] = [
    // Within the 'join' section, list one or more tables to automatically
    // join to. In this example, every time 'node_field_data' is available in
    // a view, 'example_table' will be too. The array keys here are the array
    // keys for the other tables, given in their hook_views_data()
    // implementations. If the table listed here is from another module's
    // hook_views_data() implementation, make sure your module depends on that
    // other module.
    'taxonomy_term_field_data' => [
      // Primary key field in <entity>_field_data to use in the join.
      'left_field' => 'tid',
      // Primary key field in our custom field table to use in the join.
      'field' => 'entity_id',
    ],
  ];
  // Our custom computed path field, exposed as a field, sort, filter,
  // and argument.
  $data['taxonomy_term__computed_path']['computed_path_value'] = [
    'title' => t('Computed Path'),
    'help' => t('The computed_path Cgov Site Section field.'),
    'field' => [
      // ID of field handler plugin to use.
      'id' => 'standard',
    ],
    'sort' => [
      // ID of sort handler plugin to use.
      'id' => 'standard',
    ],
    'filter' => [
      // ID of filter handler plugin to use.
      'id' => 'string',
    ],
    'argument' => [
      // ID of argument handler plugin to use.
      'id' => 'string',
    ],
  ];

  return $data;
}

/**
 * Returns the section nav root IDs which render a given section.
 *
 * \Drupal\Core\Entity\EntityInterface $term
 *    The site section.
 */
function _cgov_site_section_get_rendering_sections(EntityInterface $term) {
  $renderingSections = [];
  // Get the full term tree as an array.
  $sectionTree = _cgov_site_section_get_term_tree($term);

  // Loop over the term tree, storing only nav root IDs that render,
  // based on total distance from Root Nav -> Section being modified; and
  // display options.
  $totalLevels = count($sectionTree);
  for ($level = 0; $level < $totalLevels; $level++) {
    // Get the section term.
    $section = $sectionTree[$level];

    // If the current section being checked on is not a root, go to
    // the next iteration.
    if ($section->field_section_nav_root->value == 0) {
      continue;
    }

    // If the current term is a root, determine if it would display
    // the updated sections changes.
    // Levels to render will always be a positive integer, eg. from 1-5.
    $levelsToRender = $section->field_levels_to_display->value;
    if ($level < $levelsToRender) {
      $renderingSections[] = $section->id();
    }

    // If the root item just checked is hidden in nav, nothing above it
    // will render this change, therefore we can stop checking the tree.
    // Determine this by checking the display options for the root.
    $displayOptions = $section->field_navigation_display_options->getValue();
    $displayOptions = !empty($displayOptions) ? $displayOptions : [];
    $displayOptions = array_column($displayOptions, 'value');

    if (in_array('hide_in_section_nav', $displayOptions)) {
      break;
    }
  }
  return $renderingSections;
}

/**
 * Returns the mobile nav root IDs which render a given section.
 *
 * \Drupal\Core\Entity\EntityInterface $term
 *    The site section.
 */
function _cgov_site_section_get_rendering_sections_for_mobile(EntityInterface $term) {
  $renderingSections = [];
  // Get the full term tree as an array.
  $sectionTree = _cgov_site_section_get_term_tree($term);

  // Loop over the term tree, storing only nav root IDs that render,
  // based on total distance from Root Nav -> Section being modified; and
  // display options.
  $totalLevels = count($sectionTree);
  for ($level = 0; $level < $totalLevels; $level++) {
    // Get the section term.
    $section = $sectionTree[$level];

    // If the current section being checked on is not a root, go to
    // the next iteration.
    if ($section->field_main_nav_root->value == 0) {
      continue;
    }

    // If the current term is a root, determine if it would display
    // the updated sections changes.
    // Levels to render will always be a positive integer, eg. from 1-5.
    $levelsToRender = theme_get_setting('mobile_levels_to_display', 'cgov_common') ?? 4;
    if ($level < $levelsToRender) {
      $renderingSections[] = $section->id();
    }

    // If the root item just checked is hidden in nav, nothing above it
    // will render this change, therefore we can stop checking the tree.
    // Determine this by checking the display options for the root.
    $displayOptions = $section->field_navigation_display_options->getValue();
    $displayOptions = !empty($displayOptions) ? $displayOptions : [];
    $displayOptions = array_column($displayOptions, 'value');

    if (in_array('hide_in_mobile_nav', $displayOptions)) {
      break;
    }
  }
  return $renderingSections;
}

/**
 * Return the full term tree for a given section, including the giving term.
 *
 * @param \Drupal\taxonomy\Entity\Term $term
 *   The taxonomy term.
 */
function _cgov_site_section_get_term_tree(Term $term) {
  $termTree = [$term];
  $parentTerm = _cgov_site_section_get_section_parent($term);

  while ($parentTerm !== NULL) {
    $termTree[] = $parentTerm;
    $parentTerm = _cgov_site_section_get_section_parent($parentTerm);
  }

  return $termTree;
}

/**
 * Returns a Site Section Terms direct Parent.
 *
 * @param \Drupal\taxonomy\Entity\Term $term
 *   The Site Section.
 *
 * @return mixed
 *   The Site Sections Parent or NULL.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _cgov_site_section_get_section_parent(Term $term) {
  $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  if ($term) {
    $parents = $termStorage->loadParents($term->id());
    if (!empty($parents)) {
      return $parents[array_keys($parents)[0]];
    }
  }
  return NULL;
}

/**
 * Implements hook_link_alter().
 *
 * Hooks to replace the Drupal taxonomy term listing to use our
 * lighter-weight editor. This takes care of the operations list,
 * the admin toolbar link to the overview, and the tabs on the
 * edit pages.
 */
function cgov_site_section_link_alter(&$variables) {
  if (isset($variables['url'])) {
    /** @var \Drupal\Core\Url $url */
    $url = $variables['url'];
    if ($url->isRouted() && $url->getRouteName() == "entity.taxonomy_vocabulary.overview_form") {
      $params = $url->getRouteParameters();
      if (isset($params['taxonomy_vocabulary']) && $params['taxonomy_vocabulary'] === 'cgov_site_sections') {
        $variables['url'] = Url::fromRoute(
          'cgov_vocab_manager.cgov_vocab_manager_form',
          $url->getRouteParameters()
        );
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function cgov_site_section_block_content_presave(BlockContent $entity) {
  // Limit to the NCIDS Mega Menu Content block type.
  if ($entity->bundle() !== 'ncids_mega_menu_content') {
    return;
  }

  // Call the validations.
  $violations = $entity->validate();
  if ($violations->count() > 0) {
    foreach ($violations as $violation) {
      if ($violation->getPropertyPath() !== 'moderation_state') {
        throw new \Exception($violation->getMessage());
      }
    }
  }
}
