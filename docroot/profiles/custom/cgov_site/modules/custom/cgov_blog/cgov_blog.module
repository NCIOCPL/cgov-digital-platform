<?php

/**
 * @file
 * Contains cgov_blog.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_form_alter().
 */
function cgov_blog_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add custom validation for Cgov Blog Posts only.
  if ($form_id == 'node_cgov_blog_post_form' || $form_id == 'node_cgov_blog_post_edit_form') {
    // Add wrapper for blog topics.
    // The id for the blog wrapper changes after ajax requests.
    $form['field_blog_topics']['#prefix'] = '<div id="cgov-edit-blog-topics-wrapper">';
    $form['field_blog_topics']['#suffix'] = '</div>';

    // Check if the current form is in the draft or review state.
    if (_is_selectable($form)) {
      // Hide blog topics on initial content creation.
      $form['field_blog_topics']['#states']['invisible']['select[name="field_blog_series"]']['value'] = '_none';
      // Set replacing wrapper for initial load and ajax
      // requests when creating a blog post.
      $form['field_blog_series']['widget']['#ajax'] = [
        'callback' => '_update_blog_post_checkboxes',
        'wrapper' => 'cgov-edit-blog-topics-wrapper',
        'event' => 'change',
        'method' => 'replace',
      ];

      $series_id = $form_state->getValue("field_blog_series");
      $blog_manager = \Drupal::service('cgov_blog.blog_manager');
      // When creating a translation form state does not have the series
      // information yet.
      if ($series_id == NULL) {
        $series_id = $form['field_blog_series']['widget']['#default_value'];
        $series_nid = $series_id[0];
      }
      else {
        $series_nid = $series_id[0]['target_id'];
      }

      $form['field_blog_topics']['widget']['#options'] = $blog_manager->getBlogTopicsForSeries($series_nid, \Drupal::languageManager()->getCurrentLanguage()->getId());

    }
    else {
      // Editing a published node. Restrict to series topics.
      $series_id = $form['field_blog_series']['widget']['#default_value'];
      $blog_manager = \Drupal::service('cgov_blog.blog_manager');
      $form['field_blog_topics']['widget']['#options'] = $blog_manager->getBlogTopicsForSeries($series_id[0], \Drupal::languageManager()->getCurrentLanguage()->getId());
      $form['field_blog_series']['#disabled'] = TRUE;
    }
    // Hide the label when options are empty.
    if (count($form['field_blog_topics']['widget']['#options']) == 0) {
      $form['field_blog_topics']['#attributes']['class'][] = "hidden";
    }
  }
  // Set field properties for Blog Series.
  if ($form_id == 'node_cgov_blog_series_form' || $form_id == 'node_cgov_blog_series_edit_form') {
    // Draw the custom description for the Feedburner field only.
    $description = $form['field_feedburner_url']['widget']['#description'];
    $form['field_feedburner_url']['widget'][0]['uri']['#description'] = $description;
  }

}

/**
 * Custom callback for updating blog post topic checkboxes.
 */
function _update_blog_post_checkboxes($form, &$form_state) {
  // Returns the form element for replacing.
  return $form['field_blog_topics'];
}

/**
 * Implements hook_views_pre_view().
 */
function cgov_blog_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  // If this is a list in a Blog Series, use 'items per page' field.
  if ($view->id() == 'cgov_block_blog_posts') {
    $node = Drupal::entityTypeManager()->getStorage('node')->load($args[0]);
    if ($node->bundle() == 'cgov_blog_series' && isset($node->field_num_display_posts)) {
      $view->setItemsPerPage($node->field_num_display_posts->value);
    }
  }

  // Allow replacement of contextual filters arguments.
  // Can use ?series=cancer-currents&topic=clinical-trial-results .
  if ($view->id() == 'blog_rss' || $view->id() == 'cgov_block_blog_posts') {
    $series = \Drupal::request()->query->get('series');
    $topic = \Drupal::request()->query->get('topic');

    // Convert BlogSeries.Shortname to ID.
    if ($series && !is_numeric($series) && $series != 'all') {
      $nodes = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadByProperties(
            ['field_blog_series_shortname' => $series]
        );
      // Get first array key.
      reset($nodes);
      $nid = key($nodes);
      // Store NID as the first contextual filter argument.
      $view->args[0] = (int) $nid;
    }

    // Convert BlogTopic.PrettyUrl to ID.
    if ($topic && !is_numeric($topic) && $topic != 'all') {
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(
            ['field_topic_pretty_url' => $topic]
        );
      // Get first array key.
      reset($terms);
      $tid = key($terms);
      // Store NID as the first contextual filter argument.
      $view->args[1] = (int) $tid;
    }

  }
}

/**
 * Get an array of all taxonomy/owner blog pairs.
 */
function _get_id_pairs(array $form) {

  // Get the list of topics (categories) from the vocabulary ID.
  $vid = 'cgov_blog_topics';
  $topics = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);

  // Return Blog Topic IDs and associated node IDs as an array.
  $id_pairs = [];
  foreach ($topics as $topic) {
    $tid = $topic->tid;
    $nid = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid)->get('field_owner_blog')->target_id;
    $id_pairs[$tid] = $nid;
  }
  return $id_pairs;
}

/**
 * Check if the current form is in the draft or review state.
 */
function _is_selectable(array $form) {
  $curr_state = $form['moderation_state']['widget'][0]['state']['#default_value'];
  $selectable = ($curr_state == 'draft' || $curr_state == 'review') ? TRUE : FALSE;
  return $selectable;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Limits allowed text formats using the cgov_core form_tools service.
 */
function cgov_blog_field_widget_form_alter(&$element, $form_state, $context) {
  // Maps field names to an array containing a single format.
  $map = [
    'field_about_blog' => ['streamlined'],
  ];
  $formHelper = \Drupal::service('cgov_core.form_tools');
  $formHelper->allowTextFormats($map, $element, $context);
}

/**
 * Preprocess function for block templates.
 */
function cgov_blog_preprocess_block(&$variables) {
  /*
   * Make changes to the breadcrumb block. If the block is of type
   * 'cgov_breadcrumb'and the URL contains valid query parameters
   * and the content type is Blog Series, add the current,
   * translated series link to the breadcrumb render array.
   */
  if ($variables['plugin_id'] == 'cgov_breadcrumb') {

    $year = \Drupal::request()->query->get('year');
    $topic = \Drupal::request()->query->get('topic');
    // Proceed only if the view contains query params.
    if (!empty($topic) || !empty($year)) {
      $nid = \Drupal::routeMatch()->getRawParameter('node');
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

      // If Blog Series content type, add nav link for the current language.
      if ($node->bundle() === 'cgov_blog_series') {
        $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $node = \Drupal::service('entity.repository')->getTranslationFromContext($node, $lang);
        $section = $node->field_site_section->entity;
        $label = $section->field_navigation_label->value ?? $section->name->value;
        $variables['content']['breadcrumbs'][] = [
          'href' => $node->toUrl()->toString(),
          'label' => $label,
        ];
      }
    }
  }

  /*
   * Modify the language toggle block.
   * Set correct translation for topic query param.
   */
  if ($variables['plugin_id'] === 'language_block:language_content') {

    $topic = \Drupal::request()->query->get('topic');
    // Proceed only if the view contains topic query param.
    if (!empty($topic)) {
      $nid = \Drupal::routeMatch()->getRawParameter('node');
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

      // If Blog Series content type, add nav link for the current language.
      if ($node->bundle() === 'cgov_blog_series') {
        // Get the query parameter and current and opposite languages.
        $lang_current = (\Drupal::languageManager()->getCurrentLanguage()->getId());
        $lang_toggled = $lang_current != 'en' ? 'en' : 'es';

        // Get array of blog topics.
        $query = \Drupal::entityQuery('taxonomy_term');
        $query->condition('vid', 'cgov_blog_topics');
        $tids = $query->execute();
        $terms = Term::loadMultiple($tids);

        /*
         * Loop through each term to find translation. If translation exists
         * and the topic query param value does NOT match the language of the
         * current page, replace with the correct language value.
         */
        foreach ($terms as $term) {
          if ($term->hasTranslation($lang_current)) {
            // Get field value for current page language.
            $term_current = \Drupal::service('entity.repository')->getTranslationFromContext($term, $lang_current);
            $pretty_url_current = $term_current->get('field_topic_pretty_url')->value;

            // If query parameter matches, replace with correct parameter.
            if ($pretty_url_current == $topic) {
              $term_toggled = \Drupal::service('entity.repository')->getTranslationFromContext($term, $lang_toggled);
              $pretty_url_toggled = $term_toggled->get('field_topic_pretty_url')->value;
              $variables['content']['#links'][$lang_toggled]['query']['topic'] = $pretty_url_toggled;
              break;
            }
          }
        }
      }
    }
  }

}

/**
 * Implements hook_taxonomy_term_update().
 */
function cgov_blog_taxonomy_term_update($term_entity) {
  /* When taxonomy term for blog categories is updated invalidate the
   *  corresponding blog series page.
   */
  if ($term_entity->getVocabularyId() === "cgov_blog_topics") {
    $owner_blog = $term_entity->field_owner_blog;
    // Invalidate the cache tag for blog series node.
    if ($owner_blog->target_id > 0) {
      Cache::invalidateTags(['node:' . $owner_blog->target_id]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function cgov_blog_theme($existing, $type, $theme, $path) {
  return [
    'cgov_blocks_blog_categories' => [
      'variables' => [
        'rows' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_update().
 */
function cgov_blog_entity_update($entity) {
  // Verify that the node type is blog post.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === "cgov_blog_post") {
    // Get the blog series nid and invalidate cache tag.
    $current_entity_lang = $entity->get('langcode')->value;
    $translated_entity = $entity->getTranslation($current_entity_lang);
    $current_state = $translated_entity->get('moderation_state')->value;
    $blog_series_target_id = $translated_entity->get("field_blog_series")->target_id;
    if ($current_state === "published" && $blog_series_target_id > 0) {
      Cache::invalidateTags(['node:' . $blog_series_target_id]);
    }
  }
}
