<?php

/**
 * @file
 * Contains cgov_blog.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Cache\Cache;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_form_alter().
 */
function cgov_blog_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add custom validation for Cgov Blog Posts only.
  if ($form_id == 'node_cgov_blog_post_form' || $form_id == 'node_cgov_blog_post_edit_form') {
    // Add wrapper for blog topics.
    // The id for the blog wrapper changes after ajax requests.
    $form['field_blog_topics']['#prefix'] = '<div id="cgov-edit-blog-topics-wrapper">';
    $form['field_blog_topics']['#suffix'] = '</div>';

    // Check if the current form is in the draft or review state.
    if (_is_selectable($form)) {
      // Hide blog topics on initial content creation.
      $form['field_blog_topics']['#states']['invisible']['select[name="field_blog_series"]']['value'] = '_none';
      // Set replacing wrapper for initial load and ajax
      // requests when creating a blog post.
      $form['field_blog_series']['widget']['#ajax'] = [
        'callback' => '_update_blog_post_checkboxes',
        'wrapper' => 'cgov-edit-blog-topics-wrapper',
        'event' => 'change',
        'method' => 'replace',
      ];

      $series_id = $form_state->getValue("field_blog_series");
      $blog_manager = \Drupal::service('cgov_blog.blog_manager');
      // When creating a translation form state does not have the series
      // information yet.
      if ($series_id == NULL) {
        $series_id = $form['field_blog_series']['widget']['#default_value'];
        $series_nid = $series_id[0];
      }
      else {
        $series_nid = $series_id[0]['target_id'];
      }

      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $terms = $blog_manager->getTopicsBySeriesId($series_nid, $langcode);
      $term_names = [];
      foreach ($terms as $term) {
        $term_names[$term->id()] = $term->getTranslation($langcode)->getName();
      }
      $form['field_blog_topics']['widget']['#options'] = $term_names;
    }
    else {
      // Editing a published node. Restrict to series topics.
      $series_id = $form['field_blog_series']['widget']['#default_value'];
      $blog_manager = \Drupal::service('cgov_blog.blog_manager');
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $terms = $blog_manager->getTopicsBySeriesId($series_id, $langcode);
      $term_names = [];
      foreach ($terms as $term) {
        $term_names[$term->id()] = $term->getTranslation($langcode)->getName();
      }
      $form['field_blog_topics']['widget']['#options'] = $term_names;
      $form['field_blog_series']['#disabled'] = TRUE;
    }
    // Hide the label when options are empty.
    if (count($form['field_blog_topics']['widget']['#options']) == 0) {
      $form['field_blog_topics']['#attributes']['class'][] = "hidden";
    }
  }
  // Set field properties for Blog Series.
  if ($form_id == 'node_cgov_blog_series_form' || $form_id == 'node_cgov_blog_series_edit_form') {
    // Draw the custom description for the Feedburner field only.
    $description = $form['field_feedburner_url']['widget']['#description'];
    $form['field_feedburner_url']['widget'][0]['uri']['#description'] = $description;
  }

}

/**
 * Custom callback for updating blog post topic checkboxes.
 */
function _update_blog_post_checkboxes($form, &$form_state) {
  // Returns the form element for replacing.
  return $form['field_blog_topics'];
}

/**
 * Implements hook_views_pre_view().
 */
function cgov_blog_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  // If this is a list in a Blog Series, use 'items per page' field.
  if ($view->id() == 'cgov_block_blog_posts') {
    $node = Drupal::entityTypeManager()->getStorage('node')->load((int) $args[0]);
    if (isset($node) && $node->bundle() == 'cgov_blog_series' && isset($node->field_num_display_posts)) {
      $view->setItemsPerPage($node->field_num_display_posts->value);
    }
  }

  // Allow replacement of contextual filters arguments.
  // Can use ?series=cancer-currents&topic=clinical-trial-results .
  if ($view->id() == 'blog_rss' || $view->id() == 'cgov_block_blog_posts') {
    $series = \Drupal::request()->query->get('series');
    $topic = \Drupal::request()->query->get('topic');

    // Convert BlogSeries.Shortname to ID.
    if ($series && !is_numeric($series) && $series != 'all') {
      $nodes = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadByProperties(
            ['field_blog_series_shortname' => $series]
        );
      // Get first array key.
      reset($nodes);
      $nid = key($nodes);
      // Store NID as the first contextual filter argument.
      $view->args[0] = (int) $nid;
    }

    // Convert BlogTopic.PrettyUrl to ID.
    if ($topic && !is_numeric($topic) && $topic != 'all') {
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(
            ['field_topic_pretty_url' => $topic]
        );
      // Get first array key.
      reset($terms);
      $tid = key($terms);
      // Store NID as the first contextual filter argument.
      $view->args[1] = (int) $tid;
    }

  }
}

/**
 * Check if the current form is in the draft or review state.
 */
function _is_selectable(array $form) {
  $curr_state = $form['moderation_state']['widget'][0]['state']['#default_value'];
  $selectable = ($curr_state == 'draft' || $curr_state == 'review') ? TRUE : FALSE;
  return $selectable;
}

/**
 * Preprocess function for block templates.
 */
function cgov_blog_preprocess_block(&$variables) {
  /*
   * Make changes to the breadcrumb block. If the block is of type
   * 'cgov_breadcrumb'and the URL contains valid query parameters
   * and the content type is Blog Series, add the current,
   * translated series link to the breadcrumb render array.
   */
  if ($variables['plugin_id'] == 'cgov_breadcrumb') {

    // Year and topic are evaluated for presence, but are not output;
    // there is therefore no need to sanitize them.
    $year = \Drupal::request()->query->get('year');
    $topic = \Drupal::request()->query->get('topic');


    // Proceed only if the view contains query params.
    if (!empty($topic) || !empty($year)) {
      $node = \Drupal::routeMatch()->getParameter('node');

      // If Blog Series content type, add nav link for the current language.
      if (isset($node) && $node instanceof NodeInterface && $node->bundle() === 'cgov_blog_series') {
        $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
        if ($node->hasTranslation($lang)) {
          $node = $node->getTranslation($lang);
        }
        $section = $node->get('field_site_section')->entity;
        $label = $section->field_navigation_label->value ?? $section->label();
        $variables['content']['breadcrumbs'][] = [
          'href' => $node->toUrl()->toString(),
          'label' => $label,
        ];
      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function cgov_blog_taxonomy_term_update($term_entity) {
  /* When taxonomy term for blog categories is updated invalidate the
   *  corresponding blog series page.
   */
  if ($term_entity->bundle() === "cgov_blog_topics") {
    $owner_blog = $term_entity->field_owner_blog;
    // Invalidate the cache tag for blog series node.
    if ($owner_blog->target_id > 0) {
      Cache::invalidateTags(['node:' . $owner_blog->target_id]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function cgov_blog_theme($existing, $type, $theme, $path) {
  return [
    'cgov_blocks_blog_categories' => [
      'variables' => [
        'rows' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_update().
 */
function cgov_blog_entity_update($entity) {
  // Verify that the node type is blog post.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === "cgov_blog_post") {
    // Get the blog series nid and invalidate cache tag.
    $current_entity_lang = $entity->get('langcode')->value;
    $translated_entity = $entity->getTranslation($current_entity_lang);
    $current_state = $translated_entity->get('moderation_state')->value;
    $blog_series_target_id = $translated_entity->get("field_blog_series")->target_id;
    if ($current_state === "published" && $blog_series_target_id > 0) {
      Cache::invalidateTags(['node:' . $blog_series_target_id]);
    }
  }
}

/**
 * Implments hook_language_switch_links_alter
 *
 * Makes sure that the correct 'field_topic_pretty_url' is being
 * assigned to the translation of the topic.
 */
function cgov_blog_language_switch_links_alter(array &$links, $type, Url $url) {
  if ($type !== 'language_content' || $url->getRouteName() !== 'entity.node.canonical') {
    return;
  }

  $current_node = \Drupal::routeMatch()->getParameter('node');
  if ($current_node->bundle() !== 'cgov_blog_series') {
    return;
  }

  $langcode = array_key_first($links);
  if (isset($links[$langcode]["query"]["topic"])) {
    $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

    // Using the field_topic_pretty_url on the query topic on $links, we can get
    // the taxonomy term.
    $tids = $term_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('vid', 'cgov_blog_topics')
      ->condition('field_owner_blog.target_id', $current_node->id())
      ->condition('field_topic_pretty_url', $links[$langcode]["query"]["topic"])
      ->execute();
    if (!empty($tids)) {
      $term = $term_storage->load(array_pop($tids));
      if ($term instanceof Term && $term->hasTranslation($langcode)) {
        $links[$langcode]["query"]["topic"] = $term->getTranslation($langcode)->get('field_topic_pretty_url')->value;
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure our language_switch_links_alter comes at the very end of the
 * implementation list.
 */
function cgov_blog_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'language_switch_links_alter') {
    $group = $implementations['cgov_blog'];
    unset($implementations['cgov_blog']);
    $implementations['cgov_blog'] = $group;
  }
}


/**
 * Implements hook_node_access().
 *
 * Prevent Deletion of Blog series if tagged in blog post.
 */
function cgov_blog_node_access($entity, $operation, $account) {
  if ($entity->bundle() === 'cgov_blog_series' && $operation === 'delete') {
    // Check if blog series tagged in blog post based on langcode.
    $query = \Drupal::entityQuery('node')
      ->condition('field_blog_series', $entity->nid->value)
      ->condition('type', 'cgov_blog_post')
      ->condition('langcode', $entity->langcode->value)
      ->accessCheck(FALSE);
    $result = $query->execute();
    if (!empty($result) && count($result) > 0) {
      return AccessResult::forbidden();
    }
  }
  // If the operation is not delete, return neutral to let other modules decide.
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function cgov_blog_node_delete($entity) {
  // Verify that the node type is blog post.
  if ($entity->bundle() === "cgov_blog_post") {
    // Get the blog series nid and invalidate cache tag.
    $current_entity_lang = $entity->langcode->value;
    $translated_entity = $entity->getTranslation($current_entity_lang);
    $blog_series_target_id = $translated_entity->field_blog_series->target_id;
    if (!empty($blog_series_target_id)) {
      Cache::invalidateTags(['node:' . $blog_series_target_id]);
    }
  }
}
