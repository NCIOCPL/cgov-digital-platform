<?php

/**
 * @file
 * Contains the cgov_file functions.
 */

use Drupal\cgov_core\CgovCoreTools;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\FileInterface;

/**
 * Implements hook_module_implements_alter() for form_alter.
 *
 * We need our form_alter to run after content_moderation's.
 */
function cgov_file_module_implements_alter(array &$implementations, string $hook) {
  if ($hook === 'form_alter') {
    $group = $implementations['cgov_file'];
    unset($implementations['cgov_file']);
    $implementations['cgov_file'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function cgov_file_form_alter(&$form, FormStateInterface &$form_state, string $form_id) {
  if ($form_id != 'media_cgov_file_add_form' && $form_id != 'media_cgov_file_edit_form') {
    return;
  }

  $form['field_media_file']['widget'][0]['#upload_validators']['FileExtension'] = "";
  $form['field_media_file']['widget'][0]['#upload_validators']['_cgov_file_validate'] = [];

  // Add our media submitter for images and contextual images.
  $form['actions']['submit']['#submit'][] = [CgovCoreTools::class, 'mediaFormSubmitter'];
}

/**
 * Validate the file against our own requirements.
 *
 * This should be used to do things like blacklisting files.
 *
 * @param \Drupal\file\FileInterface $file
 *   A file entity.
 *
 * @return array
 *   An empty array if the file is allowed or an array containing an
 *   error message if it's not.
 *
 * @see hook_file_validate()
 */
function _cgov_file_validate(FileInterface $file) {
  // @todo Reject any files we do not like.
  return [];
}
