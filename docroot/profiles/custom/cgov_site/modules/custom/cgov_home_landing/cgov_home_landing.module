<?php

/**
 * @file
 * Contains cgov_home_landing.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;

 /**
  * Implements hook_field_widget_single_element_form_alter().
  *
  * Limits allowed text formats using the cgov_core form_tools service.
  */
function cgov_home_landing_field_widget_single_element_form_alter(&$element, $form_state, $context) {
  // Makes autocomplete do nothing
  if (
    array_key_exists('#paragraph_type', $element) &&
    ($element['#paragraph_type'] == 'ncids_promo_block_external')
  ) {
    // Make the autocomplete do nothing.
    $element['subform']['field_featured_url']['widget'][0]['uri']['#process'] = NULL;
  }
  // Makes autocomplete do nothing for link button external
  // used in guide cards and cta strip
  if (
    array_key_exists('#paragraph_type', $element) &&
    ($element['#paragraph_type'] == 'ncids_link_button_external')
  ) {
    $element['subform']['field_external_link']['widget'][0]['uri']['#process'] = NULL;
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * We need to filter out the paragraph list items that have no links.
 * They can have no link because:
 *   A) A content editor did not add a link to the list item.
 *   B) An anon user is view the page and the link is unpublished.
 *   C) Migrate entered a target_id, but it points to non-existant content.
 */
function cgov_home_landing_paragraph_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $bundle = $entity->bundle();

  if ($bundle === 'ncids_promo_block_internal' && $operation === 'view') {
    return \Drupal::service('cgov_core.tools')->filterAccessForDependantEntity($entity, 'field_featured_item');
  }

  if ($bundle === 'ncids_link_button_internal' && $operation === 'view') {
    return \Drupal::service('cgov_core.tools')->filterAccessForDependantEntity($entity, 'field_internal_link');
  }

  if ($bundle === 'ncids_inline_video' && $operation === 'view') {
    return \Drupal::service('cgov_core.tools')->filterAccessForDependantEntity($entity, 'field_featured_video');
  }

  // We have no skin in the game.
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Creates a group to be added in the advanced section.
 * We are then able to add the additional library field to the group.
 */
function cgov_home_landing_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['additional_library'] = [
    '#type' => 'details',
    '#title' => 'Additional Front-End Library',
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['node-form-options']
    ],
    '#attached' => [
      'library' => ['node/drupal.node'],
    ],
    '#weight' => 100,
    '#optional' => TRUE,
    '#open' => FALSE,
  ];

  $form['field_additional_library']['#group'] = 'additional_library';

  return $form;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * This changes the view mode of the image for
 * ncids_image so it renders with the proper aspect ratio.
 */
function cgov_home_landing_paragraph_view(array &$build, ParagraphInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $bundle = $entity->bundle();
  if ($bundle === 'ncids_image') {
    $crop_display = $entity->field_ncids_img_para_ratio->value;
    // Only rebuild the items if there are some.
    if (
      array_key_exists('#items', $build['field_override_image_promotional']) &&
      (count($build['field_override_image_promotional']['#items']) > 0)
    ) {
      $build['field_override_image_promotional'] = $build['field_override_image_promotional']['#items']->view([
        'type' => 'entity_reference_entity_view',
        'settings' => [
          'view_mode' => $crop_display,
        ],
      ]);
    }
  }
}
