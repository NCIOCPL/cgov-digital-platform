<?php

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;

/**
 * @file
 * Contains cgov_home_landing.install.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function cgov_home_landing_install() {
  // Get our helper.
  $siteHelper = \Drupal::service('cgov_core.tools');

  // Add content type permissions.
  // Home and Landing.
  $siteHelper->addContentTypePermissions('cgov_home_landing', ['content_author']);

  // Mini Landing.
  $siteHelper->addContentTypePermissions('cgov_mini_landing', ['content_author']);

}

/**
 * Update for v2.9.0 to fix field_button_text length.
 */
function cgov_home_landing_update_8001() {

  // Make the database column bigger.
  $database = \Drupal::database();
  $database->query("ALTER TABLE paragraph__field_button_text MODIFY field_button_text_value VARCHAR(100)");
  $database->query("ALTER TABLE paragraph_revision__field_button_text MODIFY field_button_text_value VARCHAR(100)");

  // Modify the schema.
  $storage_key = 'paragraph.field_schema_data.field_button_text';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['paragraph__field_button_text']['fields']['field_button_text_value']['length'] = 100;
  $field_schema['paragraph_revision__field_button_text']['fields']['field_button_text_value']['length'] = 100;
  $storage_schema->set($storage_key, $field_schema);

  // Update field configuration.
  $config = \Drupal::configFactory()
    ->getEditable('field.storage.paragraph.field_button_text');
  $config->set('settings.max_length', 100);
  $config->save(TRUE);

  // Update field storage configuration.
  FieldStorageConfig::loadByName('paragraph', 'field_button_text')->save();
}

/**
 * Updates default value for field_mlp_page_style.
 */
function cgov_home_landing_update_8002() {

  // Import the feature to get the field_mlp_page_style.
  $features_mgr = \Drupal::service('features.manager');
  $assigner = \Drupal::service('features_assigner');
  $assigner->assignConfigPackages();
  $features_mgr->import(['cgov_home_landing']);

  // Make sure software querying the field doesn't get back a NULL.
  $db = \Drupal::database();
  $bundle = 'cgov_mini_landing';
  $fields = [
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'langcode',
    'delta',
    'field_mlp_page_style_value',
  ];

  // Now we are going to get the revisions we need to add the
  // default field_mlp_page_style to.
  $prefixes = ['node', 'node_revision'];
  foreach ($prefixes as $prefix) {
    $page_style_table = "{$prefix}__field_mlp_page_style";
    $browser_title_table = "{$prefix}__field_browser_title";

    // Step 1: Get all the node/revision records that have a value set.
    $results = $db->select($page_style_table, 't')
      ->fields('t', ['entity_id', 'revision_id', 'langcode'])
      ->condition('bundle', $bundle)
      ->condition('deleted', 0)
      ->distinct()
      ->execute();
    $found = [];
    foreach ($results as $result) {
      $key = $result->entity_id . '|' . $result->revision_id . '|' . $result->langcode;
      $found[$key] = $key;
    }

    // Step 2: Figure out what node/revision do not have the page style value set.
    // We do this by getting all the node/revision records that don't have a
    // value set. The Browser Title is old and required, so all revisions of a
    // a MLP should have a record in the table.
    $results = $db->select($browser_title_table, 't')
      ->fields('t', ['entity_id', 'revision_id', 'langcode'])
      ->condition('bundle', $bundle)
      ->condition('deleted', 0)
      ->distinct()
      ->execute();
    $records = [];
    foreach ($results as $result) {
      $key = $result->entity_id . '|' . $result->revision_id . '|' . $result->langcode;
      if (!array_key_exists($key, $found)) {
        // This entity/revision/langcode does not have a value set, so let's set one.
        $records[] = [
          'bundle' => $bundle,
          'deleted' => 0,
          'entity_id' => $result->entity_id,
          'revision_id' => $result->revision_id,
          'langcode' => $result->langcode,
          'delta' => 0,
          'field_mlp_page_style_value' => 'standard',
        ];
      }
    }

    // Insert all the records we need to add.
    $insert = $db->insert($page_style_table)->fields($fields);
    foreach ($records as $record) {
      $insert->values($record);
    }
    $insert->execute();
    $count = count($records);
    \Drupal::logger($bundle)->notice("Created $count rows in $page_style_table.");
  }
}
