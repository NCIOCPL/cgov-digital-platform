<?php

/**
 * @file
 * Contains cgov_embedded_block.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_form_alter().
 *
 * This handles all block_content forms, which each have a unique
 * ID based on the bundle name. Some logic borrowed from entity_redirect.
 */
function cgov_embedded_block_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  // Make sure we are a block content form.
  $isMatch = preg_match('/^block_content_/', $form_id, $match);
  if (!$isMatch) {
    return;
  }

  // The following should pass if we are a block_content form.
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  if (!is_a($form_object, '\Drupal\block_content\BlockContentForm')) {
    return;
  }

  $entity = $form_object->getEntity();

  // You can always create a new block config by adding it to block layout,
  // so for our system, we will never create the block after the fact.
  if ($entity->isNew()) {
    $form['actions']['submit']['#submit'][] = '_cgov_embedded_block_handle_new';
  }

}

/**
 * Submit function to handle the redirection per entity create/edit action.
 */
function _cgov_embedded_block_handle_new($form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();
  // We should not add the block, instead go to listing page.
  $form_state->setRedirectUrl($entity->toUrl('collection'));
}

/*--------------------------------------------------
 * Add theming hints to block_content entities.
 *
 * Borrowed from
 * https://github.com/swentel/block_content_template.
 *---------------------------------------------------*/

/**
 * Implements hook_theme().
 *
 * Registers the missing theme implementation for block_content.
 * This indicates how the build element should be rendered.
 */
function cgov_embedded_block_theme() {
  return [
    'block_content' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for block_content.
 */
function cgov_embedded_block_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Let's always add our theme implementation to a block_content build object.
  $build['#theme'] = 'block_content';
}

/**
 * Preprocess function for block content template.
 */
function template_preprocess_block_content(&$variables) {
  $content = [];

  // Copy out the render elements into the context object.
  $elements = $variables['elements'];
  foreach (Element::children($elements) as $key) {
    $content[$key] = $elements[$key];
  }
  $variables['content'] = $content;

  // Make the block_description optionally available as {{ block_description }}
  // in templates.
  $block = $variables['elements']['#block_content'];
  $block_description = $block->label();
  $variables['block_description'] = $block_description;

  // Remove quick edit as it doesn't make sense here. It also points to the view
  // for instance, which doesn't make sense at all.
  if (isset($variables['attributes']['data-quickedit-entity-id'])) {
    unset($variables['attributes']['data-quickedit-entity-id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Provide suggestions on how to render the block_content.
 */
function cgov_embedded_block_theme_suggestions_block_content(array $variables) {
  $suggestions = [];
  $block_content = $variables['elements']['#block_content'];

  $suggestions[] = 'block_content__' . $block_content->bundle();
  $suggestions[] = 'block_content__' . $block_content->bundle() . '__' . $variables['elements']['#view_mode'];
  $suggestions[] = 'block_content__' . $block_content->id();

  return $suggestions;
}
