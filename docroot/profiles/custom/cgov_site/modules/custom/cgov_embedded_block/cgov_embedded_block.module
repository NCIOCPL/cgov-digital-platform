<?php

/**
 * @file
 * Contains cgov_embedded_block.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/*--------------------------------------------------
 * Add theming hints to block_content entities.
 *
 * Borrowed from
 * https://github.com/swentel/block_content_template.
 *---------------------------------------------------*/

/**
 * Implements hook_form_alter().
 *
 * Remove the "Save and Configure" button from all varieties of block content.
 *
 * There's a separate condition in block_content/src/BlockContentForm.php where
 * a `theme` query parameter changes the label on the `submit` action to be
 * "Save and Configure", but we don't know what triggers that and are will
 * leave that action unaltered.
 */
function cgov_embedded_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form['#id'] === 'views-exposed-form-block-content-browser-entity-browser-1') {
    // Target the specific exposed filter field.
    $filter_field_name = 'type';
    if (isset($form[$filter_field_name])) {
      if (isset($form[$filter_field_name]['#options'])) {
        // Define the options you want to remove.
        $options_to_remove = ['cgov_image_carousel', 'cgov_video_carousel'];
        foreach ($options_to_remove as $value) {
          unset($form[$filter_field_name]['#options'][$value]);
        }
      }
    }
  }
  // Test that this is a block content form.
  if (!str_starts_with($form_id, 'block_content_')) {
    return;
  }

  // Make doubly sure this is a block_content form.
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  if (!is_a($form_object, '\Drupal\block_content\BlockContentForm')) {
    return;
  }

  if (isset($form['actions']) && isset($form['actions']['configure_block'])) {
    unset($form['actions']['configure_block']);
  }
}

/**
 * Implements hook_theme().
 *
 * Registers the missing theme implementation for block_content.
 * This indicates how the build element should be rendered.
 */
function cgov_embedded_block_theme() {
  return [
    'block_content' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for block_content.
 */
function cgov_embedded_block_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Let's always add our theme implementation to a block_content build object.
  $build['#theme'] = 'block_content';
}

/**
 * Preprocess function for block content template.
 */
function template_preprocess_block_content(&$variables) {
  $content = [];

  // Copy out the render elements into the context object.
  $elements = $variables['elements'];
  foreach (Element::children($elements) as $key) {
    $content[$key] = $elements[$key];
  }
  $variables['content'] = $content;

  // Make the block_description optionally available as {{ block_description }}
  // in templates.
  $block = $variables['elements']['#block_content'];
  $variables['block_content'] = $block;
  $block_description = $block->label();
  $variables['block_description'] = $block_description;

  // Remove quick edit as it doesn't make sense here. It also points to the view
  // for instance, which doesn't make sense at all.
  if (isset($variables['attributes']['data-quickedit-entity-id'])) {
    unset($variables['attributes']['data-quickedit-entity-id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Provide suggestions on how to render the block_content.
 */
function cgov_embedded_block_theme_suggestions_block_content(array $variables) {
  $suggestions = [];
  $block_content = $variables['elements']['#block_content'];

  $suggestions[] = 'block_content__' . $block_content->bundle();
  $suggestions[] = 'block_content__' . $block_content->bundle() . '__' . $variables['elements']['#view_mode'];
  $suggestions[] = 'block_content__' . $block_content->id();

  return $suggestions;
}

/**
 * Implements hook_views_query_alter().
 */
function cgov_embedded_block_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Check that we are altering the correct view.
  if ($view->id() == 'block_content_browser') {
    if ($query instanceof Sql) {
      $field_name = 'block_content_field_data.type';
      $excluded_values = ['cgov_image_carousel', 'cgov_video_carousel'];
      $query->addWhere(0, $field_name, $excluded_values, 'NOT IN');
    }
  }
}
