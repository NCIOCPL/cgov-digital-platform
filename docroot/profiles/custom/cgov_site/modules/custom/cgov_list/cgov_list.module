<?php

/**
 * @file
 * Contains cgov_list.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * We need to filter out the paragraph list items that have no links.
 * They can have no link because:
 *   A) A content editor did not add a link to the list item.
 *   B) An anon user is view the page and the link is unpublished.
 *   C) Migrate entered a target_id, but it points to non-existant content.
 */
function cgov_list_paragraph_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $bundle = $entity->bundle();

  if ($bundle === 'cgov_internal_link' && $operation === 'view') {
    return \Drupal::service('cgov_core.tools')->filterAccessForDependantEntity($entity, 'field_internal_link');
  }

  if ($bundle === 'cgov_media_link' && $operation === 'view') {
    return \Drupal::service('cgov_core.tools')->filterAccessForDependantEntity($entity, 'field_media_link');
  }

  // We have no skin in the game.
  return AccessResult::neutral();
}

/**
 * Format bytes string helper.
 *
 * From https://stackoverflow.com/a/2510459.
 *
 * @param int $bytes
 *   Number of bytes.
 * @param int $precision
 *   Precision.
 *
 * @return string
 *   Formatted string.
 */
function format_bytes(int $bytes, int $precision = 2) {
  $units = ['B', 'KB', 'MB', 'GB', 'TB'];

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);
  $bytes /= pow(1024, $pow);

  return round($bytes, $precision) . ' ' . $units[$pow];
};

/**
 * Set allowed values for the list item styling.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function cgov_list_allowed_values_function(
  FieldStorageConfig $definition,
  ContentEntityInterface $entity = NULL,
  $cacheable
) {
  // This initially queried the view modes for paragraphs; however,
  // managed lists should only use a subset of the list item display
  // modes. So we are keeping it like this if the future requires it,
  // also it is much easier to change post go-live.
  $options = [
    'list_item_title' => 'Compact',
    'list_item_title_desc' => 'Title and Description',
    'list_item_title_desc_image' => 'Title, Description, and Image',
      'list_item_title_desc_image_alternating' => 'Title, Description, and Alternating Image',
  ];

  return $options;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * This replaces the field_list_items build entry with one that uses
 * the field_list_item_style setting. This allows editors to select
 * which style of rendering as content.
 *
 * This may be better as a field formatter.
 */
function cgov_list_paragraph_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $bundle = $entity->bundle();
  if ($bundle === 'cgov_list') {

    $list_item_mode = $entity->field_list_item_style->value;

    // Only rebuild the items if there are some.
    if (
      array_key_exists('#items', $build['field_list_items']) &&
      (count($build['field_list_items']['#items']) > 0)
    ) {
      $build['field_list_items'] = $build['field_list_items']['#items']->view([
        'type' => 'entity_reference_revisions_entity_view',
        'settings' => [
          'view_mode' => $list_item_mode,
        ],
      ]);
    }
  }

  // Infographics, Files, and Videos are going to be allowed as list items
  // throughout the site. In order to reuse the list_item macros and templates
  // as much as possible, we are going to extract and flatten the pertinent data
  // for conditional formatting here. Translations will be done in templates.
  if ($bundle === 'cgov_media_link') {
    $media = $entity->field_media_link->entity;
    $mediaBundle = $media->bundle();

    if ($mediaBundle === 'cgov_infographic') {
      $build['media_link_type'] = [
        '#plain_text' => 'Infographic',
      ];
    }

    if ($mediaBundle === 'cgov_video') {
      $build['media_link_type'] = [
        '#plain_text' => 'Video',
      ];
    }

    if ($mediaBundle === 'cgov_file') {
      $build['media_link_type'] = [
        '#plain_text' => 'File',
      ];
      $file = $media->field_media_file->entity;
      // ##### Format file size.
      $fileSize = (int) $file->getSize();
      $formattedFileSize = format_bytes($fileSize, 0);
      $build['media_link_file_size'] = [
        '#plain_text' => $formattedFileSize,
      ];

      // ###### Add File Type Specific Classes.
      // There is a method for getting the mimetype directly.
      // However, to avoid potential issues with mimetypes being incorrect
      // or granular requirements based on file extensions, we will manually
      // sniff the extension type. This should be deterministic because the
      // field has a validator that whitelists extensions explicitly.
      // TODO: (Someday)Clean this crap up (better classnames and more standard
      // (is it the extension or the type for example)).
      $extensionsClassMap = [
        'pdf' => 'pdf',
        'doc' => 'word',
        'docx' => 'word',
        'xls' => 'excel',
        'xlsx' => 'excel',
        'ppt' => 'ppt',
        'pptx' => 'ppt',
        'mobi' => 'ebook',
        'epub' => 'ebook',
        'exe' => 'exe',
        'txt' => 'txt',
      ];
      $fileName = $file->getFilename();
      $fileExtension = pathinfo($fileName, PATHINFO_EXTENSION);
      $extensionClass = $extensionsClassMap[$fileExtension] ?? 'unknown';
      $build['media_link_file_type'] = [
        '#plain_text' => $extensionClass,
      ];
      $build['media_link_file_extension'] = [
        '#plain_text' => $fileExtension,
      ];
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function cgov_list_field_widget_form_alter(&$element, &$form_state, $context) {
  if (
    array_key_exists('#paragraph_type', $element) &&
    $element['#paragraph_type'] == 'cgov_external_link'
  ) {
    // Make the autocomplete do nothing.
    $element['subform']['field_external_link']['widget'][0]['uri']['#process'] = NULL;
  }
}
