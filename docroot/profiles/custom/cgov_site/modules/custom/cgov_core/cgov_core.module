<?php

/**
 * @file
 * Contains cgov_core.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_translation_create().
 *
 * Corrects the initial moderation state for a new translation.
 * The hook is called when a new translation is created, giving us
 * the opportunity to modify the object for that translation. We're
 * setting the initial moderation state for the translation, and
 * that in turn is used by the logic which determines which states
 * are available when the new translation is save. The bug for which
 * this workaround is implemented just copies the initial state from
 * the current state of the original language. When the Drupal core
 * team fixes https://www.drupal.org/project/drupal/issues/3021222,
 * this workaround can be removed.
 *
 * See https://github.com/NCIOCPL/cgov-digital-platform/issues/371
 * for more details about the bug and exactly what the software is
 * doing.
 *
 * @var Drupal\Core\Entity\EntityInterface $translation
 *   The entity object for the new translation of a content object.
 */
function cgov_core_entity_translation_create(EntityInterface $translation) {
  $serviceName = 'content_moderation.moderation_information';
  $moderationInformation = \Drupal::service($serviceName);
  if ($moderationInformation->isModeratedEntity($translation)) {
    $workflow = $moderationInformation->getWorkflowForEntity($translation);
    $configuration = $workflow->getTypePlugin()->getConfiguration();
    $state = 'draft';
    if (!empty($configuration['default_moderation_state'])) {
      $state = $configuration['default_moderation_state'];
    }
    $translation->moderation_state = $state;
  }
}

/**
 * Implements hook_node_access().
 */
function cgov_core_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $publish_permission = 'use editorial_workflow transition publish';
  $reason = 'Authors not allowed to delete content which has ever been published';
  switch ($op) {
    case 'delete':
      if (!$account->hasPermission($publish_permission)) {
        $query = \Drupal::database()->select('node_field_revision', 'r');
        $query->condition('r.status', 1);
        $query->condition('r.nid', $node->id());
        if ($query->countQuery()->execute()->fetchField() > 0) {
          return AccessResult::forbidden($reason);
        }
      }
      break;

    default:
      return AccessResult::neutral();
  }
}
