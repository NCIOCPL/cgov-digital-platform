<?php

/**
 * @file
 * Contains cgov_core.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_entity_translation_create().
 *
 * Corrects the initial moderation state for a new translation.
 * The hook is called when a new translation is created, giving us
 * the opportunity to modify the object for that translation. We're
 * setting the initial moderation state for the translation, and
 * that in turn is used by the logic which determines which states
 * are available when the new translation is save. The bug for which
 * this workaround is implemented just copies the initial state from
 * the current state of the original language. When the Drupal core
 * team fixes https://www.drupal.org/project/drupal/issues/3021222,
 * this workaround can be removed.
 *
 * See https://github.com/NCIOCPL/cgov-digital-platform/issues/371
 * for more details about the bug and exactly what the software is
 * doing.
 *
 * @var Drupal\Core\Entity\EntityInterface $translation
 *   The entity object for the new translation of a content object.
 */
function cgov_core_entity_translation_create(EntityInterface $translation) {
  $serviceName = 'content_moderation.moderation_information';
  $moderationInformation = \Drupal::service($serviceName);
  if ($moderationInformation->isModeratedEntity($translation)) {
    $workflow = $moderationInformation->getWorkflowForEntity($translation);
    $configuration = $workflow->getTypePlugin()->getConfiguration();
    $state = 'draft';
    if (!empty($configuration['default_moderation_state'])) {
      $state = $configuration['default_moderation_state'];
    }
    $translation->moderation_state = $state;
  }
}

/**
 * Implements hook_block_build_alter().
 *
 * Set cache context of blocks that vary by url, user, etc.
 */
function cgov_core_block_build_alter(array &$build, BlockPluginInterface $block) {
  // Get name of block's label (will be of
  // originally-created block if translations exist).
  $block_label = $block->getPluginDefinition()['admin_label'];

  // Add the 'url' cache context to page-specific blocks.
  if (strpos($block_label, 'Public Use') === 0) {
    $build['#cache']['contexts'][] = 'url';

    // Add the 'node' cache context so node updates are caught.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'entity.node.canonical') {
      // Store the NID of the current node.
      $nid = \Drupal::routeMatch()->getRawParameter('node');
      $build['#cache']['tags'][] = "node:$nid";
    }
    // If not the node view page (eg: Preview or Latest) don't cache block.
    else {
      $build['#cache']['max_age'] = 0;
    }
  }
}

/**
 * Implements hook_ENTITY_insert().
 *
 * Perform any actions that are required when adding a new language.
 * During the install process, only EN is enabled, so use this hook
 * to add any other translations or other things needed by a new
 * language when it gets enabled.
 *
 * Adds new Public Use translation when a new language is installed.
 */
function cgov_core_configurable_language_insert($entity) {
  $public_use['es'] = <<<EOMarkup
<p><em>Si desea copiar algo de este texto, vea <a href="/espanol/politicas/derechos-de-autor-y-uso">Derechos de autor y uso de imágenes y contenido</a> sobre instrucciones de derechos de autor y permisos. En caso de reproducción digital permitida, por favor, dé crédito al Instituto Nacional del Cáncer como su creador, y enlace al producto original del NCI usando el título original del producto; por ejemplo,  “[current-page:title] publicada originalmente por el Instituto Nacional del Cáncer.”</em></p>
EOMarkup;

  $langcode = $entity->id();

  // If no translation defined, exit hook.
  if (!isset($public_use[$langcode])) {
    return;
  }

  // Get the existing English PublicUse block to add the translation.
  $query = \Drupal::entityQuery('block_content');
  $query->condition('info', 'Public Use')
    ->condition('langcode', 'en');
  $result = $query->execute();
  if (count($result)) {
    $eid = array_shift($result);
    $block = entity_load('block_content', $eid);
    $title = $block->info->value . " - " . $langcode;
    // Create translation if it doesn't already exist.
    if (!$block->hasTranslation($langcode)) {
      $block_translated = $block->addTranslation($langcode, [
        'id' => "public_use__$langcode",
        'info' => $title,
        'body' => ['value' => $public_use[$langcode], 'format' => 'full_html'],
      ]);
      $block_translated->save();
      drupal_set_message("Added Public Use block_content: $title");
    }
  }
}

/**
 * Implements hook_node_access().
 */
function cgov_core_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $publish_permission = 'use editorial_workflow transition publish';
  switch ($op) {

    // Currently we only have something to say about deletions.
    case 'delete':

      // Only weigh in for content controlled by `editorial_workflow`.
      $entityTypeManager = \Drupal::service('entity_type.manager');
      $workflows = $entityTypeManager->getStorage('workflow')->loadMultiple();
      $workflow = $workflows['editorial_workflow'];
      $typePlugin = $workflow->getTypePlugin();
      if (!$typePlugin->appliesToEntityTypeAndBundle('node', $node->bundle())) {
        break;
      }

      // Authors can only delete nodes in the `draft` state, and only if the
      // node has never been published.
      $state = $node->moderation_state->value;
      if (!$account->hasPermission($publish_permission)) {
        $reason = 'Authors not allowed to delete content ';
        if ($state !== 'draft') {
          $reason .= "in '$state' moderation state";
          return AccessResult::forbidden($reason);
        }
        $query = \Drupal::database()->select('node_field_revision', 'r');
        $query->condition('r.status', 1);
        $query->condition('r.nid', $node->id());
        if ($query->countQuery()->execute()->fetchField() > 0) {
          $reason .= 'which has ever been published';
          return AccessResult::forbidden($reason);
        }
      }
      else {

        // Editors can also delete nodes which are in the `archived` state.
        if ($state !== 'draft' && $state !== 'archived') {
          $reason = "Content in '$state' moderation state cannot be deleted";
          return AccessResult::forbidden($reason);
        }
      }
      break;

    // Let other modules weigh in for nodes whose deletion we haven't vetoed.
    default:
      return AccessResult::neutral();
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Validates that the PubMed ID Field on Citations
 * matches the required pattern.
 */
function cgov_core_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($bundle == 'cgov_citation') && !empty($fields['field_pubmed_id'])) {
    $fields['field_pubmed_id']->setPropertyConstraints('value', [
      'Regex' => [
        'pattern' => '/^[0-9]*$/',
        'message' => 'The PubMed ID field only accepts numbers.',
      ],
    ]
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Limits allowed text formats using the cgov_core form_tools service.
 */
function cgov_core_field_widget_form_alter(&$element, $form_state, $context) {
  // Maps field names to an array containing a single format.
  $map = [
    'field_citation_content' => ['streamlined'],
    'field_intro_text' => ['streamlined'],
    'field_caption' => ['simple'],
    'body' => ['full_html'],
  ];
  $formHelper = \Drupal::service('cgov_core.form_tools');
  $formHelper->allowTextFormats($map, $element, $context);
}

/**
 * Implements hook_entity_presave().
 *
 * When a user is initially created, default the preferred
 * language for the UI pages to English.
 */
function cgov_core_user_presave(EntityInterface $entity) {
  if ($entity->isNew()) {
    $entity->set('preferred_admin_langcode', 'en');
  }
}

/**
 * Implements hook_form_alter().
 *
 * We want to remove the 'Reset by Alphabetical'
 * form button on taxonomy tree forms.
 */
function cgov_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'taxonomy_overview_terms') {
    if (isset($form['actions']) && isset($form['actions']['reset_alphabetical'])) {
      unset($form['actions']['reset_alphabetical']);
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * Add attributes to media content types.
 */
function cgov_core_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  // If accessible text is available, add a link to an alternate version of the
  // page containing only the accessible text.
  // NOTE: $entity already reflects the current language, no need to switch
  // to another translation to check for availability.
  if ($entity->field_accessible_version != NULL &&
    (count($entity->field_accessible_version) > 0)) {

    // Set the longdesc attribute to a URL pointing to the infographic module's
    // route for outputing the long description.
    $args = ['media' => $entity->id()];

    // Find any field with a type of 'image' with the 'article' crop applied
    // and add the longdesc property to its attribute list.
    foreach ($build as $key => $properties) {
      if (substr($key, 0, 6) == 'field_' &&
        array_key_exists('#field_type', $properties)) {

        // Added if to prevent attempt at accessing the #field-type property if
        // it doesn't exist. (For whatever reason, evaluation doesn't seem to be
        // short-circuted when the other conditions are false.)
        if ($properties['#field_type'] == 'image' && $properties[0]["#image_style"] == 'cgov_article') {
          $build[$key][0]['#item_attributes']['longdesc'] =
            Url::fromRoute('cgov_core.long_description', $args)->toString();
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * Workaround for odd behavior of the `getTableJoin()` method of the
 * `HandlerBase` of the `views` module, which leaves us without a table
 * alias for the queries used for sorting and filtering by bundle name.
 * If you find yourself with too much time on your hands, you might want
 * to track down enough information to file a bug report against Drupal
 * core.
 */
function cgov_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $view_id = $view->id();
  if ($view_id === 'moderated_media') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] === '.bundle') {
          $condition['field'] = 'media.bundle';
        }
      }
    }
    foreach ($query->orderby as &$orderby) {
      if ($orderby['field'] === '.bundle') {
        $orderby['field'] = 'media.bundle';
      }
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function cgov_core_page_attachments_alter(array &$attachments) {
  $config = \Drupal::config('cgov_core.frontend_globals');
  $settings = $config->get('config_object');
  $attachments['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#value' => "window.CDEConfig = $settings;",
    ],
    'CDEConfig',
  ];
  $cache_tags = isset($attachments['#cache']['tags']) ? $attachments['#cache']['tags'] : [];
  $attachments['#cache']['tags'] = Cache::mergeTags($cache_tags, $config->getCacheTags());
}
