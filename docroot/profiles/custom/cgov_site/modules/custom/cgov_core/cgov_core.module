<?php

/**
 * @file
 * Contains cgov_core.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Cache\Cache;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Site\Settings;
use Drupal\redirect\Entity\Redirect;
use Drupal\Core\Language\Language;

/**
 * Implements hook_block_build_alter().
 *
 * Set cache context of blocks that vary by url, user, etc.
 */
function cgov_core_block_build_alter(array &$build, BlockPluginInterface $block) {
  // Get name of block's label (will be of
  // originally-created block if translations exist).
  $block_label = $block->getPluginDefinition()['admin_label'];

  // Add the 'url' cache context to page-specific blocks.
  if (strpos($block_label, 'Public Use') === 0) {
    $build['#cache']['contexts'][] = 'url';

    // Add the 'node' cache context so node updates are caught.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'entity.node.canonical') {
      // Store the NID of the current node.
      $nid = \Drupal::routeMatch()->getRawParameter('node');
      $build['#cache']['tags'][] = "node:$nid";
    }
    // If not the node view page (eg: Preview or Latest) don't cache block.
    else {
      $build['#cache']['max_age'] = 0;
    }
  }
}

/**
 * Implements hook_ENTITY_insert().
 *
 * Perform any actions that are required when adding a new language.
 * During the install process, only EN is enabled, so use this hook
 * to add any other translations or other things needed by a new
 * language when it gets enabled.
 *
 * Adds new Public Use translation when a new language is installed.
 */
function cgov_core_configurable_language_insert($entity) {
  $public_use['es'] = <<<EOMarkup
<p><em>Si desea copiar algo de este texto, vea <a href="/espanol/politicas/derechos-de-autor-y-uso">Derechos de autor y uso de imágenes y contenido</a> sobre instrucciones de derechos de autor y permisos. En caso de reproducción digital permitida, por favor, dé crédito al Instituto Nacional del Cáncer como su creador, y enlace al producto original del NCI usando el título original del producto; por ejemplo,  “[current-page:title] publicada originalmente por el Instituto Nacional del Cáncer.”</em></p>
EOMarkup;

  $langcode = $entity->id();

  // If no translation defined, exit hook.
  if (!isset($public_use[$langcode])) {
    return;
  }

  // Get the existing English PublicUse block to add the translation.
  $query = \Drupal::entityQuery('block_content');
  $query->condition('info', 'Public Use')
    ->condition('langcode', 'en');
  $query->accessCheck(TRUE);
  $result = $query->execute();
  if (count($result)) {
    $eid = array_shift($result);
    $block = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->load($eid);
    $title = $block->info->value . " - " . $langcode;
    // Create translation if it doesn't already exist.
    if (!$block->hasTranslation($langcode)) {
      $block_translated = $block->addTranslation($langcode, [
        'id' => "public_use__$langcode",
        'info' => $title,
        'body' => ['value' => $public_use[$langcode], 'format' => 'full_html'],
      ]);
      $block_translated->save();
      \Drupal::messenger()->addStatus("Added Public Use block_content: $title");
    }
  }
}

/**
 * Implements hook_node_access().
 */
function cgov_core_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $publish_permission = 'use editorial_workflow transition publish';
  switch ($op) {

    // Currently we only have something to say about deletions.
    case 'delete':

      // Only weigh in for content controlled by `editorial_workflow`.
      $entityTypeManager = \Drupal::service('entity_type.manager');
      $workflows = $entityTypeManager->getStorage('workflow')->loadMultiple();
      $workflow = $workflows['editorial_workflow'];
      $typePlugin = $workflow->getTypePlugin();
      if (!$typePlugin->appliesToEntityTypeAndBundle('node', $node->bundle())) {
        break;
      }

      // Authors can only delete nodes in the `draft` state, and only if the
      // node has never been published.
      $state = $node->moderation_state->value;
      if (!$account->hasPermission($publish_permission)) {
        $reason = 'Authors not allowed to delete content ';
        if ($state !== 'draft') {
          $reason .= "in '$state' moderation state";
          return AccessResult::forbidden($reason);
        }
        $query = \Drupal::database()->select('node_field_revision', 'r');
        $query->condition('r.status', 1);
        $query->condition('r.nid', $node->id());
        if ($query->countQuery()->execute()->fetchField() > 0) {
          $reason .= 'which has ever been published';
          return AccessResult::forbidden($reason);
        }
      }
      else {

        // Editors can also delete nodes which are in the `archived` state.
        if ($state !== 'draft' && $state !== 'archived') {
          $reason = "Content in '$state' moderation state cannot be deleted";
          return AccessResult::forbidden($reason);
        }
      }
      break;

    // Let other modules weigh in for nodes whose deletion we haven't vetoed.
    default:
      return AccessResult::neutral();
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Validates that the PubMed ID Field on Citations
 * matches the required pattern.
 */
function cgov_core_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($bundle == 'cgov_citation') && !empty($fields['field_pubmed_id'])) {
    $fields['field_pubmed_id']->setPropertyConstraints('value', [
      'Regex' => [
        'pattern' => '/^[0-9]*$/',
        'message' => 'The PubMed ID field only accepts numbers.',
      ],
    ]
    );
  }
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 *
 * Limits allowed text formats using the cgov_core form_tools service.
 */
function cgov_core_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Remove filter information junk.
  if (
    $element !== NULL &&
    array_key_exists('#type', $element) &&
    $element['#type'] === 'text_format'
  ) {
    $element['#after_build'][] = '__cgov_core_text_filter_modify';
  }
}

/**
 * Helper function for cgov_core_field_widget_single_element_form_alter.
 */
function __cgov_core_text_filter_modify($form_element) {
  /*
   * So a couple of notes:
   * 1. This gets fired twice for each element that is of text_format. The
   *    first time is without format, the second with. I cannot find a
   *    better way to handle this, and there are no hooks fired in the
   *    element class for the text_format.
   * 2. The unsets below don't care if those elements do not exist the
   *    first time.
   * 3. We cannot remove the whole 'format' element, because it stores the
   *    hidden input with the format that is to be used.
   */
  unset($form_element['format']['help']);
  unset($form_element['format']['guidelines']);
  unset($form_element['format']['#type']);
  unset($form_element['format']['#theme_wrappers']);
  return $form_element;
}

/**
 * Implements hook_entity_presave().
 *
 * When a user is initially created, default the preferred
 * language for the UI pages to English.
 */
function cgov_core_user_presave(EntityInterface $entity) {
  if ($entity->isNew() && empty($entity->preferred_admin_langcode->value)) {
    $entity->set('preferred_admin_langcode', 'en');
  }
  elseif ($entity->preferred_admin_langcode->value === 'no-preference') {
    // support the drush command(bulk-load-users), we use no-preference because
    // aLL new users on pre-save have a value for this field whether or not it is empty.
    $entity->set('preferred_admin_langcode', '');
  }
}

/**
 * Implements hook_form_alter().
 */
function cgov_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // We want to remove the 'Reset by Alphabetical' form button on taxonomy tree forms.
  if ($form_id === 'taxonomy_overview_terms') {
    if (isset($form['actions']) && isset($form['actions']['reset_alphabetical'])) {
      unset($form['actions']['reset_alphabetical']);
    }
  }

  if (strpos($form_id, 'taxonomy_term') !== FALSE && isset($form['tid']['#value'])) {
    $vocabs = ['cgov_cancer_center_types', 'cgov_cancer_center_regions', 'cgov_event_series', 'cgov_event_venues', 'cgov_biography_campuses', 'cgov_site_sections'];
    $vid = $form['vid']['#value'];
    if (in_array($vid, $vocabs)) {
      $references = getTermRefsFromField($form['tid']['#value'], $vid);
      if (count($references) > 0) {
        \Drupal::messenger()->addWarning('Taxonomy term cannot be deleted. The term is used in a published revision.');
      }
    }
  }
  // "administer permissions" is too much power for a user in production, but we
  // still need to be able to add users and grant them roles. This hooks into the
  // user form and allows users with the "edit user roles" permissions to be able
  // to grant those roles. See the user form code in core for more on how they
  // make the roles field.
  if ($form_id === 'user_form' || $form_id === 'user_register_form') {
    if (isset($form['account']['roles'])) {
      $user = \Drupal::currentUser();
      $form['account']['roles']['#access'] = $form['account']['roles']['#options'] &&
        ($user->hasPermission('administer permissions') || $user->hasPermission('edit user roles'));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 *
 * Add attributes to media content types.
 */
function cgov_core_media_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  // If accessible text is available, add a link to an alternate version of the
  // page containing only the accessible text.
  // NOTE: $entity already reflects the current language, no need to switch
  // to another translation to check for availability.
  if (isset($entity->field_accessible_version) &&
    (count($entity->field_accessible_version) > 0)) {

    // Set the longdesc attribute to a URL pointing to the infographic module's
    // route for outputing the long description.
    $args = ['media' => $entity->id()];

    // Find any field with a type of 'image' with the 'article' crop applied
    // and add the longdesc property to its attribute list.
    foreach ($build as $key => $properties) {
      if (substr($key, 0, 6) == 'field_' &&
        array_key_exists('#field_type', $properties)) {

        // Added if to prevent attempt at accessing the #field-type property if
        // it doesn't exist. (For whatever reason, evaluation doesn't seem to be
        // short-circuted when the other conditions are false.)
        if ($properties['#field_type'] == 'image' && isset($properties[0]["#image_style"]) && $properties[0]["#image_style"] == 'cgov_article') {
          $build[$key][0]['#item_attributes']['longdesc'] =
            Url::fromRoute('cgov_core.long_description', $args)->toString();
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * Workaround for odd behavior of the `getTableJoin()` method of the
 * `HandlerBase` of the `views` module, which leaves us without a table
 * alias for the queries used for sorting and filtering by bundle name.
 * If you find yourself with too much time on your hands, you might want
 * to track down enough information to file a bug report against Drupal
 * core.
 */
function cgov_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $view_id = $view->id();
  if ($view_id === 'moderated_media') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] === '.bundle') {
          $condition['field'] = 'media.bundle';
        }
      }
    }
    foreach ($query->orderby as &$orderby) {
      if ($orderby['field'] === '.bundle') {
        $orderby['field'] = 'media.bundle';
      }
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function cgov_core_page_attachments_alter(array &$attachments) {
  $config = \Drupal::config('cgov_core.frontend_globals');
  $settings = $config->get('config_object');
  $attachments['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#value' => "window.CDEConfig = $settings;",
      // Make sure this is the very first script block on the page.
      '#weight' => -100,
    ],
    'CDEConfig',
  ];
  $cache_tags = isset($attachments['#cache']['tags']) ? $attachments['#cache']['tags'] : [];
  $attachments['#cache']['tags'] = Cache::mergeTags($cache_tags, $config->getCacheTags());

  // Hack to remove the "ad" inserted by the responsive_favicons module.
  $headings = &$attachments['#attached']['html_head'];
  foreach($headings as &$element) {
    if($element[1] === 'responsive_favicons'){
      $element[0]['#attributes']['name'] = 'x-no-op';
      $element[0]['#attributes']['content'] = 'none';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * The entity embed module does not allow suggestions for the various display
 * modes. This has been ok, except for the fact that with inline images we
 * really do not want the container wrapper rendered.
 */
function cgov_core_theme_suggestions_entity_embed_container(array $variables) {
  $suggestions = [];

  $original_hook = $variables['theme_hook_original'];
  $display = $variables['element']['#attributes']['data-entity-embed-display'];
  if ($display) {
    $sugg = str_replace("view_mode:", "", $display);
    $suggestions[] = $original_hook . '__' . $sugg;
  }

  return $suggestions;
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * The default language switcher shows all links to content, including the
 * current language. It also does not care if there is no translation and
 * it does not care if the translated language has never been published.
 * We fix this, but still leverage the OOB language block.
 */
function cgov_core_language_switch_links_alter(array &$links, $type, Url $url) {
  $language_interface = \Drupal::languageManager()->getCurrentLanguage();

  // First remove the current language no matter what. This applies to all
  // links.
  unset($links[$language_interface->getId()]);

  // No links to check, we should exit.
  if (count(array_keys($links)) == 0) {
    return;
  }

  // Now is the current route a content entity?
  $entity = _cgov_core_get_curr_entity();
  if (!$entity) {
    // If this is not a content entity, then just turn off the toggles.
    $links = [];
    return;
  }

  // Get the language where there is a translated revision.
  // Note getTranslationLanguages returns interfaces and we
  // need the 2 char strings.
  $possible_langs = array_map(
    function ($lang) {
      return $lang->getId();
    },
    $entity->getTranslationLanguages(TRUE)
  );

  // There are no translations, remove links and exit.
  if (count($possible_langs) == 0) {
    $bad_langs = array_keys($links);
    foreach ($bad_langs as $lang) {
      unset($links[$lang]);
    }
    return;
  }

  // Get the list of languages that have not been translated at
  // all and remove them from the links.
  $proposed_langs = array_keys($links);
  $untranslated_langs = array_diff($proposed_langs, $possible_langs);
  foreach ($untranslated_langs as $lang) {
    unset($links[$lang]);
  }

  // Now for the remaining links, we need to check if the translation
  // has been published.
  $remaining_langs = array_keys($links);

  // There were no more links.
  if (count($remaining_langs) == 0) {
    return;
  }

  foreach ($remaining_langs as $lang) {
    $translation = $entity->getTranslation($lang);
    if (!$translation->isPublished()) {
      unset($links[$lang]);
    }
  }

}

/**
 * Gets the current entity if there is one.
 *
 * @return Drupal\Core\Entity\ContentEntityInterface
 *   The retrieved entity, or FALSE if none found.
 */
function _cgov_core_get_curr_entity() {
  $params = \Drupal::routeMatch()->getParameters()->all();
  foreach ($params as $param) {
    if (!is_object($param)) {
      continue;
    }

    $class = new \ReflectionClass($param);

    if (in_array('Drupal\Core\Entity\ContentEntityInterface', $class->getInterfaceNames())) {
      // If you find a ContentEntityInterface stop iterating and return it.
      return $param;
    }
  }
  return FALSE;
}

/**
 * Implements hook_moderation_sidebar_alter().
 *
 * We have strong opinions on what the sidebar should display and how it
 * should display them.
 * - This should never offer two ways to edit
 * - It should never show delete buttons.
 * - Workflow tasks should come first.
 * - Creating a new revision should take you to the admin edit screen.
 */
function cgov_core_moderation_sidebar_alter(array &$build, EntityInterface $entity) {

  // No actions, it is useless. We need to bail.
  if (empty($build['actions']['primary'])) {
    return;
  }

  // Remove delete button.
  if (array_key_exists('delete', $build['actions']['primary'])) {
    unset($build['actions']['primary']['delete']);
  }

  // Rename edit button in published state.
  if (!empty($build['actions']['primary']['edit'])) {
    if (
      (!empty($build['actions']['primary']['edit']['#title'])) &&
      ($build['actions']['primary']['edit']['#title']->getUntranslatedString() == 'Edit content')
    ) {
      $edit = $build['actions']['primary']['edit']['#title'] = new TranslatableMarkup("View in edit form");
    }
  }

  // Now set weights to height numbers, and we can then reorder.
  // We use Element::children to ensure we only get back render
  // elements.
  $tmp_weight = 0;
  foreach (Element::children($build['actions']['primary']) as $element) {
    // Force all buttons to English so there is less mixing of English
    // and Spanish in the UI.
    if (
      (!empty($build['actions']['primary'][$element]['#title'])) &&
      ($build['actions']['primary'][$element]['#title'] instanceof TranslatableMarkup)
    ) {
      $untranslatedString = $build['actions']['primary'][$element]['#title']->getUntranslatedString();
      $arguments = $build['actions']['primary'][$element]['#title']->getArguments();
      $edit = $build['actions']['primary'][$element]['#title'] = new FormattableMarkup($untranslatedString, $arguments);
    }

    $build['actions']['primary'][$element]['#weight'] = $tmp_weight + 100;
    $tmp_weight++;
  }

  if (!empty($build['actions']['secondary'])) {
    $tmp_weight = 0;
    foreach (Element::children($build['actions']['secondary']) as $element) {
      // Force all buttons to English so there is less mixing of English
      // and Spanish in the UI.
      if (
        (!empty($build['actions']['secondary'][$element]['#title'])) &&
        ($build['actions']['secondary'][$element]['#title'] instanceof TranslatableMarkup)
      ) {
        $untranslatedString = $build['actions']['secondary'][$element]['#title']->getUntranslatedString();
        $arguments = $build['actions']['secondary'][$element]['#title']->getArguments();
        $edit = $build['actions']['secondary'][$element]['#title'] = new FormattableMarkup($untranslatedString, $arguments);
      }

      $build['actions']['secondary'][$element]['#weight'] = $tmp_weight + 100;
      $tmp_weight++;
    }
  }

  // Move non-workflow buttons to secondary actions
  // Start at 2 since the Other Actions title will be 1.
  $tmp_action_weight = 2;
  $primary_actions = Element::children($build['actions']['primary']);
  foreach ($primary_actions as $name) {
    if ($name !== 'quick_draft_form') {
      $action = $build['actions']['primary'][$name];
      $build['actions']['secondary'][$name] = $action;
      $build['actions']['secondary'][$name]['#weight'] = $tmp_action_weight++;
      unset($build['actions']['primary'][$name]);
    }
  }

  if (!empty($build['actions']['secondary'])) {
    $build['actions']['secondary']['title'] = [
      '#markup' => t('<h3>Other Actions</h3>'),
      '#weight' => 1,
    ];
  }

  // The workflow options should come first.
  if (!empty($build['actions']['primary']['quick_draft_form'])) {
    $build['actions']['primary']['quick_draft_form']['#weight'] = 1;
  }

  // Force the renderer to use weights instead of the order.
  $build['actions']['#sorted'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Support for cgov_core_moderation_sidebar_alter to handle components
 * of the moderation bits.
 */
function cgov_core_form_moderation_sidebar_quick_transition_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove Discard Draft Button.
  if (!empty($form['discard_draft'])) {
    unset($form['discard_draft']);
  }

  // Reorder a few elements.
  $tmp_weight = 0;
  foreach (Element::children($form) as $element) {
    $form[$element]['#weight'] = $tmp_weight + 100;
    $tmp_weight++;
  }

  $form['title'] = [
    '#markup' => t('<h3>Workflow Actions</h3>'),
    '#weight' => 1,
  ];

  // Move the comment checkbox and textbox above the buttons.
  if (!empty($form['revision_log_toggle'])) {
    $form['revision_log_toggle']['#weight'] = 2;
    $form['revision_log_toggle']['#title'] = new TranslatableMarkup("Add Workflow Comment");
  }
  if (!empty($form['revision_log'])) {
    $form['revision_log']['#weight'] = 3;
  }

  $form['#submit'][] = '_cgov_core_form_moderation_sidebar_quick_transition_form_submit';
}

/**
 * Submit handler for moderation_sidebar workflow actions.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The state of the form.
 */
function _cgov_core_form_moderation_sidebar_quick_transition_form_submit(array $form, FormStateInterface $form_state) {

  // List of transition IDs that cause a redirect to the edit form.
  $edit_form_transitions = [
    'revise',
    'create_new_draft',
    'back_to_draft',
    'back_to_editing',
  ];

  $triggering_elem = $form_state->getTriggeringElement();

  // If there was no triggering element, then we need to exit.
  if ($triggering_elem == NULL) {
    return;
  }

  if (!in_array($triggering_elem['#id'], $edit_form_transitions)) {
    return;
  }

  // This is how moderation_sidebar does it, and it created the form_state.
  // So we should trust this will always be here when handing that quick
  // transiton submit.
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $form_state->get('entity');

  $form_state->setRedirectUrl($entity->toUrl('edit-form'));
}

/**
 * Implements hook_toolbar_alter().
 *
 * Unset the acquia_connector toolbar for non-site-admins.
 */
function cgov_core_toolbar_alter(&$items) {

  $user_roles = \Drupal::currentUser()->getRoles();
  // We can assume that only administrator should see the status message.
  if (!empty($user_roles) && !in_array("site_admin", $user_roles)) {

    unset($items['acquia_connector']);
  }

}

/**
 * Implements hook_preprocess_image_formatter().
 *
 * When alt text for an image is NULL and empty alt tag will not
 * be rendered. Through the UI this is not an issue, for migrated
 * content it is.
 *
 * NOTE: I tried hook_preprocess_image, but that was never called.
 * I found preprocess_image_formatter in the formatter and went
 * with that and it works. We should be using the image formatter
 * in most cases where this would apply.
 */
function cgov_core_preprocess_image_formatter(&$variables) {
  if (
    !array_key_exists('#alt', $variables['image']) ||
    $variables['image']['#alt'] === NULL
  ) {
    $variables['image']['#alt'] = "";
  }

}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function cgov_core_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  // Add the bundle as a cache tag to help simplify cache invalidation.
  if ($entity->getEntityTypeId() === 'node' || $entity->getEntityTypeId() === 'media') {
    $tags = $view_mode == 'full' ? [$entity->bundle() . ':full'] : [];
    $tags[] = $entity->bundle() . ':all-view-modes';
    if (!empty($build['#cache']['tags'])) {
      $build['#cache']['tags'] = Cache::mergeTags($build['#cache']['tags'], $tags);
    }
    else {
      // The probability of this case being hit should be VERY small.
      $build['#cache']['tags'] = Cache::mergeTags($entity->getCacheTags(), $tags);
    }
  }
}

/**
 * Implements field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function cgov_core_field_widget_single_element_link_default_form_alter(&$element, FormStateInterface $form_state, $context) {
  $element['uri']['#description'] = t('Enter the full URL starting with https://');
}

/**
 * Implements hook_page_attachments().
 */
function cgov_core_page_attachments(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');
  if ($node && $node->field_additional_library != NULL && $route_match->getRouteName() === 'entity.node.canonical') {
    $lib = $node->field_additional_library->value;
    $front_end_theme = \Drupal::service('theme_handler')->getDefault();
    $theme_libs = \Drupal::service('library.discovery')->getLibrariesByExtension($front_end_theme);
    if ($lib !== 'None' && array_key_exists($lib, $theme_libs)) {
      $attachments['#attached']['library'][] = $front_end_theme . '/' . $lib;
    }
  }
}

/**
 * Set dynamic allowed libraries for the additional library field.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being created.
 *
 * @return array
 *   An array of additional libraries within ncids_trans theme.
 */
function cgov_addl_lib_allowed_values_function(EntityInterface $entity) {
  $front_end_theme = \Drupal::service('theme_handler')->getDefault();
  $libs = \Drupal::service('library.discovery')->getLibrariesByExtension($front_end_theme);
  // Filters out all libraries that don't start with "addl-"
  // and adds in the default value "None".
  $options = array_reduce(
    array_filter(array_keys($libs), fn($key) => str_starts_with($key, 'addl-')),
    fn($carry, $key) => [...$carry, $key => $key],
    ['none' => 'None']
  );
  return $options;
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the "value" key.
 */
function cgov_addl_lib_default_value_function(EntityInterface $entity, FieldDefinitionInterface $definition) {
  return [
    ['value' => 'None'],
  ];
}

/**
 * Implements hook_entity_type_access().
 */
function cgov_core_taxonomy_term_access($entity, $operation, $account) {
  // Prevent term deletion if used in default revision.
  $references = [];
  $vocabs = ['cgov_cancer_center_types', 'cgov_cancer_center_regions', 'cgov_event_series', 'cgov_event_venues', 'cgov_biography_campuses', 'cgov_site_sections'];
  if (in_array($entity->bundle(), $vocabs)) {
    switch ($operation) {
      case 'delete':
        $references = getTermRefsFromField($entity->id(), $entity->bundle());
        if (count($references) > 0) {
          return AccessResult::forbidden();
        }
        break;

      // Let other modules weigh in if we haven't vetoed the operation.
      default:
        return AccessResult::neutral();
    }
  }
  return AccessResult::neutral();
}

/**
 * Method to find if term refrence exist.
 */
function getTermRefsFromField($tid, $vid) {
  $entities = [];

  $entity_reference_fields = [];
  $field_map = \Drupal::service('entity_field.manager')->getFieldMap();
  foreach ($field_map as $key => $entity_type) {
    foreach ($entity_type as $field_name => $fields) {
      if ($fields["type"] == "entity_reference" && strpos($field_name, "field_") !== FALSE) {
        $entity_reference_fields[$key][$field_name] = $fields;
      }
    }
  }
  foreach ($entity_reference_fields as $entity_type => $field_array) {
    foreach ($field_array as $field_name => $values) {
      foreach ($values['bundles'] as $bundle) {
        $field_config = FieldConfig::loadByName($entity_type, $bundle, $field_name);
        if ($field_config != NULL) {
          $field_settings = $field_config->getSettings();
          if ($field_settings["target_type"] == "taxonomy_term" && $field_settings['handler'] == "default:taxonomy_term") {
            if (in_array($vid, $field_settings['handler_settings']['target_bundles']) || empty($field_settings['handler_settings']['target_bundles'])) {
              $map[$entity_type][$field_name] = $field_name;
            }
          }
        }
      }
    }
  }
  foreach ($map as $entity_type => $fields) {
    foreach ($fields as $key => $value) {
      $result = [];
      $result = \Drupal::entityTypeManager()->getStorage($entity_type)->getQuery()
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->condition($value, $tid, '=')->execute();
      if (!empty($result)) {
        $entities[$entity_type] = $result;
      }
    }
  }
  return $entities;
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function cgov_core_taxonomy_term_delete(EntityInterface $entity) {
  $bundle = $entity->bundle();
  $tid = $entity->id();
  $tags = [];
  if ($bundle == 'cgov_blog_topics') {
    $references = getTermRefsFromField($tid, $bundle);
    if (count($references) > 0) {
      foreach ($references as $type => $ids) {
        if ($type === 'node') {
          foreach ($ids as $value) {
            $tags[] = 'node:' . $value;
          }
        }
      }
      if (!empty($tags)) {
        Cache::invalidateTags($tags);
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter.
 *
 * D10.3 Added revisions for taxonomy terms, but considering how
 * specialized some of our vocabularies are, we need more
 * testing before we support revisions and reverting.
 */
function cgov_core_menu_local_tasks_alter(array &$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  // This hides the revisions tab.
  if ($route_name === 'entity.taxonomy_term.edit_form') {
    if (isset($data['tabs'][0]['entity.version_history:taxonomy_term.version_history'])) {
      unset($data['tabs'][0]['entity.version_history:taxonomy_term.version_history']);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * D10.3 Added revisions for taxonomy terms, but considering how
 * specialized some of our vocabularies are, we need more
 * testing before we support revisions and reverting.
 */
function cgov_core_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // This hides the whole Revision Information vertical tab with the revision
  // checkbox and comments.
  $form['revision_information']['#access'] = FALSE;
}

/**
 * Method to clear source paths for redirects when inserted or updated.
 */
function _cgov_core_clear_redirect_source_cache(Redirect $entity) {
  // On local development without purge, make sure we don't fail.
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('purge')) {
    \Drupal::logger('cgov_core')->notice("Attempted to purge redirect without the purge module installed.");
    return;
  }

  // Set up our needed variables for calculating the URL.
  // The value for cgdp.cache_url_host is computed in cgov_caching.settings.php.
  $host = Settings::get('cgdp.cache_url_host');
  $host = rtrim($host, '/');
  $sourcePath = '/' . $entity->redirect_source->path;

  // The purge invalidation factory helps us construct an invalidation object
  // that can be understood by the queuer and purgers.
  $purgeInvalidationFactory = \Drupal::service('purge.invalidation.factory');

  // If no language is specified for the redirect,
  // purge the url for all languages.
  $language = [$entity->language->value];
  if ($entity->language->value === Language::LANGCODE_NOT_SPECIFIED) {
    $langcodes = \Drupal::languageManager()->getLanguages();
    $language = array_keys($langcodes);
  }

  // Create an absolute url for all languages based on $language,
  // then create an invalidation object using it.
  $invalidations = [];
  foreach ($language as $value) {
    $language_prefix = \Drupal::config('language.negotiation')->get("url.prefixes.$value");
    if (!empty($language_prefix)) {
      $sourcePath = Url::fromUri("internal:/{$language_prefix}{$sourcePath}")->toString();
    }
    $invalidateUrl = $host . $sourcePath;
    $invalidations[] = $purgeInvalidationFactory->get('url', $invalidateUrl);
  }

  // Actually add the invalidations to the purge queue.
  $purgeQueuers = \Drupal::service('purge.queuers');
  $queuer = $purgeQueuers->get('drush_purge_queue_add');
  if (empty($queuer)) {
    \Drupal::logger('cgov_core')->notice("Attempted to purge redirect without the drush purgue queuer installed.");
    return;
  }
  $purgeQueue = \Drupal::service('purge.queue');
  $purgeQueue->add($queuer, $invalidations);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * hook_redirect_insert is called on all new redirect creations, per Redirect module API.
 */
function cgov_core_redirect_insert(Redirect $entity) {
  _cgov_core_clear_redirect_source_cache($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * hook_redirect_update is called on all redirect updates, per Redirect module API.
 */
function cgov_core_redirect_update(Redirect $entity) {
  _cgov_core_clear_redirect_source_cache($entity);
  // We do not need to clear the $entity->original because the redirect module
  // already clears that on updates and deletes via cache tag.
}

/**
 * Implements hook_preprocess_views_view_field().
 *
 * Rewrite the changed field to display the date in our preferred format,
 * regardless of the user's locale.
 */
function cgov_core_preprocess_views_view_field(array &$variables) {
  $view = $variables['view'];

  $isContentView = fn($viewID): bool => in_array($viewID, ['content', 'moderated_content', 'block_content']) !== FALSE
    && (strpos($view->current_display, 'page') === 0 || strpos($view->current_display, 'moderated_content') === 0);
  $isMediaView = fn($viewID): bool => in_array($viewID, ['media', 'moderated_media']) && strpos($view->current_display, 'media_page_list') === 0;

  // We only want to do this for content and media views.
  if (!$isContentView($view->id()) && !$isMediaView($view->id()))
    return;

  // We only want to do this for the 'changed' field.
  if ($variables['field']->field !== 'changed' || empty($variables['row']->_entity))
    return;

  // Apply short date format to the 'changed' field.
  $timestamp = $variables['row']->_entity->getChangedTime();
  $variables['output'] = \Drupal::service('date.formatter')->format($timestamp,'short','',NULL,'en');
}
